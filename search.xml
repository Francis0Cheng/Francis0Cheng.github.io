<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pattern_recognition</title>
    <url>/2019/12/12/patternrecognition/</url>
    <content><![CDATA[<h3 id="剪辑KNN条件"><a href="#剪辑KNN条件" class="headerlink" title="剪辑KNN条件"></a>剪辑KNN条件</h3><p>如果样本足够多，就可以重复地执行剪辑程序， 以进一步提高分类性能。称为重复剪辑最近邻法。</p>
<p>KNN被看作一种从样本中获取<strong>最大后验概率</strong>的方法，</p>
<p>剪辑最近邻法可以推广到K-近邻法中，具体是先用k-NN进行剪辑，第二部用1nn算法进行分类 ，当类数增加时，该方法的效果会变得更好。</p>
<p>重复加急最近邻法条件是样本足够多</p>
<h3 id="马氏距离-欧氏距离-明氏距离"><a href="#马氏距离-欧氏距离-明氏距离" class="headerlink" title="马氏距离  欧氏距离 明氏距离"></a>马氏距离  欧氏距离 明氏距离</h3><p>P24</p>
<p>欧式距离具有平移和旋转不变性。</p>
<p>马氏距离对一切<strong>非奇异线性变换</strong>都是不变的。这说明他不受量纲选择的影响。并且平移不变。此外马氏距离对特征的相关性做了处理（计算表达式中有矢量集的样本协方差阵。）</p>
<h3 id="感知器算法"><a href="#感知器算法" class="headerlink" title="感知器算法"></a>感知器算法</h3><p>P89</p>
<h3 id="H-K算法优点"><a href="#H-K算法优点" class="headerlink" title="H-K算法优点"></a>H-K算法优点</h3><p><strong>181.基于二次准则函数的H-K算法较之于感知器算法的优点是（BD）?</strong></p>
<p>A.计算量小</p>
<p>B.可以判别问题是否线性可分</p>
<p>C.其解完全适用于非线性可分的情况</p>
<p>D.其解的适应性更好</p>
<h3 id="相似性测度-匹配测度"><a href="#相似性测度-匹配测度" class="headerlink" title="相似性测度 匹配测度"></a>相似性测度 匹配测度</h3><p>P28 Rao测度&amp;Dice测度</p>
<h3 id="fisher判别原理"><a href="#fisher判别原理" class="headerlink" title="fisher判别原理"></a>fisher判别原理</h3><h3 id="判别域渐变方程"><a href="#判别域渐变方程" class="headerlink" title="判别域渐变方程"></a>判别域渐变方程</h3><h3 id="聚类分析的分类？"><a href="#聚类分析的分类？" class="headerlink" title="聚类分析的分类？"></a>聚类分析的分类？</h3><h3 id="C均值算法影响因素"><a href="#C均值算法影响因素" class="headerlink" title="C均值算法影响因素"></a>C均值算法影响因素</h3><h3 id="层次聚类算法例题"><a href="#层次聚类算法例题" class="headerlink" title="层次聚类算法例题"></a>层次聚类算法例题</h3><h3 id="最小误判-最小损失"><a href="#最小误判-最小损失" class="headerlink" title="最小误判 最小损失"></a>最小误判 最小损失</h3><h3 id="为何提出最小损失准则"><a href="#为何提出最小损失准则" class="headerlink" title="为何提出最小损失准则"></a>为何提出最小损失准则</h3><h3 id="最小误判有几种形式"><a href="#最小误判有几种形式" class="headerlink" title="最小误判有几种形式"></a>最小误判有几种形式</h3><h3 id="fisher主要计步骤与分类决策规则"><a href="#fisher主要计步骤与分类决策规则" class="headerlink" title="fisher主要计步骤与分类决策规则"></a>fisher主要计步骤与分类决策规则</h3><h3 id="什么是线性判别函数"><a href="#什么是线性判别函数" class="headerlink" title="什么是线性判别函数"></a>什么是线性判别函数</h3><h3 id="线性判决的几何意义"><a href="#线性判决的几何意义" class="headerlink" title="线性判决的几何意义"></a>线性判决的几何意义</h3><h3 id="判决分类结果好坏的标准-一句话"><a href="#判决分类结果好坏的标准-一句话" class="headerlink" title="判决分类结果好坏的标准  一句话"></a>判决分类结果好坏的标准  一句话</h3><h3 id="最小损失和最小误判的关系"><a href="#最小损失和最小误判的关系" class="headerlink" title="最小损失和最小误判的关系"></a>最小损失和最小误判的关系</h3><h3 id="最大似然估计和矩估计的概念"><a href="#最大似然估计和矩估计的概念" class="headerlink" title="最大似然估计和矩估计的概念"></a>最大似然估计和矩估计的概念</h3><h3 id="聚类分析的使用条件，-条状分布应该用什么算法，-团状用什么算法"><a href="#聚类分析的使用条件，-条状分布应该用什么算法，-团状用什么算法" class="headerlink" title="聚类分析的使用条件， 条状分布应该用什么算法， 团状用什么算法"></a>聚类分析的使用条件， 条状分布应该用什么算法， 团状用什么算法</h3><p><img src="C:\Users\MSI\AppData\Roaming\Typora\typora-user-images\1576131925604.png" alt="1576131925604"></p>
<h3 id="最小条件损失，-最小损失准则概念"><a href="#最小条件损失，-最小损失准则概念" class="headerlink" title="最小条件损失， 最小损失准则概念"></a>最小条件损失， 最小损失准则概念</h3><h3 id="C均值重心选择-样本顺序影响因素，选类心的顺序"><a href="#C均值重心选择-样本顺序影响因素，选类心的顺序" class="headerlink" title="C均值重心选择 样本顺序影响因素，选类心的顺序"></a>C均值重心选择 样本顺序影响因素，选类心的顺序</h3><h3 id="相似性测度-匹配距离测度相似测度-劳氏-戴氏"><a href="#相似性测度-匹配距离测度相似测度-劳氏-戴氏" class="headerlink" title="相似性测度 匹配距离测度相似测度 劳氏 戴氏"></a>相似性测度 匹配距离测度相似测度 劳氏 戴氏</h3><h3 id="模式识别系统构成"><a href="#模式识别系统构成" class="headerlink" title="模式识别系统构成"></a>模式识别系统构成</h3><p>特征提取 特征选择 学习和训练 分类识别</p>
<h3 id="层次聚类，算法结果影响的因素"><a href="#层次聚类，算法结果影响的因素" class="headerlink" title="层次聚类，算法结果影响的因素"></a>层次聚类，算法结果影响的因素</h3><h3 id="两类方法处理多分类"><a href="#两类方法处理多分类" class="headerlink" title="两类方法处理多分类"></a>两类方法处理多分类</h3><h3 id="什么是模式识别"><a href="#什么是模式识别" class="headerlink" title="什么是模式识别"></a>什么是模式识别</h3><p>所谓模式识别 是根据研究对象的特征或者属性，利用计算机为中心的机器系统运用一定的分析算法认定他的类别，系统应使用分类识别的结果尽可能地符合事实</p>
<h3 id="先验概率、后验概率、类概率密度"><a href="#先验概率、后验概率、类概率密度" class="headerlink" title="先验概率、后验概率、类概率密度"></a>先验概率、后验概率、类概率密度</h3><h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><h3 id="NP判决与最小损失，最小误判的异同"><a href="#NP判决与最小损失，最小误判的异同" class="headerlink" title="NP判决与最小损失，最小误判的异同"></a>NP判决与最小损失，最小误判的异同</h3>]]></content>
  </entry>
  <entry>
    <title>hog-extract</title>
    <url>/2019/11/06/hog-extract/</url>
    <content><![CDATA[<p><img src="1.png" alt="1"></p>
<p><img src="2.png" alt="2"></p>
]]></content>
      <tags>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>elegant-code</title>
    <url>/2019/10/29/elegant-code/</url>
    <content><![CDATA[<p>统计行数，单词书与字符串数， 这里对单词的定义  比较宽松， 他是任何不包含空格、制表符或者换行符序列。下面这段程序使 UNIX系统中wc程序的骨干部分。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN 1 <span class="comment">/*inside a word*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT 0 <span class="comment">/*outside a word*/</span></span></span><br><span class="line"><span class="comment">/* count lines, words,  and characters  in input*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c, nl, nw, nc, state;</span><br><span class="line">    state = OUT;</span><br><span class="line">    nl = nw = nc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c==getchar() != EOF))&#123;</span><br><span class="line">        ++nc;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'\n'</span>)</span><br><span class="line">            ++nl;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">' '</span>|| c==<span class="string">'\n'</span> ||c =<span class="string">'\t'</span>)</span><br><span class="line">            state==OUT;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(state==OUT)&#123;</span><br><span class="line">            state = IN;</span><br><span class="line">            ++nw;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, nl, nw, nc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>two-scoops-of-django</title>
    <url>/2019/07/04/two-scoops-of-django/</url>
    <content><![CDATA[<p>django学习书籍<code>two scoop of django</code>的心得整理</p>
<h2 id="导入包时要用相对路径导入"><a href="#导入包时要用相对路径导入" class="headerlink" title="导入包时要用相对路径导入"></a>导入包时要用相对路径导入</h2><p>不要这样做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DON'T DO THIS!</span></span><br><span class="line"><span class="comment"># Hardcoding of the 'cones' package</span></span><br><span class="line"><span class="comment"># with implicit relative imports</span></span><br><span class="line"><span class="keyword">from</span> cones.models <span class="keyword">import</span> WaffleCone</span><br><span class="line"><span class="keyword">from</span> cones.forms <span class="keyword">import</span> WaffleConeForm</span><br><span class="line"><span class="keyword">from</span> core.views <span class="keyword">import</span> FoodMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaffleConeCreateView</span><span class="params">(FoodMixin, CreateView)</span>:</span></span><br><span class="line">    model = WaffleCone</span><br><span class="line">    form_class = WaffleConeForm</span><br></pre></td></tr></table></figure>
<p>应该这样做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cones/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> CreateView</span><br><span class="line"></span><br><span class="line"><span class="comment"># Relative imports of the 'cones' package</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> WaffleCone</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> WaffleConeForm</span><br><span class="line"><span class="keyword">from</span> core.views <span class="keyword">import</span> FoodMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaffleConeCreateView</span><span class="params">(FoodMixin, CreateView)</span>:</span></span><br><span class="line">    model = WaffleCone</span><br><span class="line">    form_class = WaffleConeForm</span><br></pre></td></tr></table></figure>
<h2 id="包导入时注意顺序"><a href="#包导入时注意顺序" class="headerlink" title="包导入时注意顺序"></a>包导入时注意顺序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cones/views.py</span></span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> CreateView</span><br><span class="line"></span><br><span class="line"><span class="comment"># Relative imports of the 'cones' package</span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> WaffleCone</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> WaffleConeForm</span><br><span class="line"><span class="keyword">from</span> core.views <span class="keyword">import</span> FoodMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaffleConeCreateView</span><span class="params">(FoodMixin, CreateView)</span>:</span></span><br><span class="line">    model = WaffleCone</span><br><span class="line">    form_class = WaffleConeForm</span><br></pre></td></tr></table></figure>
<h2 id="用Cookiecutter生成django项目"><a href="#用Cookiecutter生成django项目" class="headerlink" title="用Cookiecutter生成django项目"></a>用Cookiecutter生成django项目</h2><p>命令行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookiecutter https://github.com/pydanny/cookiecutter-django</span><br></pre></td></tr></table></figure>
<h2 id="使用多个设置文件"><a href="#使用多个设置文件" class="headerlink" title="使用多个设置文件"></a>使用多个设置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">settings/</span><br><span class="line">├── __init__.py</span><br><span class="line">├── base.py</span><br><span class="line">├── local.py</span><br><span class="line">├── staging.py</span><br><span class="line">├── test.py</span><br><span class="line">├── production.py</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt="1"></p>
<p>然后如果要运行时的时候指定某个settings文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py shell --settings=twoscoops.settings.local</span><br></pre></td></tr></table></figure>
<h2 id="使用抽象类继承类"><a href="#使用抽象类继承类" class="headerlink" title="使用抽象类继承类"></a>使用抽象类继承类</h2>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django笔记</title>
    <url>/2019/04/10/django-notes/</url>
    <content><![CDATA[<p>教学视频地址<a href="https://www.youtube.com/watch?v=F5mRW0jo-U4&amp;t=12507s" target="_blank" rel="noopener">Python Django Web Framework Full Course for Beginnners</a></p>
<h2 id="创建的model需要在admin-py中注册"><a href="#创建的model需要在admin-py中注册" class="headerlink" title="创建的model需要在admin.py中注册"></a>创建的model需要在admin.py中注册</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Product</span><br><span class="line">admin.site.register(Product)</span><br></pre></td></tr></table></figure>
<h2 id="通过python-shell添加模型"><a href="#通过python-shell添加模型" class="headerlink" title="通过python shell添加模型"></a>通过python shell添加模型</h2><p>首先进入django的python shell</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>
<p>导入模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> products.models <span class="keyword">import</span> Product</span><br></pre></td></tr></table></figure>
<p>查看已创建的Product对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Product.objects.all()</span><br></pre></td></tr></table></figure>
<p>创建一个新的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Product.objects.create(title=<span class="string">'New product'</span>, description=<span class="string">"another one"</span>, price=<span class="string">"19.2"</span>, summary=<span class="string">"sweet"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h2><h3 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python manage.py startapp pagess</span><br></pre></td></tr></table></figure>
<h3 id="在views-py中创建函数"><a href="#在views-py中创建函数" class="headerlink" title="在views.py中创建函数"></a>在views.py中创建函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home_view</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> HttpResponse(<span class="string">"&lt;h1&gt;Hello&lt;/h1&gt;"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="在mysite中的urls-py中加入path"><a href="#在mysite中的urls-py中加入path" class="headerlink" title="在mysite中的urls.py中加入path"></a>在mysite中的urls.py中加入path</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pages <span class="keyword">import</span> views  <span class="comment">##注意引入pages中的views</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, views.home_view, name=<span class="string">'home'</span>)  <span class="comment">#注意这里的home_view没有括号的也就是一个纯函数名</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="views中函数的request参数"><a href="#views中函数的request参数" class="headerlink" title="views中函数的request参数"></a>views中函数的request参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home_view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">	print(request)</span><br><span class="line">    print(request.user)</span><br><span class="line">	print(args, kwargs)</span><br><span class="line">	<span class="keyword">return</span> HttpResponse(<span class="string">"&lt;h1&gt;Hello&lt;/h1&gt;"</span>)</span><br></pre></td></tr></table></figure>
<p>我们这边设置request变量， 打印出来是<code>&lt;WSGIRequest: GET &#39;/&#39;&gt;</code>， 一个WSGIRequest，再打印出<code>request.user</code>， 结果是<code>AnonymousUser</code></p>
<h2 id="模板的使用"><a href="#模板的使用" class="headerlink" title="模板的使用"></a>模板的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home_view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">	</span><br><span class="line">	 <span class="keyword">return</span> render(request, <span class="string">"home.html"</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>第一个参数是request， 第二个是模板的名称， 第三个是需要传入的参数字典</p>
<p>如果需要使用模板，必须在settings.py中设置模板路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)]</span><br><span class="line">		,</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<p>将<code>&#39;DIRS&#39;</code>设置为根目录下的template目录就可以在这个目录下创建模板的html文件了</p>
<h2 id="模板的继承"><a href="#模板的继承" class="headerlink" title="模板的继承"></a>模板的继承</h2><h3 id="创建模板html文件"><a href="#创建模板html文件" class="headerlink" title="创建模板html文件"></a>创建模板html文件</h3><p>这里我们创建<code>base.html</code></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Coding for Entrepreneurs is doing try django<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        replace me</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>注意，这里的block模块， 在子模板中再次引入可以替换block间的内容</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">       replace me  这里将会被代替</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h3 id="引入模板"><a href="#引入模板" class="headerlink" title="引入模板"></a>引入模板</h3><p>这里我们在<code>home.html</code>中继续<code>base.html</code></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello world <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a template<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h2 id="模板的include"><a href="#模板的include" class="headerlink" title="模板的include"></a>模板的include</h2><p>创建需要include的模板， 这里我们创建<code>navbar.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>About<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>base.html</code>中include进去</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'navbar.html' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h2 id="模板的上下文"><a href="#模板的上下文" class="headerlink" title="模板的上下文"></a>模板的上下文</h2><p>首先在views.py中添加上下文参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about_view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">	my_context = &#123;</span><br><span class="line">		<span class="string">"my_text"</span>: <span class="string">"this is about me"</span>,</span><br><span class="line">		<span class="string">"my_number"</span>: <span class="number">123</span>,</span><br><span class="line">		<span class="string">"my_list"</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> render(request, <span class="string">'about.html'</span>, my_context)</span><br></pre></td></tr></table></figure>
<p>在模板中使用格式化渲染</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> About page <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is a template<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; my_number &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; my_text &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> my_list %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123; item &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<h2 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h2><p><a href="https://docs.djangoproject.com/en/2.2/ref/templates/builtins/" target="_blank" rel="noopener">Django Template Filters</a></p>
<p>介绍几个重要的</p>
<h3 id="save"><a href="#save" class="headerlink" title="save"></a>save</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">context = &#123;</span><br><span class="line">        &apos;Hello&apos;: &quot;你好&quot;,</span><br><span class="line">        &quot;lala&quot;: &quot;啦啦啦&quot;,</span><br><span class="line">        &apos;my_list&apos;: [1, 2, 3, 5],</span><br><span class="line">        &apos;my_html&apos;: &apos;&lt;h1&gt;Hello World&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>假设有一段html源代码被传入， 如果直接用调用是不行的，没有被渲染出来</p>
<p>需要</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; my_html|safe&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>需要添加save filter才能诶渲染</p>
<h2 id="app中的template"><a href="#app中的template" class="headerlink" title="app中的template"></a>app中的template</h2><p>在app中建立template可以使得这个app成为一个插件，在哪里都可以用</p>
<h3 id="在app中建立template文件夹"><a href="#在app中建立template文件夹" class="headerlink" title="在app中建立template文件夹"></a>在app中建立template文件夹</h3><p>这里我们的app是product， 所以在product文件夹下建立template文件夹</p>
<h3 id="在建立的template文件夹中建立一个名称为app名字的文件夹"><a href="#在建立的template文件夹中建立一个名称为app名字的文件夹" class="headerlink" title="在建立的template文件夹中建立一个名称为app名字的文件夹"></a>在建立的template文件夹中建立一个名称为app名字的文件夹</h3><p>这里我们建立的是/products/template/products</p>
<blockquote>
<p>—products</p>
<p>——-template</p>
<p>————products</p>
<p>—————–product_detail.html</p>
<hr>
</blockquote>
<h3 id="在设置中给’APP-DIRS’赋值为True"><a href="#在设置中给’APP-DIRS’赋值为True" class="headerlink" title="在设置中给’APP_DIRS’赋值为True"></a>在设置中给’APP_DIRS’赋值为True</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;,</span><br><span class="line">        &apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)]</span><br><span class="line">		,</span><br><span class="line">        &apos;APP_DIRS&apos;: True,</span><br><span class="line">        &apos;OPTIONS&apos;: &#123;</span><br><span class="line">            &apos;context_processors&apos;: [</span><br><span class="line">                &apos;django.template.context_processors.debug&apos;,</span><br><span class="line">                &apos;django.template.context_processors.request&apos;,</span><br><span class="line">                &apos;django.contrib.auth.context_processors.auth&apos;,</span><br><span class="line">                &apos;django.contrib.messages.context_processors.messages&apos;,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>APP_DIRS决定了Djang是否会去寻找app中的template</p>
<p><strong>如果说根目录下的template和app中的template有相同的路径，那么Django会先去找根目录下的template中的模板</strong></p>
<p>比如</p>
<p>app下的 <a href="https://github.com/Francis0Cheng/blogmd/blob/master/home/u/Documents/blog/1.png" target="_blank" rel="noopener"><img src="4.png" alt="1"></a></p>
<p>根目录下 <a href="https://github.com/Francis0Cheng/blogmd/blob/master/home/u/Documents/blog/2.png" target="_blank" rel="noopener"><img src="5.png" alt="2"></a></p>
<p>这样的情况下，在view.py中设置render模板的路径为’/products/product_detail.html’Django会先选择/mysite/template/products/product_detail.html, 而不是/mysite/products/product_detail.html</p>
<h2 id="forms"><a href="#forms" class="headerlink" title="forms"></a>forms</h2><p>我们需要用户上传数据，这就需要forms</p>
<h3 id="在app根目录下创建forms-py"><a href="#在app根目录下创建forms-py" class="headerlink" title="在app根目录下创建forms.py"></a>在app根目录下创建forms.py</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django import forms</span><br><span class="line"></span><br><span class="line">from .models import Product</span><br><span class="line"></span><br><span class="line">class ProductForm(forms.ModelForm):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = Product</span><br><span class="line">        fields = [</span><br><span class="line">            &apos;title&apos;,</span><br><span class="line">            &apos;description&apos;,</span><br><span class="line">            &apos;price&apos;,</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>
<p>注意这边的files如果有一个是没有设置defaul、不能是空的，那么用户提交的数据将会不完整， 无法进入数据库，导致错误发生</p>
<h3 id="为表单提交创建新的view"><a href="#为表单提交创建新的view" class="headerlink" title="为表单提交创建新的view"></a>为表单提交创建新的view</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def product_create_view(request):</span><br><span class="line">    form = ProductForm(request.POST or None)</span><br><span class="line">    if form.is_valid():</span><br><span class="line">        form.save()</span><br><span class="line"></span><br><span class="line">        # rerender it, to clear the text</span><br><span class="line">        form = ProductForm()</span><br><span class="line">    context = &#123;</span><br><span class="line">        &apos;form&apos;: form</span><br><span class="line">    &#125;</span><br><span class="line">    return render(request, &quot;products/product_create.html&quot;, context)</span><br></pre></td></tr></table></figure>
<p>其中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">form.save()</span><br><span class="line">form.ProductForm()</span><br></pre></td></tr></table></figure>
<p>是保存了数据之后刷新表单， 将输入框中的数据清空</p>
<h3 id="创建html模板文件"><a href="#创建html模板文件" class="headerlink" title="创建html模板文件"></a>创建html模板文件</h3><p>在app目录下的/template/products中创建product_create.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &apos;base.html&apos; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;form method=&quot;POST&quot;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;Save&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加到路由中"><a href="#添加到路由中" class="headerlink" title="添加到路由中"></a>添加到路由中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path(&apos;create/&apos;, product_create_view, name=&quot;product_create&quot;),</span><br></pre></td></tr></table></figure>
<h3 id="创建生的Form"><a href="#创建生的Form" class="headerlink" title="创建生的Form"></a>创建生的Form</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RawProductForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    <span class="comment"># overwrite the basic attar</span></span><br><span class="line">    title = forms.CharField(label=<span class="string">'MY Label'</span>, widget=forms.TextInput(</span><br><span class="line">        attrs=&#123;</span><br><span class="line">            <span class="string">'placeholder'</span>:<span class="string">"Your title"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ))</span><br><span class="line">    description = forms.CharField(</span><br><span class="line">        required = <span class="keyword">False</span>,</span><br><span class="line">        widget=forms.Textarea(</span><br><span class="line">            attrs=&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="string">"class"</span>:<span class="string">"new-lass two"</span>,</span><br><span class="line">                <span class="string">"rows"</span>:<span class="number">20</span>,</span><br><span class="line">                <span class="string">"col"</span>:<span class="number">120</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    price = forms.DecimalField()</span><br></pre></td></tr></table></figure>
<p>效果将会是<br><img src="D:\MyBlog\source\_posts\django-notes\6.png" alt="6"></p>
<h2 id="Django-POST-和-GET"><a href="#Django-POST-和-GET" class="headerlink" title="Django POST 和 GET"></a>Django POST 和 GET</h2><p><a href="https://docs.djangoproject.com/en/2.2/ref/request-response/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/2.2/ref/request-response/</a></p>
<p>在view.py中定义的函数，第一个参数是request</p>
<p>当有post和get请求时， 返回的request中有GET和POST两种属性</p>
<p>其实他们两个都是QueryDict对象，可以通过request.POST.get() 和request.GET.get()方法获取参数</p>
]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow基础的CNN网络</title>
    <url>/2019/04/04/train-cnn-with-tensorflow/</url>
    <content><![CDATA[<p>英文原文地址<a href="https://cv-tricks.com/tensorflow-tutorial/training-convolutional-neural-network-for-image-classification/" target="_blank" rel="noopener">https://cv-tricks.com/tensorflow-tutorial/training-convolutional-neural-network-for-image-classification/</a></p>
<p>  为了演示如何构建基于卷积神经网络的图像分类器，我们将构建一个6层神经网络，用于识别和分离狗的图像和猫的图像。我们将构建的这个网络是一个非常小的网络，您也可以在CPU上运行。传统的神经网络非常擅长进行图像分类，如果在CPU上接受过培训，则需要更多的参数并花费大量时间。但是，在这篇文章中，我的目标是向您展示如何使用Tensorflow构建真实世界的卷积神经网络，而不是参与ILSVRC。在我们开始使用Tensorflow教程之前，让我们先介绍一下卷积神经网络的基础知识。</p>
<h1 id="CNN的基础知识"><a href="#CNN的基础知识" class="headerlink" title="CNN的基础知识"></a>CNN的基础知识</h1><p>  神经网络本质上是解决优化问题的数学模型。它们由神经元构成，是神经网络的基本计算单元。神经元接受输入（比如说<code>x</code>），对它做一些计算（比方说：用变量<code>w</code>乘以它并加上另一个变量<code>b</code>）来产生一个值（比如说; <code>z = wx b</code>）。该值被传递给称为<strong>激活函数（f）</strong>的非线性函数，以产生神经元的最终输出（激活）。激活功能有很多种。其中一种流行的激活函数是Sigmoid：</p>
<p><img src="1.webp" alt="1"></p>
<p>  使用Sigmoid函数作为激活函数的神经元将被称为Sigmoid神经元。神经元根据激活函数被命名，激活函数有很多种，如RELU，TanH等（请记住这一点）。一个神经元可以连接到多个神经元，如下所示：</p>
<p><img src="2.webp" alt="1"></p>
<p>  在此示例中，您可以看到权重是连接的属性，即每个连接具有不同的权重值，而偏差是神经元的属性。这是产生输出y的sigmoid神经元的完整过程：</p>
<p><img src="3.webp" alt="3"><br><a id="more"></a></p>
<h2 id="神经网络层（Layer）"><a href="#神经网络层（Layer）" class="headerlink" title="神经网络层（Layer）:"></a>神经网络层（Layer）:</h2><p>  如果将神经元堆叠在一条线上，它就称为一层;这是神经网络的下一个组成部分。</p>
<p><img src="4.webp" alt="1"></p>
<p>  如上所示，绿色神经元构成1层，这是网络的第一层，输入数据通过该层传递到网络。同样，最后一层称为输出层，如红色所示。输入和输出层之间的层称为隐藏层。在这个例子中，我们只有一个隐藏层，以蓝色显示。具有许多隐藏层的网络往往更准确而被称为深度网络，使用这些深度网络的机器学习算法被称为深度学习。</p>
<h2 id="神经网络层的种类："><a href="#神经网络层的种类：" class="headerlink" title="神经网络层的种类："></a>神经网络层的种类：</h2><p>通常，一层中的所有神经元都进行类似的数学运算，并且神经网络层的命名往往取决于其进行的数学运算（输入和输出层除外，因为它们几乎不进行数学运算）。以下是您应该了解的最流行的图层类型：</p>
<h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><p>  卷积是一种数学运算，用于单次处理以过滤信号，在信号中找到模式等。在卷积层中，所有神经元都将卷积运算应用于输入，因此它们被称为卷积神经元。卷积神经元中最重要的参数是滤波器大小，假设我们有一个滤波器大小为5 <em> 5 </em> 3的层。另外，假设馈送到卷积神经元的输入是具有3个通道的大小为32 * 32的输入图像。</p>
<p><img src="5.webp" alt="1"></p>
<p>  让我们从图像中选择一个5 <em> 5 </em> 3（彩色图像中的通道数为3）大小的块，并用我们的滤波器（w）计算卷积（点积）。这一个卷积运算将产生一个数字作为输出。并且我们还需将偏差（b）添加到此输出中。</p>
<p><img src="7.webp" alt="1"></p>
<p>  为了计算点积，过滤器的第三维必须与输入中的通道数相同。 即，当我们计算点积时，它是5 <em> 5 </em> 3大小的块的矩阵乘法，具有5 <em> 5 </em> 3大小的滤波器。</p>
<p>我们将在整个输入图像上滑动卷积滤波器以计算整个图像的输出，如下图所示：</p>
<p><img src="1.gif" alt="1"></p>
<p>  在这种情况下，我们一次将窗口滑动1个像素。如果在某些情况下，人们将窗户滑动超过1个像素。这个数字称为步幅(<strong>stride</strong>)。</p>
<p> 如果你在2D中连接所有这些输出，我们将有一个大小为28 <em> 28的输出<strong>激活图(activation map)</strong>（你能想到为什么32</em>32的输入、5*5的过滤器(filter)、1的步幅(stride)，会得到28*28的输出吧）。通常，我们在一个卷积层中使用多于1个滤波器。如果我们的示例中有6个滤波器，则输出的大小为28 <em> 28 </em> 6</p>
<p><img src="8.webp" alt="8"></p>
<p>  如您所见，在每次卷积之后，输出的大小会减小（在这本例中，我们将从32 <em> 32变为28 </em> 28）。 在具有多个层的深度神经网络中，输出将以这种方式变得非常小，这不能很好地工作。 因此，在输入层的边界上添加零以使输出与输入层的大小相同是标准做法。 因此，在此示例中，如果我们在输入层的两侧添加大小为2的填充，则输出层的大小将为32 <em> 32 </em> 6，这也非常适合实现目的。 假设您有一个大小为N * N的输入，过滤器大小为F，您使用S作为步幅，输入添加大小为P的0。然后，输出大小将为：</p>
<p>​                                    <strong><em>(N-F+2P)/S +1</em></strong></p>
<h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>  池化层主要在卷积层之后立即使用，以减小空间大小（<strong>仅宽度和高度，而不是深度</strong>）。这减少了参数的数量，因此<strong>减少了计算</strong>。此外，较少数量的参数可以<strong>避免过度拟合</strong>（现在不用担心，稍后会对其进行描述）。最常见的汇集形式是<strong>Max pooling</strong>，其中我们采用大小为F <em> F的过滤器，并对图像的F </em> F大小部分应用最大操作。</p>
<p><img src="1.jpg" alt="1"></p>
<ul>
<li>如果取平均数取代最大值，它将被称为平均池化，但这样的方法不是很受欢迎。</li>
</ul>
<p>如果输入的大小为w1 <em> h1 </em> d1，滤波器的大小为f <em> f，步长为S.则输出大小为w2 </em> h2 * d2为：</p>
<p>​                                                                w2= (w1-f)/S +1</p>
<p>​                                                                h2=(h1-f)/S +1</p>
<p>​                                                                d2=d1</p>
<p>  最常见的池化是使用尺寸为2 * 2且步幅为2的过滤器完成的。您可以使用上面的公式计算，它实际上将输入的大小减半。</p>
<p><img src="9.webp" alt="8"></p>
<h3 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h3><p>  如果层中的每个神经元接收来自前一层中所有神经元的输入，则该层称为完全连接层。该层的输出通过矩阵乘法后跟偏置偏移来计算。</p>
<h4 id="了解训练的过程"><a href="#了解训练的过程" class="headerlink" title="了解训练的过程"></a>了解训练的过程</h4><p>  深度神经网络只不过是智能的数学模型，它在某种程度上模仿了人类的大脑。当我们尝试训练神经网络时，我们需要做两件基本的事情：</p>
<ul>
<li><p><strong>神经网络的结构</strong></p>
<p>在设计神经网络的架构时，您必须决定：如何安排图层？要使用哪些图层？每层使用多少神经元等？设计架构是一个稍微复杂和高级的主题，需要大量的研究。有许多标准体系结构可以很好地解决许多标准问题。例如AlexNet，GoogleNet，InceptionResnet，VGG等。首先，您应该只使用标准网络架构。在获得神经网络的大量经验后，您可以开始设计网络。因此，我们现在不用担心。</p>
</li>
<li><p><strong>正确的权重(weight)/参数(parameters)</strong></p>
<p>一旦确定了网络的架构;第二大变量是权重（w）和偏差（b）或网络的参数。训练的目的是获得所有这些参数的最佳值，从而可靠地解决问题。例如，当我们尝试在狗和猫之间构建分类器时，我们寻找参数，使得如果输入是猫的图像， 输出层输出的结果认为它是猫的概率是1.</p>
<p>您可以使用称为<strong>反向传播(backward propagation)</strong>的过程找到最佳参数集，即您从一组随机参数开始并不断更改这些权重，以便为每个训练图像获得正确的输出。有许多优化方法可以在数学上快速找到正确的权重来更改权重。 GradientDescent就是这样一种方法（向后传播和优化器方法来改变梯度是一个非常复杂的主题。但是现在我们不需要担心它，因为Tensorflow将会负责它）</p>
<p>那么，我们先为神经网络设定一些初始的随机值，然后将一张狗的图片输入到神经网络中。 得到的结果是0.1， 也就是说我们的神经网络判断出它是狗的概率为0.1， 是猫的概率为0.9。现在我们用反向传播算法缓慢地改变参数，使得该网络判断其为狗的概率在下一次迭代中增加， 有一个变量用于控制在训练中我们改变网络中的参数的素的， 他被称为<strong>学习率(learning rate)</strong> ， 如果你再考虑一下， 我们希望还定义了一个称之为<strong>损失(loss)</strong>的数字，表示训练是否朝着正确的方向发展， 通常来说， 损失以这样的方式定义， 随着损失的降低， 网络的准确性也会提高， 因此我们密切关注损失， 我们会继续进行很多次向前和反向传播算法迭代， 知道成本停止下降， 定义损失的方法有很多种， 其中一个简单的就是平方根损失。</p>
<p>假设y<sub>prediction</sub>是包含所有训练图像的输出向量， y<sub>actual</sub>是包含这些标记图像的实际值，因此如果我们最小化这两个变量之间的距离， 它将是衡量训练成果的一个很好的指标。 因此我们将损失定义为:<br><img src="1.png" alt="1"><br>这是一个非常简单的损失示例，但在实际训练0中，我们使用更复杂的成本度量，如交叉熵成本。但Tensorflow中已经集成了许多这些损失函数，因此我们现在无需担心这些损失的细节。</p>
<p>训练完成后，这些参数和架构将保存在二进制文件（称为<strong>model</strong>）中。在生产设置中，当我们得到狗/猫的新图像时，我们将该模型加载到相同的网络体系结构中并计算新图像是猫/狗的概率。这称为推理(<strong>inference</strong>)或预测(<strong>prediction</strong>)。</p>
<p>为了简化计算，并非所有训练数据都立即被馈送到网络。 相反，假设我们总共有1600张图像，我们将它们分成小批量，比如16或32号，称为批量大小(<strong>batch size</strong>)。 因此，需要100或50轮（迭代）才能将完整数据用于训练。 这被称为一个时期(<strong>epoch</strong>)，即在一个时期中，网络一次看到所有训练图像。 还有一些事情要做来提高准确性，但我们不不需要一次关注一切。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow模型保存与恢复</title>
    <url>/2019/04/01/tensorflow-model-save-and-restore/</url>
    <content><![CDATA[<h1 id="1-什么是TensorFlow模型？"><a href="#1-什么是TensorFlow模型？" class="headerlink" title="1. 什么是TensorFlow模型？"></a>1. 什么是TensorFlow模型？</h1><p>训练了一个神经网络之后，我们希望保存它以便将来使用。那么什么是TensorFlow模型? Tensorflow模型主要包含我们所培训的网络参数的网络设计或图形和值。因此，Tensorflow模型有两个主要的文件:</p>
<p>a) Meta graph：<br>     这是一个协议缓冲区，它保存了完整的Tensorflow图形;即所有<strong>变量、操作、集合</strong>等。该文件以<strong>.meta</strong>作为扩展名。</p>
<p>b) Checkpoint file：</p>
<p>​    这是一个二进制文件，它包含了所有的权重、偏差、梯度和其他所有变量的值。这个文件有一个扩展名.ckpt。然而，Tensorflow从0.11版本中改变了这一点。现在，我们有两个文件，而不是单个.ckpt文件:</p>
<ul>
<li>model.ckpt.data-00000-of-00001</li>
<li>model.ckpt.meta</li>
</ul>
<p><code>.data</code>文件是包含我们训练变量的文件，我们待会将会使用它。</p>
<p>与此同时，Tensorflow也有一个名为checkpoint的文件，它只保存的最新保存的checkpoint文件的记录。</p>
<p>因此，为了总结，对于大于0.10的版本，Tensorflow模型如下:</p>
<p><img src="1.png" alt="1"></p>
<p>在0.11之前的Tensorflow模型仅包含三个文件:</p>
<ul>
<li>inception_v1.meta    </li>
<li>inception_v1.ckpt      </li>
<li>checkpoint  </li>
</ul>
<p><strong>之后的Tensorflow模型包含多了一个文件</strong></p>
<ul>
<li>model.ckpt.data-00000-of-00001        </li>
</ul>
<p>现在我们已经知道了Tensorflow模型的样子，接下来我们来看看TensorFlow是如何保存模型的。</p>
<a id="more"></a>
<h1 id="2-保存TensorFlow模型"><a href="#2-保存TensorFlow模型" class="headerlink" title="2. 保存TensorFlow模型"></a>2. 保存TensorFlow模型</h1><p>比方说，你正在训练一个卷积神经网络来进行图像分类。作为一种标准的练习，你要时刻关注损失和准确率。一旦看到网络已经收敛，我们可以暂停模型的训练。在完成培训之后，我们希望将所有的变量和网络结构保存到一个文件中，以便将来使用。因此，在Tensorflow中，我们希望保存所有参数的图和值，我们将创建一个tf.train.Saver()类的实例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">saver = tf.train.Saver()</span><br></pre></td></tr></table></figure>
<p>请记住，Tensorflow变量仅在会话中存在。因此，您必须在一个会话中保存模型，调用您刚刚创建的save方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">saver.save(sess, <span class="string">'my-test-model'</span>)</span><br></pre></td></tr></table></figure>
<p>这里，sess是会话对象，而’my-test-model’是保存的模型的名称。让我们来看一个完整的例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">w1 = tf.Variable(tf.random_normal(shape=[<span class="number">2</span>]), name=<span class="string">'w1'</span>)</span><br><span class="line">w2 = tf.Variable(tf.random_normal(shape=[<span class="number">5</span>]), name=<span class="string">'w2'</span>)</span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">saver.save(sess, <span class="string">'my_test_model'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will save following files in Tensorflow v &gt;= 0.11</span></span><br><span class="line"><span class="comment"># my_test_model.data-00000-of-00001</span></span><br><span class="line"><span class="comment"># my_test_model.index</span></span><br><span class="line"><span class="comment"># my_test_model.meta</span></span><br><span class="line"><span class="comment"># checkpoint</span></span><br></pre></td></tr></table></figure>
<p>如果我们在1000次迭代之后保存模型，我们将通过<strong>global_step</strong>来调用save:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">saver.save(sess, <span class="string">'my_test_model'</span>,global_step=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>这将会将’-1000’追加到模型名称，并创建以下文件:</p>
<ul>
<li>my_test_model-1000.index</li>
<li>my_test_model-1000.meta</li>
<li>my_test_model-1000.data-00000-of-00001</li>
<li>checkpoint</li>
</ul>
<p>比方说，在训练时，我们在每次1000次迭代后都保存模型，所以.meta文件是第一次创建的(在第1000次迭代中)，我们不需要每次都重新创建.meta文件(我们在2000，3000次没有保存.meta文件)。我们仅为进一步的迭代保存模型，因为图不会改变。因此，当我们不想保存meta-graph时，我们用这个:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">saver.save(sess, <span class="string">'my-model'</span>, global_step=step,write_meta_graph=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<p>如果你希望仅保留4个最新的模型，并且希望在训练过程中每两个小时后保存一个模型，那么你可以使用max_to_keep和keep_checkpoint_every_n_hours这样做。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#saves a model every 2 hours and maximum 4 latest models are saved.</span></span><br><span class="line">saver = tf.train.Saver(max_to_keep=<span class="number">4</span>, keep_checkpoint_every_n_hours=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>注意，如果我们在tf.train.Saver()中没有指定任何东西，它将保存所有的变量。如果，我们不想保存所有的变量，而只是一些变量。我们可以指定要保存的变量/集合。在创建tf.train。保护程序实例，我们将它传递给我们想要保存的变量的列表或字典。让我们来看一个例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">w1 = tf.Variable(tf.random_normal(shape=[<span class="number">2</span>]), name=<span class="string">'w1'</span>)</span><br><span class="line">w2 = tf.Variable(tf.random_normal(shape=[<span class="number">5</span>]), name=<span class="string">'w2'</span>)</span><br><span class="line">saver = tf.train.Saver([w1,w2])</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">saver.save(sess, <span class="string">'my_test_model'</span>,global_step=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>这可以用于在需要时保存特定的Tensorflow图。</p>
<h1 id="3-导入训练好的模型"><a href="#3-导入训练好的模型" class="headerlink" title="3. 导入训练好的模型"></a><strong>3. 导入训练好的模型</strong></h1><p>如果你想用别人预先训练好的模型来进行微调，你需要做以下两件事:</p>
<p><strong>a)创建网络</strong></p>
<p>你可以通过编写python代码创建网络，以手工创建每一层，并将其作为原始模型。但是，如果你考虑一下，我们已经在.meta文件中保存了这个网络，我们可以使用tf.train.import()函数来重新创建这个网络：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">saver = tf.train.import_meta_graph(<span class="string">'my_test_model-1000.meta'</span>)</span><br></pre></td></tr></table></figure>
<p>记住，import_meta_graph将在.meta文件中定义的网络附加到当前图。因此，这将为你创建图形/网络，但是我们仍然需要加载我们在这张图上训练过的参数的值。</p>
<p><strong>b)载入参数</strong></p>
<p>我们可以通过调用这个保护程序的实例来恢复网络的参数，它是tf.train.Saver()类的一个实例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">new_saver = tf.train.import_meta_graph(<span class="string">'my_test_model-1000.meta'</span>)</span><br><span class="line">new_saver.restore(sess, tf.train.latest_checkpoint(<span class="string">'./'</span>))</span><br></pre></td></tr></table></figure>
<p>在此之后，像w1和w2这样的张量的值已经恢复并且可以被访问:</p>
<p>直接用sess run 张量的名字， 可以通过张量的name属性获得名字比如<code>w1.name</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:    </span><br><span class="line">    saver = tf.train.import_meta_graph(<span class="string">'my-model-1000.meta'</span>)</span><br><span class="line">    saver.restore(sess,tf.train.latest_checkpoint(<span class="string">'./'</span>))</span><br><span class="line">    print(sess.run(<span class="string">'w1:0'</span>))</span><br><span class="line"><span class="comment">##Model has been restored. Above statement will print the saved value of w1</span></span><br></pre></td></tr></table></figure>
<p>因此，现在你已经了解了如何为Tensorflow模型保存和导入工作。在下一节中，我描述了上面的实际使用，以加载任何预先训练过的模型。</p>
<h1 id="4-使用导入的模型"><a href="#4-使用导入的模型" class="headerlink" title="4.使用导入的模型"></a><strong>4.使用导入的模型</strong></h1><p>现在你已经了解了如何保存和恢复Tensorflow模型，让我们开发一个实用的例子来恢复任何预先训练的模型，并·使用它进行预测、微调或进一步训练。当您使用Tensorflow时，你将定义一个图，该图是feed examples(训练数据)和一些超参数(如学习速率、迭代次数等)，它是一个标准的过程，我们可以使用占位符来存放所有的训练数据和超参数。接下来，让我们使用占位符构建一个小网络并保存它。注意，当网络被保存时，占位符的值不会被保存。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#Prepare to feed input, i.e. feed_dict and placeholders</span></span><br><span class="line">w1 = tf.placeholder(<span class="string">"float"</span>, name=<span class="string">"w1"</span>)</span><br><span class="line">w2 = tf.placeholder(<span class="string">"float"</span>, name=<span class="string">"w2"</span>)</span><br><span class="line">b1= tf.Variable(<span class="number">2.0</span>,name=<span class="string">"bias"</span>)</span><br><span class="line">feed_dict =&#123;w1:<span class="number">4</span>,w2:<span class="number">8</span>&#125;</span><br><span class="line"><span class="comment">#Define a test operation that we will restore</span></span><br><span class="line">w3 = tf.add(w1,w2)</span><br><span class="line">w4 = tf.multiply(w3,b1,name=<span class="string">"op_to_restore"</span>)</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Create a saver object which will save all the variables</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"><span class="comment">#Run the operation by feeding input</span></span><br><span class="line"><span class="keyword">print</span> sess.run(w4,feed_dict)</span><br><span class="line"><span class="comment">#Prints 24 which is sum of (w1+w2)*b1 </span></span><br><span class="line"><span class="comment">#Now, save the graph</span></span><br><span class="line">saver.save(sess, <span class="string">'my_test_model'</span>,global_step=<span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>现在，当我们想要恢复它时，我们不仅要恢复图和权重，还要准备一个新的feed_dict，它将把新的训练数据输入到网络中。我们可以通过graph.get_tensor_by_name()方法来引用这些保存的操作和占位符变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#How to access saved variable/Tensor/placeholders </span></span><br><span class="line">w1 = graph.get_tensor_by_name(<span class="string">"w1:0"</span>)</span><br><span class="line"><span class="comment">## How to access saved operation</span></span><br><span class="line">op_to_restore = graph.get_tensor_by_name(<span class="string">"op_to_restore:0"</span>)</span><br></pre></td></tr></table></figure>
<p>如果我们只是想用不同的数据运行相同的网络，您可以简单地通过feed_dict将新数据传递给网络。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess=tf.Session()    </span><br><span class="line"></span><br><span class="line"><span class="comment">#First let's load meta graph and restore weights</span></span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">'my_test_model-1000.meta'</span>)</span><br><span class="line">saver.restore(sess,tf.train.latest_checkpoint(<span class="string">'./'</span>))</span><br><span class="line"><span class="comment"># Now, let's access and create placeholders variables and</span></span><br><span class="line"><span class="comment"># create feed-dict to feed new data</span></span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line">w1 = graph.get_tensor_by_name(<span class="string">"w1:0"</span>)</span><br><span class="line">w2 = graph.get_tensor_by_name(<span class="string">"w2:0"</span>)</span><br><span class="line">feed_dict =&#123;w1:<span class="number">13.0</span>,w2:<span class="number">17.0</span>&#125;</span><br><span class="line"><span class="comment">#Now, access the op that you want to run. </span></span><br><span class="line">op_to_restore = graph.get_tensor_by_name(<span class="string">"op_to_restore:0"</span>)</span><br><span class="line"><span class="keyword">print</span> sess.run(op_to_restore,feed_dict)</span><br><span class="line"><span class="comment">#This will print 60 which is calculated </span></span><br><span class="line"><span class="comment">#using new values of w1 and w2 and saved value of b1.</span></span><br></pre></td></tr></table></figure>
<p>如果你希望通过添加<strong>更多的层数</strong>并对其进行训练，从而向图中添加更多的操作，可以这样做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">sess=tf.Session()    </span><br><span class="line"><span class="comment">#First let's load meta graph and restore weights</span></span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">'my_test_model-1000.meta'</span>)</span><br><span class="line">saver.restore(sess,tf.train.latest_checkpoint(<span class="string">'./'</span>))</span><br><span class="line"><span class="comment"># Now, let's access and create placeholders variables and</span></span><br><span class="line"><span class="comment"># create feed-dict to feed new data</span></span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line">w1 = graph.get_tensor_by_name(<span class="string">"w1:0"</span>)</span><br><span class="line">w2 = graph.get_tensor_by_name(<span class="string">"w2:0"</span>)</span><br><span class="line">feed_dict =&#123;w1:<span class="number">13.0</span>,w2:<span class="number">17.0</span>&#125;</span><br><span class="line"><span class="comment">#Now, access the op that you want to run. </span></span><br><span class="line">op_to_restore = graph.get_tensor_by_name(<span class="string">"op_to_restore:0"</span>)</span><br><span class="line"><span class="comment">#Add more to the current graph</span></span><br><span class="line">add_on_op = tf.multiply(op_to_restore,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> sess.run(add_on_op,feed_dict)</span><br><span class="line"><span class="comment">#This will print 120.</span></span><br></pre></td></tr></table></figure>
<p>但是，你是否可以在之前图的结构上构建新的网络?当然，您可以通过graph.get_tensor_by_name()方法访问适当的操作，并在此基础上构建图。这是一个真实的例子。在这里，我们使用元图加载一个vgg预训练的网络，并在最后一层中将输出的数量更改为2，以便对新数据进行微调。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">saver = tf.train.import_meta_graph(<span class="string">'vgg.meta'</span>)</span><br><span class="line"><span class="comment"># Access the graph</span></span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line"><span class="comment">## Prepare the feed_dict for feeding data for fine-tuning </span></span><br><span class="line"><span class="comment">#Access the appropriate output for fine-tuning</span></span><br><span class="line">fc7= graph.get_tensor_by_name(<span class="string">'fc7:0'</span>)</span><br><span class="line"><span class="comment">#use this if you only want to change gradients of the last layer</span></span><br><span class="line">fc7 = tf.stop_gradient(fc7) <span class="comment"># It's an identity function</span></span><br><span class="line">fc7_shape= fc7.get_shape().as_list()</span><br><span class="line">new_outputs=<span class="number">2</span></span><br><span class="line">weights = tf.Variable(tf.truncated_normal([fc7_shape[<span class="number">3</span>], num_outputs], stddev=<span class="number">0.05</span>))</span><br><span class="line">biases = tf.Variable(tf.constant(<span class="number">0.05</span>, shape=[num_outputs]))</span><br><span class="line">output = tf.matmul(fc7, weights) + biases</span><br><span class="line">pred = tf.nn.softmax(output)</span><br><span class="line"><span class="comment"># Now, you run this with fine-tuning data in sess.run()</span></span><br></pre></td></tr></table></figure>
<p>希望这能让你清楚地了解如何保存和恢复Tensorflow模型。</p>
<p>原文链接：<a href="http://cv-tricks.com/tensorflow-tutorial/save-restore-tensorflow-models-quick-complete-tutorial/" target="_blank" rel="noopener">http://cv-tricks.com/tensorflow-tutorial/save-restore-tensorflow-models-quick-complete-tutorial/</a></p>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFow</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab数据处理</title>
    <url>/2019/03/31/matlab-data-process/</url>
    <content><![CDATA[<h1 id="Matmab数据处理"><a href="#Matmab数据处理" class="headerlink" title="Matmab数据处理"></a>Matmab数据处理</h1><h2 id="Matlab生成正态分布的数据"><a href="#Matlab生成正态分布的数据" class="headerlink" title="Matlab生成正态分布的数据"></a>Matlab生成正态分布的数据</h2><p>需要两个指标， 一个是原有数据的平均数（&mu;）和标准差（&sigma;）</p>
<ul>
<li>平均数计算函数<code>mean(数据， 维度)</code></li>
<li>标准差计算函数<code>std(数据， w， 维度)</code></li>
</ul>
<p>​          第二个参数<code>w</code>决定了用哪一个标准差函数，如果取0，则代表除以N-1，如果是1代表的是除以N。</p>
<p>如数据为 <code>data = [1 2 3]</code>， 那么 <code>std(data, 0)</code> 计算的结果就是<code>根号sqrt((1+1)/(3-1))=1</code> , <code>std(data, 1)</code> 计算的结果就是<code>sqrt((1+1)/3)=0.81645了</code></p>
<p>最后得到正态分布的公式是 <code>标准差* randn(NUM, 1)+平均数</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_data(i, :) = std_data(i)*randn(NUM, 1) +mu_data(i);</span><br></pre></td></tr></table></figure>
<p>其中NUM是生成多少个数据, 可以用<code>hist()</code>函数画出生成数据的直方图看看是不是正态分布的</p>
<h1 id="标准化函数"><a href="#标准化函数" class="headerlink" title="标准化函数"></a>标准化函数</h1><p> 标准化</p>
<p><code>zscore</code>(data, 0, 1)  <code>1代表列</code></p>
]]></content>
  </entry>
  <entry>
    <title>css选择器</title>
    <url>/2019/03/29/css-selector/</url>
    <content><![CDATA[<p>一个有趣的css选择器小游戏: <a href="http://flukeout.github.io/" target="_blank" rel="noopener">http://flukeout.github.io/</a></p>
<h1 id="Adjacent-Sibling-Selector（兄弟选择器）"><a href="#Adjacent-Sibling-Selector（兄弟选择器）" class="headerlink" title="Adjacent Sibling Selector（兄弟选择器）"></a>Adjacent Sibling Selector（兄弟选择器）</h1><h2 id="Select-an-element-that-directly-follows-another-element"><a href="#Select-an-element-that-directly-follows-another-element" class="headerlink" title="Select an element that directly follows another element"></a>Select an element that directly follows another element</h2><h2 id="A-B"><a href="#A-B" class="headerlink" title="A + B"></a>A + B</h2><p>This selects all B elements that directly follow A. Elements that follow one another are called siblings. They’re on the same level, or depth. </p>
<p>In the HTML markup for this level, elements that have the same indentation are siblings.</p>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>p + .intro selects every element with class=”intro” that directly follows a p</p>
<p>div + a selects every a element that directly follows a div</p>
<h1 id="General-Sibling-Selector（可以选择多个兄弟）"><a href="#General-Sibling-Selector（可以选择多个兄弟）" class="headerlink" title="General Sibling Selector（可以选择多个兄弟）"></a>General Sibling Selector（可以选择多个兄弟）</h1><h2 id="Select-elements-that-follows-another-element"><a href="#Select-elements-that-follows-another-element" class="headerlink" title="Select elements that follows another element"></a>Select elements that follows another element</h2><h2 id="A-B-1"><a href="#A-B-1" class="headerlink" title="A ~ B"></a>A ~ B</h2><p>You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one.</p>
<h2 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h2><p>A ~ B selects all B that follow a A</p>
<a id="more"></a>
<h1 id="Child-Selector（直系孩子）"><a href="#Child-Selector（直系孩子）" class="headerlink" title="Child Selector（直系孩子）"></a>Child Selector（直系孩子）</h1><h2 id="Select-direct-children-of-an-element"><a href="#Select-direct-children-of-an-element" class="headerlink" title="Select direct children of an element"></a>Select direct children of an element</h2><h2 id="A-gt-B"><a href="#A-gt-B" class="headerlink" title="A &gt; B"></a>A &gt; B</h2><p>You can select elements that are direct children of other elements. A child element is any element that is nested directly in another element. </p>
<p>Elements that are nested deeper than that are called descendant elements.</p>
<h2 id="Examples-2"><a href="#Examples-2" class="headerlink" title="Examples"></a>Examples</h2><p>A &gt; B selects all B that are a direct children A</p>
<h1 id="First-Child-Pseudo-selector（第一个儿子）"><a href="#First-Child-Pseudo-selector（第一个儿子）" class="headerlink" title="First Child Pseudo-selector（第一个儿子）"></a>First Child Pseudo-selector（第一个儿子）</h1><h2 id="Select-a-first-child-element-inside-of-another-element"><a href="#Select-a-first-child-element-inside-of-another-element" class="headerlink" title="Select a first child element inside of another element"></a>Select a first child element inside of another element</h2><h2 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a>:first-child</h2><p>You can select the first child element. A child element is any element that is directly nested in another element. You can combine this pseudo-selector with other selectors.</p>
<h2 id="Examples-3"><a href="#Examples-3" class="headerlink" title="Examples"></a>Examples</h2><p>:first-child selects all first child elements.</p>
<p>p:first-child selects all first child pelements.</p>
<p>div p:first-child selects all first child pelements that are in a div.</p>
<h1 id="Only-Child-Pseudo-selector（只有一个儿子的）"><a href="#Only-Child-Pseudo-selector（只有一个儿子的）" class="headerlink" title="Only Child Pseudo-selector（只有一个儿子的）"></a>Only Child Pseudo-selector（只有一个儿子的）</h1><h2 id="Select-an-element-that-are-the-only-element-inside-of-another-one"><a href="#Select-an-element-that-are-the-only-element-inside-of-another-one" class="headerlink" title="Select an element that are the only element inside of another one."></a>Select an element that are the only element inside of another one.</h2><h2 id="only-child"><a href="#only-child" class="headerlink" title=":only-child"></a>:only-child</h2><p>You can select any element that is the only element inside of another one.</p>
<h2 id="Examples-4"><a href="#Examples-4" class="headerlink" title="Examples"></a>Examples</h2><p>span:only-child selects the span elements that are the only child of some other element.</p>
<p>ul li:only-child selects the only li element that are in a ul.</p>
<h1 id="Last-Child-Pseudo-selector"><a href="#Last-Child-Pseudo-selector" class="headerlink" title="Last Child Pseudo-selector"></a>Last Child Pseudo-selector</h1><h2 id="Select-the-last-element-inside-of-another-element"><a href="#Select-the-last-element-inside-of-another-element" class="headerlink" title="Select the last element inside of another element"></a>Select the last element inside of another element</h2><h2 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h2><p>You can use this selector to select an element that is the last child element inside of another element. </p>
<p>Pro Tip → In cases where there is only one element, that element counts as the first-child, only-child and last-child!</p>
<h2 id="Examples-5"><a href="#Examples-5" class="headerlink" title="Examples"></a>Examples</h2><p>:last-child selects all last-child elements.</p>
<p>span:last-child selects all last-child spanelements.</p>
<p>ul li:last-child selects the last lielements inside of any ul.</p>
<h1 id="Nth-Child-Pseudo-selector"><a href="#Nth-Child-Pseudo-selector" class="headerlink" title="Nth Child Pseudo-selector"></a>Nth Child Pseudo-selector</h1><h2 id="Select-an-element-by-its-order-in-another-element"><a href="#Select-an-element-by-its-order-in-another-element" class="headerlink" title="Select an element by its order in another element"></a>Select an element by its order in another element</h2><p>#+# :nth-child(A)</p>
<p>Selects the nth (Ex: 1st, 3rd, 12th etc.) child element in another element.</p>
<h2 id="Examples-6"><a href="#Examples-6" class="headerlink" title="Examples"></a>Examples</h2><p>:nth-child(8) selects every element that is the 8th child of another element.</p>
<p>div p:nth-child(2) selects the second p in every div</p>
<h1 id="Nth-Last-Child-Selector"><a href="#Nth-Last-Child-Selector" class="headerlink" title="Nth Last Child Selector"></a>Nth Last Child Selector</h1><h2 id="Select-an-element-by-its-order-in-another-element-counting-from-the-back"><a href="#Select-an-element-by-its-order-in-another-element-counting-from-the-back" class="headerlink" title="Select an element by its order in another element, counting from the back"></a>Select an element by its order in another element, counting from the back</h2><h2 id="nth-last-child-A"><a href="#nth-last-child-A" class="headerlink" title=":nth-last-child(A)"></a>:nth-last-child(A)</h2><p>Selects the children from the bottom of the parent. This is like nth-child, but counting from the back!</p>
<h2 id="Examples-7"><a href="#Examples-7" class="headerlink" title="Examples"></a>Examples</h2><p>:nth-last-child(2) selects all second-to-last child elements.</p>
<h1 id="First-of-Type-Selector"><a href="#First-of-Type-Selector" class="headerlink" title="First of Type Selector"></a>First of Type Selector</h1><h2 id="Select-the-first-element-of-a-specific-type"><a href="#Select-the-first-element-of-a-specific-type" class="headerlink" title="Select the first element of a specific type"></a>Select the first element of a specific type</h2><p>#+# :first-of-type</p>
<p>Selects the first element of that type within another element.</p>
<h2 id="Examples-8"><a href="#Examples-8" class="headerlink" title="Examples"></a>Examples</h2><p>span:first-of-type selects the first span in any element.</p>
<h1 id="Nth-of-Type-Selector"><a href="#Nth-of-Type-Selector" class="headerlink" title="Nth of Type Selector"></a>Nth of Type Selector</h1><p>#+# :nth-of-type(A)</p>
<p>Selects a specific element based on its type and order in another element - or even or odd instances of that element.</p>
<h2 id="Examples-9"><a href="#Examples-9" class="headerlink" title="Examples"></a>Examples</h2><p>div:nth-of-type(2) selects the second instance of a div.</p>
<p>.example:nth-of-type(odd) selects all odd instances of a the example class.</p>
<h1 id="Nth-of-type-Selector-with-Formula（带有方程的）"><a href="#Nth-of-type-Selector-with-Formula（带有方程的）" class="headerlink" title="Nth-of-type Selector with Formula（带有方程的）"></a>Nth-of-type Selector with Formula（带有方程的）</h1><h2 id="nth-of-type-An-B"><a href="#nth-of-type-An-B" class="headerlink" title=":nth-of-type(An+B)"></a>:nth-of-type(An+B)</h2><p>The nth-of-type formula selects every nth element, starting the count at a specific instance of that element.</p>
<h2 id="Examples-10"><a href="#Examples-10" class="headerlink" title="Examples"></a>Examples</h2><p>span:nth-of-type(6n+2) selects every 6th instance of a span, starting from (and including) the second instance.</p>
<h1 id="Only-of-Type-Selector"><a href="#Only-of-Type-Selector" class="headerlink" title="Only of Type Selector"></a>Only of Type Selector</h1><h2 id="Select-elements-that-are-the-only-ones-of-their-type-within-of-their-parent-element"><a href="#Select-elements-that-are-the-only-ones-of-their-type-within-of-their-parent-element" class="headerlink" title="Select elements that are the only ones of their type within of their parent element"></a>Select elements that are the only ones of their type within of their parent element</h2><p>#+# :only-of-type</p>
<p>Selects the only element of its type within another element.</p>
<h2 id="Examples-11"><a href="#Examples-11" class="headerlink" title="Examples"></a>Examples</h2><p>p span:only-of-type selects a span within any p if it is the only span in there.</p>
<h1 id="Last-of-Type-Selector"><a href="#Last-of-Type-Selector" class="headerlink" title="Last of Type Selector"></a>Last of Type Selector</h1><h2 id="Select-the-last-element-of-a-specific-type"><a href="#Select-the-last-element-of-a-specific-type" class="headerlink" title="Select the last element of a specific type"></a>Select the last element of a specific type</h2><h2 id="last-of-type"><a href="#last-of-type" class="headerlink" title=":last-of-type"></a>:last-of-type</h2><p>Selects each last element of that type within another element. Remember type refers the kind of tag, so p and span are different types. </p>
<p>I wonder if this is how the last dinosaur was selected before it went extinct.</p>
<h2 id="Examples-12"><a href="#Examples-12" class="headerlink" title="Examples"></a>Examples</h2><p>div:last-of-type selects the last div in every element.</p>
<p>p span:last-of-type selects the last span in every p.</p>
<h1 id="Empty-Selector"><a href="#Empty-Selector" class="headerlink" title="Empty Selector"></a>Empty Selector</h1><h2 id="Select-elements-that-don’t-have-children"><a href="#Select-elements-that-don’t-have-children" class="headerlink" title="Select elements that don’t have children"></a>Select elements that don’t have children</h2><h2 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h2><p>Selects elements that don’t have any other elements inside of them.</p>
<h2 id="Examples-13"><a href="#Examples-13" class="headerlink" title="Examples"></a>Examples</h2><p>div:empty selects all empty div elements.</p>
<h1 id="Negation-Pseudo-class"><a href="#Negation-Pseudo-class" class="headerlink" title="Negation Pseudo-class"></a>Negation Pseudo-class</h1><h2 id="Select-all-elements-that-don’t-match-the-negation-selector"><a href="#Select-all-elements-that-don’t-match-the-negation-selector" class="headerlink" title="Select all elements that don’t match the negation selector"></a>Select all elements that don’t match the negation selector</h2><h2 id="not-X"><a href="#not-X" class="headerlink" title=":not(X)"></a>:not(X)</h2><p>You can use this to select all elements that do not match selector “X”.</p>
<h2 id="Examples-14"><a href="#Examples-14" class="headerlink" title="Examples"></a>Examples</h2><p>:not(#fancy) selects all elements that do not have id=”fancy”.</p>
<p>div:not(:first-child) selects every div that is not a first child.</p>
<p>:not(.big, .medium) selects all elements that do not have class=”big” or class=”medium”.</p>
<h1 id="Attribute-Selector"><a href="#Attribute-Selector" class="headerlink" title="Attribute Selector"></a>Attribute Selector</h1><h2 id="Select-all-elements-that-have-a-specific-attribute"><a href="#Select-all-elements-that-have-a-specific-attribute" class="headerlink" title="Select all elements that have a specific attribute"></a>Select all elements that have a specific attribute</h2><h2 id="attribute"><a href="#attribute" class="headerlink" title="[attribute]"></a>[attribute]</h2><p>Attributes appear inside the opening tag of an element, like this: span attribute=”value”. An attribute does not always have a value, it can be blank!</p>
<h2 id="Examples-15"><a href="#Examples-15" class="headerlink" title="Examples"></a>Examples</h2><p>a[href] selects all a elements that have a href=”anything” attribute.</p>
<p>[type] selects all elements that have a type=”anything”. attribute</p>
<h1 id="Attribute-Value-Selector"><a href="#Attribute-Value-Selector" class="headerlink" title="Attribute Value Selector"></a>Attribute Value Selector</h1><h2 id="Select-all-elements-that-have-a-specific-attribute-value"><a href="#Select-all-elements-that-have-a-specific-attribute-value" class="headerlink" title="Select all elements that have a specific attribute value"></a>Select all elements that have a specific attribute value</h2><h2 id="attribute-”value”"><a href="#attribute-”value”" class="headerlink" title="[attribute=”value”]"></a>[attribute=”value”]</h2><p>Attribute selectors are case sensitive, each character must match exactly.</p>
<h2 id="Examples-16"><a href="#Examples-16" class="headerlink" title="Examples"></a>Examples</h2><p>input[type=”checkbox”] selects all checkbox input elements.</p>
<h1 id="Attribute-Starts-With-Selector"><a href="#Attribute-Starts-With-Selector" class="headerlink" title="Attribute Starts With Selector"></a>Attribute Starts With Selector</h1><h2 id="Select-all-elements-with-an-attribute-value-that-starts-with-specific-characters"><a href="#Select-all-elements-with-an-attribute-value-that-starts-with-specific-characters" class="headerlink" title="Select all elements with an attribute value that starts with specific characters"></a>Select all elements with an attribute value that starts with specific characters</h2><h2 id="attribute-”value”-1"><a href="#attribute-”value”-1" class="headerlink" title="[attribute^=”value”]"></a>[attribute^=”value”]</h2><h2 id="Examples-17"><a href="#Examples-17" class="headerlink" title="Examples"></a>Examples</h2><p>.toy[category^=”Swim”] selects elements with class toy and either category=”Swimwear or category=”Swimming”.</p>
<h1 id="Attribute-Ends-With-Selector"><a href="#Attribute-Ends-With-Selector" class="headerlink" title="Attribute Ends With Selector"></a>Attribute Ends With Selector</h1><h2 id="Select-all-elements-with-an-attribute-value-that-ends-with-specific-characters"><a href="#Select-all-elements-with-an-attribute-value-that-ends-with-specific-characters" class="headerlink" title="Select all elements with an attribute value that ends with specific characters"></a>Select all elements with an attribute value that ends with specific characters</h2><h2 id="attribute-”value”-2"><a href="#attribute-”value”-2" class="headerlink" title="[attribute$=”value”]"></a>[attribute$=”value”]</h2><h2 id="Examples-18"><a href="#Examples-18" class="headerlink" title="Examples"></a>Examples</h2><p>img[src$=”.jpg”] selects all images display a .jpg image.</p>
<h1 id="Attribute-Wildcard-Selector"><a href="#Attribute-Wildcard-Selector" class="headerlink" title="Attribute Wildcard Selector"></a>Attribute Wildcard Selector</h1><h2 id="Select-all-elements-with-an-attribute-value-that-contains-specific-characters-anywhere"><a href="#Select-all-elements-with-an-attribute-value-that-contains-specific-characters-anywhere" class="headerlink" title="Select all elements with an attribute value that contains specific characters anywhere"></a>Select all elements with an attribute value that contains specific characters anywhere</h2><h2 id="attribute-”value”-3"><a href="#attribute-”value”-3" class="headerlink" title="[attribute*=”value”]"></a>[attribute*=”value”]</h2><p>A useful selector if you can identify a common pattern in things like class, href or srcattributes.</p>
<h2 id="Examples-19"><a href="#Examples-19" class="headerlink" title="Examples"></a>Examples</h2><p>img[src*=”/thumbnails/“] selects all image elements that show images from the “thumbnails” folder.</p>
<p>[class*=”heading”] selects all elements with “heading” in their class, like class=”main-heading”and class=”sub-heading”</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Just For Fun (Linux Torvalds自传)英文版</title>
    <url>/2019/03/28/just-for-fun/</url>
    <content><![CDATA[<p><img src="1.png" alt="1"></p>
<blockquote>
<p>《Just for Fun》是托瓦兹唯一的一本自传，全书充斥着托瓦兹独特的幽默感，以及「托瓦兹式」的思考逻辑与对话，让人不禁惊叹，一个不时置身于镁光灯下与金钱洪流中的平凡名人，为何还能如此单纯率真。经由记者大卫??戴蒙(David Diamond)的促成，托瓦兹的童年、生活、想法与经历，一一生动地展现在读者面前，不仅记录了Linux出生的过程与其后所造成的轩然大波，也详实刻画出托瓦兹本人对于他这项「意外的革命」的低调态度，让人在参与托瓦兹成长、成名的历程之际，不得不为他风趣乐观、自我解嘲却不自我贬抑的性格，鼓掌喝采；另一方面，戴蒙也由另一个不同的观点，穿插记载托瓦兹在他这个外人眼中的形象，以及两人互动对话的过程。</p>
</blockquote>
<p>坑先占着， 还没看完</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能浅谈（朱松纯）</title>
    <url>/2019/03/28/ren-gong-zhi-neng-qian-tan/</url>
    <content><![CDATA[<p>pdf连接：<a href="http://www.stat.ucla.edu/~sczhu/Blog_articles/浅谈人工智能.pdf" target="_blank" rel="noopener">www.stat.ucla.edu/~sczhu/Blog_articles/浅谈人工智能.pdf</a></p>
<h1 id="人工智能浅谈（朱松纯）后感"><a href="#人工智能浅谈（朱松纯）后感" class="headerlink" title="人工智能浅谈（朱松纯）后感"></a>人工智能浅谈（朱松纯）后感</h1><p>我是由袁老师的视频知道并开始看这本书的：<a href="https://www.bilibili.com/video/av32104086" target="_blank" rel="noopener">https://www.bilibili.com/video/av32104086</a></p>
<p>摘录一些语句</p>
<ol>
<li><blockquote>
<p>我的看法很简单：大多数写报道和搞炒作宣传的人，基本不懂人工智能。这就<br>像年轻人玩的传话游戏，扭曲的信息在多次传导过程中</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
  </entry>
  <entry>
    <title>shortcuts</title>
    <url>/2019/03/28/shortcuts/</url>
    <content><![CDATA[<p>itelliJ</p>
<table>
<thead>
<tr>
<th style="text-align:center">缩写</th>
<th style="text-align:right">补全内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>psvm</code></td>
<td style="text-align:right">public static void main(String[] args){}</td>
</tr>
<tr>
<td style="text-align:center"><code>sout</code></td>
<td style="text-align:right">System.out.println(); <strong>(在 Kotlin 中是 println())</strong></td>
</tr>
<tr>
<td style="text-align:center"><code>souf</code></td>
<td style="text-align:right">System.out.printf();</td>
</tr>
<tr>
<td style="text-align:center"><code>serr</code></td>
<td style="text-align:right">System.err.println();</td>
</tr>
<tr>
<td style="text-align:center"><code>psf</code></td>
<td style="text-align:right">public static final</td>
</tr>
<tr>
<td style="text-align:center"><code>psfi</code></td>
<td style="text-align:right">public static final int</td>
</tr>
<tr>
<td style="text-align:center"><code>psfs</code></td>
<td style="text-align:right">public static final String</td>
</tr>
<tr>
<td style="text-align:center"><code>toast</code></td>
<td style="text-align:right">Toast.makeText(this, “”, Toast.LENGTH_SHORT).show(); <strong>(仅限 Android)</strong></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>shortcuts</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中文件夹和文件的操作</title>
    <url>/2019/03/20/linux-operation/</url>
    <content><![CDATA[<h2 id="Linux中文件夹和文件的操作"><a href="#Linux中文件夹和文件的操作" class="headerlink" title="Linux中文件夹和文件的操作"></a>Linux中文件夹和文件的操作</h2><h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>使用mv命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv /home/jack/testfile /home/jack/testfile2</span><br></pre></td></tr></table></figure>
<p>如果你在<code>/home/jack</code>文件夹中就可以直接</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv testfile testfile2</span><br></pre></td></tr></table></figure>
<p>如果只想移动文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv /home/jack/testfile /home/jack/Documents/</span><br></pre></td></tr></table></figure>
<p>如果想批量移动相似的文件类型比如说你的<code>Downloads</code>文件夹中包含了很多<code>mp3</code>文件，你想要将他们都移动到<code>Music</code>文件夹中</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv ~/Downloads/*.mp3 ~/Music/</span><br></pre></td></tr></table></figure>
<h2 id="移动文件夹"><a href="#移动文件夹" class="headerlink" title="移动文件夹"></a>移动文件夹</h2><p>移动文件夹和移动文件是一样的</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mv /home/vivek/data/ /nas/home/vivek/archived/</span><br></pre></td></tr></table></figure>
<p>只需要加上slash就行了，表示这个文件夹</p>
<p>移动到一个不存在的文件夹目录下的新文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir --parents ./some/path/; mv yourfile.txt $_</span><br></pre></td></tr></table></figure>
<h2 id="杀掉某一个端口的程序"><a href="#杀掉某一个端口的程序" class="headerlink" title="杀掉某一个端口的程序"></a>杀掉某一个端口的程序</h2><p> <code>fuser 8080/tcp</code> will print you PID of process bound on that port.</p>
<p><code>fuser -k 8080/tcp</code> will kill that process.</p>
<p>More universal is use of <code>lsof -i4</code> (or 6 for IPv6).</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tricks</title>
    <url>/2019/03/18/tricks/</url>
    <content><![CDATA[<h2 id="解决opencv中读取中文路径的图片的问题"><a href="#解决opencv中读取中文路径的图片的问题" class="headerlink" title="解决opencv中读取中文路径的图片的问题"></a>解决opencv中读取中文路径的图片的问题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_imread</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    cv_img = cv2.imdecode(np.fromfile(file_path,dtype=np.uint8),<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> cv_img</span><br></pre></td></tr></table></figure>
<h2 id="matlab-把数组中的NaN去除掉"><a href="#matlab-把数组中的NaN去除掉" class="headerlink" title="matlab 把数组中的NaN去除掉"></a>matlab 把数组中的NaN去除掉</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = [NaN <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> <span class="number">4</span>];</span><br><span class="line">p = <span class="built_in">find</span>(<span class="built_in">isnan</span>(a))</span><br><span class="line">a(p) = [];</span><br></pre></td></tr></table></figure>
<h2 id="mysql-创建数据库时指定utf-8编码"><a href="#mysql-创建数据库时指定utf-8编码" class="headerlink" title="mysql 创建数据库时指定utf-8编码"></a>mysql 创建数据库时指定utf-8编码</h2><h3 id="创建数据库编码指定"><a href="#创建数据库编码指定" class="headerlink" title="创建数据库编码指定"></a>创建数据库编码指定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE dbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="设置数据表编码"><a href="#设置数据表编码" class="headerlink" title="设置数据表编码"></a>设置数据表编码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &apos;author&apos; (</span><br><span class="line">    &apos;authorid&apos; char(20) NOT NULL,</span><br><span class="line">    &apos;name&apos; char(20) NOT NULL,</span><br><span class="line">    &apos;age&apos; char(20) NOT NULL,</span><br><span class="line">    &apos;country&apos; char(20) NOT NULL</span><br><span class="line">) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;</span><br></pre></td></tr></table></figure>
<h2 id="Xshell-传输和接受文件"><a href="#Xshell-传输和接受文件" class="headerlink" title="Xshell 传输和接受文件"></a>Xshell 传输和接受文件</h2><p>首先需要安装 <code>lrzsz</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install  lrzsz</span><br></pre></td></tr></table></figure>
<h3 id="传输"><a href="#传输" class="headerlink" title="传输"></a>传输</h3><p>sz , s 应该是sent</p>
<h3 id="接受"><a href="#接受" class="headerlink" title="接受"></a>接受</h3><p>rz , r 应该是 recieve</p>
<h2 id="Tensorflow-one-hot编码转换函数"><a href="#Tensorflow-one-hot编码转换函数" class="headerlink" title="Tensorflow one-hot编码转换函数"></a>Tensorflow one-hot编码转换函数</h2><p>这个函数会将<code>numpy</code>标签矩阵转化为<code>one-hot</code>编码矩阵，</p>
<ul>
<li>要注意转置的问题</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_one_hot</span><span class="params">(y, C)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.eye(C)[y.reshape(<span class="number">-1</span>)].T</span><br></pre></td></tr></table></figure>
<h2 id="Windows下Python中文件路径字符串改成能用的"><a href="#Windows下Python中文件路径字符串改成能用的" class="headerlink" title="Windows下Python中文件路径字符串改成能用的"></a>Windows下Python中文件路径字符串改成能用的</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.replace(<span class="string">'\\'</span>, <span class="string">'\\\\'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="python-excel的读写"><a href="#python-excel的读写" class="headerlink" title="python excel的读写"></a>python excel的读写</h2><h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel_xls</span><span class="params">(path, sheet_name, value)</span>:</span></span><br><span class="line">    index = len(value)  <span class="comment"># 获取需要写入数据的行数</span></span><br><span class="line">    workbook = xlwt.Workbook()  <span class="comment"># 新建一个工作簿</span></span><br><span class="line">    sheet = workbook.add_sheet(sheet_name)  <span class="comment"># 在工作簿中新建一个表格</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, index):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(value[i])):</span><br><span class="line">            sheet.write(i, j, value[i][j])  <span class="comment"># 像表格中写入数据（对应的行和列）</span></span><br><span class="line">    workbook.save(path)  <span class="comment"># 保存工作簿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel_xls_append</span><span class="params">(path, value)</span>:</span></span><br><span class="line">    index = len(value)  <span class="comment"># 获取需要写入数据的行数</span></span><br><span class="line">    workbook = xlrd.open_workbook(path)  <span class="comment"># 打开工作簿</span></span><br><span class="line">    sheets = workbook.sheet_names()  <span class="comment"># 获取工作簿中的所有表格</span></span><br><span class="line">    worksheet = workbook.sheet_by_name(sheets[<span class="number">0</span>])  <span class="comment"># 获取工作簿中所有表格中的的第一个表格</span></span><br><span class="line">    rows_old = worksheet.nrows  <span class="comment"># 获取表格中已存在的数据的行数</span></span><br><span class="line">    new_workbook = copy(workbook)  <span class="comment"># 将xlrd对象拷贝转化为xlwt对象</span></span><br><span class="line">    new_worksheet = new_workbook.get_sheet(<span class="number">0</span>)  <span class="comment"># 获取转化后工作簿中的第一个表格</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, index):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(value[i])):</span><br><span class="line">            new_worksheet.write(i + rows_old, j, value[i][j])  <span class="comment"># 追加写入数据，注意是从i+rows_old行开始写入</span></span><br><span class="line">    new_workbook.save(path)  <span class="comment"># 保存工作簿</span></span><br><span class="line">    print(<span class="string">"xls格式表格【追加】写入数据成功！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel_xls</span><span class="params">(path)</span>:</span></span><br><span class="line">    workbook = xlrd.open_workbook(path)  <span class="comment"># 打开工作簿</span></span><br><span class="line">    sheets = workbook.sheet_names()  <span class="comment"># 获取工作簿中的所有表格</span></span><br><span class="line">    worksheet = workbook.sheet_by_name(sheets[<span class="number">0</span>])  <span class="comment"># 获取工作簿中所有表格中的的第一个表格</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, worksheet.nrows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, worksheet.ncols):</span><br><span class="line">            print(worksheet.cell_value(i, j), <span class="string">"\t"</span>, end=<span class="string">""</span>)  <span class="comment"># 逐行逐列读取数据</span></span><br><span class="line">        print()</span><br></pre></td></tr></table></figure>
<h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p>这里要注意[[]]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">value = [[name, composition]]</span><br><span class="line">write_excel_xls_append(book_name_xls, value)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tricks</category>
      </categories>
      <tags>
        <tag>Tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>vim</title>
    <url>/2019/03/17/vim/</url>
    <content><![CDATA[<h1 id="VIM学习"><a href="#VIM学习" class="headerlink" title="VIM学习"></a>VIM学习</h1><h3 id="清空一行内容而不是删除一行"><a href="#清空一行内容而不是删除一行" class="headerlink" title="清空一行内容而不是删除一行"></a>清空一行内容而不是删除一行</h3><p><code>0D</code></p>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>jdspider</title>
    <url>/2019/03/07/jdspider/</url>
    <content><![CDATA[<h1 id="先占个位置"><a href="#先占个位置" class="headerlink" title="先占个位置"></a>先占个位置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(goods)</span>:</span></span><br><span class="line">    url = <span class="string">'https://search.jd.com/Search?keyword='</span>+ goods+ <span class="string">'&amp;enc=utf-8'</span></span><br><span class="line">    head=&#123;<span class="string">'authority'</span>: <span class="string">'search.jd.com'</span>,</span><br><span class="line">          <span class="string">'method'</span>: <span class="string">'GET'</span>,</span><br><span class="line">          <span class="string">'path'</span>: <span class="string">'/s_new.php?keyword=%E6%89%8B%E6%9C%BA&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=%E6%89%8B%E6%9C%BA&amp;cid2=653&amp;cid3=655&amp;page=4&amp;s=84&amp;scrolling=y&amp;log_id=1529828108.22071&amp;tpl=3_M&amp;show_items=7651927,7367120,7056868,7419252,6001239,5934182,4554969,3893501,7421462,6577495,26480543553,7345757,4483120,6176077,6932795,7336429,5963066,5283387,25722468892,7425622,4768461'</span>,</span><br><span class="line">          <span class="string">'scheme'</span>: <span class="string">'https'</span>,</span><br><span class="line">          <span class="string">'referer'</span>: <span class="string">'https://search.jd.com/Search?keyword=%E6%89%8B%E6%9C%BA&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=%E6%89%8B%E6%9C%BA&amp;cid2=653&amp;cid3=655&amp;page=3&amp;s=58&amp;click=0'</span>,</span><br><span class="line">          <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36'</span>,</span><br><span class="line">          <span class="string">'x-requested-with'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">          <span class="string">'Cookie'</span>:<span class="string">'qrsc=3; pinId=RAGa4xMoVrs; xtest=1210.cf6b6759; ipLocation=%u5E7F%u4E1C; _jrda=5; TrackID=1aUdbc9HHS2MdEzabuYEyED1iDJaLWwBAfGBfyIHJZCLWKfWaB_KHKIMX9Vj9_2wUakxuSLAO9AFtB2U0SsAD-mXIh5rIfuDiSHSNhZcsJvg; shshshfpa=17943c91-d534-104f-a035-6e1719740bb6-1525571955; shshshfpb=2f200f7c5265e4af999b95b20d90e6618559f7251020a80ea1aee61500; cn=0; 3AB9D23F7A4B3C9B=QFOFIDQSIC7TZDQ7U4RPNYNFQN7S26SFCQQGTC3YU5UZQJZUBNPEXMX7O3R7SIRBTTJ72AXC4S3IJ46ESBLTNHD37U; ipLoc-djd=19-1607-3638-3638.608841570; __jdu=930036140; user-key=31a7628c-a9b2-44b0-8147-f10a9e597d6f; areaId=19; __jdv=122270672|direct|-|none|-|1529893590075; PCSYCityID=25; mt_xid=V2_52007VwsQU1xaVVoaSClUA2YLEAdbWk5YSk9MQAA0BBZOVQ0ADwNLGlUAZwQXVQpaAlkvShhcDHsCFU5eXENaGkIZWg5nAyJQbVhiWR9BGlUNZwoWYl1dVF0%3D; __jdc=122270672; shshshfp=72ec41b59960ea9a26956307465948f6; rkv=V0700; __jda=122270672.930036140.-.1529979524.1529984840.85; __jdb=122270672.1.930036140|85.1529984840; shshshsID=f797fbad20f4e576e9c30d1c381ecbb1_1_1529984840145'</span></span><br><span class="line">          &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r =requests.get(url,headers = head ,timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchGoods</span><span class="params">(brand)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(brand,<span class="string">'html.parser'</span>)</span><br><span class="line">    data1 = soup.find(<span class="string">'ul'</span>,&#123;<span class="string">"class"</span>:<span class="string">"J_valueList v-fixed"</span>&#125;)</span><br><span class="line">    datali =data1.find_all(<span class="string">'li'</span>)</span><br><span class="line">    Goods_href=[]</span><br><span class="line">    Goods_name=[]</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> datali:</span><br><span class="line">        Goods_name.append(li.a.attrs[<span class="string">'title'</span>])</span><br><span class="line">        print(li.a.attrs[<span class="string">'title'</span>])</span><br><span class="line">        Goods_href.append(li.a.attrs[<span class="string">'href'</span>])</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(Goods_href)):</span><br><span class="line">        print(<span class="string">"&lt;&lt;&lt;&#123;&#125;."</span>.format(count+<span class="number">1</span>),<span class="string">"品牌    :"</span>+Goods_name[j])</span><br><span class="line">        count = count+<span class="number">1</span></span><br><span class="line">    judge = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(judge):</span><br><span class="line">        Goods_num = input(<span class="string">"请输入品牌对应序号:"</span>)</span><br><span class="line">        <span class="keyword">if</span> Goods_num.isdigit():</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"您的输入有误，请输入数字："</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        a = int(Goods_num)</span><br><span class="line">        <span class="keyword">if</span> a&gt;count:</span><br><span class="line">            print(<span class="string">"输入序号过大，请重新输入："</span>)</span><br><span class="line">            judge = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> a&lt;<span class="number">1</span>:</span><br><span class="line">            print(<span class="string">"输入序号过小，请重新输入："</span>)</span><br><span class="line">            judge = <span class="number">1</span></span><br><span class="line">    print(<span class="string">"选择的品牌是： "</span>+Goods_name[int(Goods_num)<span class="number">-1</span>])</span><br><span class="line">    brand_url = <span class="string">"https://search.jd.com/"</span>+Goods_href[int(Goods_num)<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> brand_url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orderBy</span><span class="params">(brand_url)</span>:</span></span><br><span class="line">    judge = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(judge):</span><br><span class="line">        kind = input(<span class="string">"按照：综合 / 销量 / 评论数 / 新品 / 价格 进行排序（默认综合）"</span>)</span><br><span class="line">        strinfo =re.compile(<span class="string">'uc=0#J_searchWrap'</span>)<span class="comment">#在对网页的url进行分析的时候发现</span></span><br><span class="line">        uc=<span class="number">0</span><span class="comment">#J_searchWrap可以删减，如果点击不同的话对应的知识psort的值不同</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="string">'综合'</span>:</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="string">'销量'</span>:</span><br><span class="line">            b = strinfo.sub(<span class="string">'psort=3'</span>,brand_url)</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> kind ==<span class="string">'评论数'</span>:</span><br><span class="line">            b = strinfo.sub(<span class="string">'psort=4'</span>,brand_url)</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> kind ==<span class="string">'新品'</span>:</span><br><span class="line">            b = strinfo.sub(<span class="string">'psort=5'</span>,brand_url)</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> kind ==<span class="string">'价格'</span>:</span><br><span class="line">            b = strinfo.sub(<span class="string">'psort=2'</span>,brand_url)</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入："</span>)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">focus_good</span><span class="params">(new_brand_url)</span>:</span></span><br><span class="line">    head=&#123;<span class="string">'authority'</span>: <span class="string">'search.jd.com'</span>,</span><br><span class="line">          <span class="string">'method'</span>: <span class="string">'GET'</span>,</span><br><span class="line">          <span class="string">'path'</span>: <span class="string">'/s_new.php?keyword=%E6%89%8B%E6%9C%BA&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=%E6%89%8B%E6%9C%BA&amp;cid2=653&amp;cid3=655&amp;page=4&amp;s=84&amp;scrolling=y&amp;log_id=1529828108.22071&amp;tpl=3_M&amp;show_items=7651927,7367120,7056868,7419252,6001239,5934182,4554969,3893501,7421462,6577495,26480543553,7345757,4483120,6176077,6932795,7336429,5963066,5283387,25722468892,7425622,4768461'</span>,</span><br><span class="line">          <span class="string">'scheme'</span>: <span class="string">'https'</span>,</span><br><span class="line">          <span class="string">'referer'</span>: <span class="string">'https://search.jd.com/Search?keyword=%E6%89%8B%E6%9C%BA&amp;enc=utf-8&amp;qrst=1&amp;rt=1&amp;stop=1&amp;vt=2&amp;wq=%E6%89%8B%E6%9C%BA&amp;cid2=653&amp;cid3=655&amp;page=3&amp;s=58&amp;click=0'</span>,</span><br><span class="line">          <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36'</span>,</span><br><span class="line">          <span class="string">'x-requested-with'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">          <span class="string">'Cookie'</span>:<span class="string">'qrsc=3; pinId=RAGa4xMoVrs; xtest=1210.cf6b6759; ipLocation=%u5E7F%u4E1C; _jrda=5; TrackID=1aUdbc9HHS2MdEzabuYEyED1iDJaLWwBAfGBfyIHJZCLWKfWaB_KHKIMX9Vj9_2wUakxuSLAO9AFtB2U0SsAD-mXIh5rIfuDiSHSNhZcsJvg; shshshfpa=17943c91-d534-104f-a035-6e1719740bb6-1525571955; shshshfpb=2f200f7c5265e4af999b95b20d90e6618559f7251020a80ea1aee61500; cn=0; 3AB9D23F7A4B3C9B=QFOFIDQSIC7TZDQ7U4RPNYNFQN7S26SFCQQGTC3YU5UZQJZUBNPEXMX7O3R7SIRBTTJ72AXC4S3IJ46ESBLTNHD37U; ipLoc-djd=19-1607-3638-3638.608841570; __jdu=930036140; user-key=31a7628c-a9b2-44b0-8147-f10a9e597d6f; areaId=19; __jdv=122270672|direct|-|none|-|1529893590075; PCSYCityID=25; mt_xid=V2_52007VwsQU1xaVVoaSClUA2YLEAdbWk5YSk9MQAA0BBZOVQ0ADwNLGlUAZwQXVQpaAlkvShhcDHsCFU5eXENaGkIZWg5nAyJQbVhiWR9BGlUNZwoWYl1dVF0%3D; __jdc=122270672; shshshfp=72ec41b59960ea9a26956307465948f6; rkv=V0700; __jda=122270672.930036140.-.1529979524.1529984840.85; __jdb=122270672.1.930036140|85.1529984840; shshshsID=f797fbad20f4e576e9c30d1c381ecbb1_1_1529984840145'</span></span><br><span class="line">          &#125;</span><br><span class="line">    r = requests.get(new_brand_url,headers = head)</span><br><span class="line">    r.encoding = <span class="string">'utf-8'</span></span><br><span class="line">    html1 = etree.HTML(r.text)</span><br><span class="line">    datas = html1.xpath(<span class="string">'//li[contains(@class,"gl-item")]'</span>)</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    goods_href =[]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        p_price = data.xpath(<span class="string">'div/div[@class="p-price"]/strong/i/text()'</span>)</span><br><span class="line">        <span class="comment"># p_comment = data.xpath('div/div[5]/strong/a/text()')</span></span><br><span class="line">        p_name = data.xpath(<span class="string">'div/div[@class="p-name p-name-type-2"]/a/em'</span>)</span><br><span class="line">        p_href = data.xpath(<span class="string">'div/div[@class="p-name p-name-type-2"]/a/@href'</span>)</span><br><span class="line">        print(count,[p_name[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>),p_price[<span class="number">0</span>]])</span><br><span class="line">        goods_href.append(p_href)</span><br><span class="line">        count = count+<span class="number">1</span></span><br><span class="line">    judge = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(judge):</span><br><span class="line">        focus_num = input(<span class="string">"您关注的商品序号是:"</span>)</span><br><span class="line">        <span class="keyword">if</span> focus_num.isdigit():</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"您的输入有误，请输入数字："</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        a = int(focus_num)</span><br><span class="line">        <span class="keyword">if</span> a&gt;count<span class="number">-1</span>:</span><br><span class="line">            print(<span class="string">"输入序号过大，请重新输入："</span>)</span><br><span class="line">            judge = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> a&lt;<span class="number">1</span>:</span><br><span class="line">            print(<span class="string">"输入序号过小，请重新输入："</span>)</span><br><span class="line">            judge = <span class="number">1</span></span><br><span class="line">    focus_good_url = goods_href[int(focus_num)<span class="number">-1</span>]</span><br><span class="line">    <span class="comment"># print(focus_good_url)</span></span><br><span class="line">    <span class="keyword">return</span> focus_good_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_Firefox</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="comment">#location = 'D:/firefox-48.0b9.win64.sdk/firefox-sdk/bin/firefox.exe'</span></span><br><span class="line">    driver = webdriver.Chrome()</span><br><span class="line">    driver.get(num)</span><br><span class="line">    focus_url = driver.current_url</span><br><span class="line">    focus_title = driver.title[:<span class="number">-16</span>]</span><br><span class="line">    YesorNo3 = input(<span class="string">"是否将此商品加入关注列表？(yes or no)"</span>)</span><br><span class="line">    <span class="keyword">if</span> YesorNo3 == <span class="string">'yes'</span>:</span><br><span class="line">        print(<span class="string">"商品已成功加入关注列表"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'JD_goods.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">""</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            write1 = csv.writer(f)</span><br><span class="line">            write1.writerow([focus_title])</span><br><span class="line">            write1.writerow([focus_url])</span><br><span class="line">            write1.writerow([<span class="string">"---------------------------"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    judge = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(judge):</span><br><span class="line">        YesorNo = input(<span class="string">"是否需要打开关注商品信息：(yes or no)"</span>)</span><br><span class="line">        <span class="keyword">if</span> YesorNo == <span class="string">'yes'</span> <span class="keyword">or</span> YesorNo == <span class="string">'YES'</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'JD_goods.csv'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> cv:</span><br><span class="line">                cv_read = cv.read()</span><br><span class="line">                print(cv_read)</span><br><span class="line">                judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> YesorNo == <span class="string">'no'</span> <span class="keyword">or</span> YesorNo == <span class="string">'NO'</span>:</span><br><span class="line">            judge = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"输入有误，请重新输入："</span>)</span><br><span class="line">    goods_name =input(<span class="string">"请输入需要查询的商品种类："</span>)</span><br><span class="line">    data = getHTMLText(goods_name)</span><br><span class="line">    YesorNo2 = input(<span class="string">"是否需要根据商品品牌进行排列：(yes or no)"</span>)</span><br><span class="line">    <span class="keyword">if</span> YesorNo2 == <span class="string">'yes'</span>:</span><br><span class="line">        brand_url = searchGoods(data)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        brand_url = searchGoods(data)</span><br><span class="line">    new_brand_url = orderBy(brand_url)</span><br><span class="line">    focus_good_url = focus_good(new_brand_url)</span><br><span class="line">    str1 = str(focus_good_url)</span><br><span class="line">    new_url = <span class="string">"https:"</span>+str1[<span class="number">2</span>:<span class="number">-2</span>]</span><br><span class="line">    <span class="comment"># print(new_url)</span></span><br><span class="line">    open_Firefox(new_url)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow中的几种交叉熵</title>
    <url>/2019/03/07/TensorFlow%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BA%A4%E5%8F%89%E7%86%B5/</url>
    <content><![CDATA[<h1 id="TensorFlow中的几种交叉熵"><a href="#TensorFlow中的几种交叉熵" class="headerlink" title="TensorFlow中的几种交叉熵"></a>TensorFlow中的几种交叉熵</h1><h3 id="Logit函数"><a href="#Logit函数" class="headerlink" title="Logit函数"></a>Logit函数</h3><p>在线性回归中，<img src="1.gif" alt="1">，是用直线去拟合数据，实现最小二乘意义下的最小预测误差。</p>
<p>在逻辑回归中：可以看作是用<img src="2.gif" alt="2">直线去拟合Logit函数，通过极大似然估计出参数，使得在该参数下，能以最大概率生成当前的样本。</p>
<p>logits函数是一种将取值范围在[0,1]内的概率映射到实数域[-inf,inf]的函数，如果p=0.5，函数值为0；p&lt;0.5，函数值为负；p&gt;0.5，函数值为正。</p>
<p>相对地，softmax和sigmoid则都是将[-inf,inf]映射到[0,1]的函数。</p>
<p>在tensorflow里的”logits”指的其实是，该方法是在logit数值上使用softmax或者sigmoid来进行normalization的，也暗示用户不要将网络输出进行sigmoid或者softmax，这些过程可以在函数内部更高效地计算。</p>
<a id="more"></a>
<h3 id="独立和互斥"><a href="#独立和互斥" class="headerlink" title="独立和互斥"></a>独立和互斥</h3><p>有事件A和B</p>
<p>独立：P(AnB) = P(A) * P(B)</p>
<p>互斥：P(AUB) = P(A) + P(B), P(AnB) = 0</p>
<h2 id="1、tf-nn-sigmoid-cross-entropy-with-logits"><a href="#1、tf-nn-sigmoid-cross-entropy-with-logits" class="headerlink" title="1、tf.nn.sigmoid_cross_entropy_with_logits"></a>1、tf.nn.sigmoid_cross_entropy_with_logits</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sigmoid_cross_entropy_with_logits(</span><br><span class="line">    _sentinel=None,</span><br><span class="line">    labels=None,</span><br><span class="line">    logits=None,</span><br><span class="line">    name=None</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>计算网络输出logits和标签labels的sigmoid cross entropy loss，衡量独立不互斥离散分类任务的误差，说独立不互斥离散分类任务是因为，在这些任务中类与类之间是独立但是不互斥的，拿多分类任务中的多目标检测来举例子，一张图中可以有各种instance，比如有一只狗和一只猫。对于一个总共有五类的多目标检测任务，假如网络的输出层有5个节点，label的形式是[1,1,0,0,1]这种，1表示该图片有某种instance，0表示没有。那么，每个instance在这张图中有没有这显然是独立事件，但是多个instance可以存在一张图中，这就说明事件们并不是互斥的。所以我们可以直接将网络的输出用作该方法的logits输入，从而进行输出与label的cross entropy loss。</p>
<p>更加直白的来说，这种网络的输入不需要进行one hot处理，网络输出即是函数logits参数的输入。</p>
<p>剖开函数内部，因为labels和logits的形状都是[batch_size, num_classes]，那么如何计算他们的交叉熵呢，毕竟它们都不是有效的概率分布（一个batch内输出结果经过sigmoid后和不为1）。其实loss的计算是element-wise的，方法返回的loss的形状和labels是相同的，也是[batch_size, num_classes]，再调用reduce_mean方法计算batch内的平均loss。所以这里的cross entropy其实是一种class-wise的cross entropy，每一个class是否存在都是一个事件，对每一个事件都求cross entropy loss，再对所有的求平均，作为最终的loss。</p>
<h2 id="2、tf-nn-softmax-cross-entropy-with-logits"><a href="#2、tf-nn-softmax-cross-entropy-with-logits" class="headerlink" title="2、tf.nn.softmax_cross_entropy_with_logits"></a>2、tf.nn.softmax_cross_entropy_with_logits</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">softmax_cross_entropy_with_logits(</span><br><span class="line">    _sentinel=None,</span><br><span class="line">    labels=None,</span><br><span class="line">    logits=None,</span><br><span class="line">    dim=-1,</span><br><span class="line">    name=None</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>计算网络输出logits和标签labels的softmax cross entropy loss，衡量独立互斥离散分类任务的误差，说独立互斥离散分类任务是因为，在这些任务中类与类之间是独立而且互斥的，比如VOC classification、Imagenet、CIFAR-10甚至MNIST，这些都是多分类任务，但是一张图就对应着一个类，class在图片中是否存在是独立的，并且一张图中只能有一个class，所以是独立且互斥事件。</p>
<p>该函数要求每一个label都是一个有效的概率分布，对于Imagenet中的ILSVRC2012这种任务，那么label应该就对应一个one hot编码，ILSVRC2012提供的数据集中一共有1000个类，那么label就应该是一个1x1000的vector，形式为[0,0,…,1,0,….0]，1000个元素中有且只有一个元素是1，其余都是0。</p>
<p>这样要求的原因很简单，因为网络的输出要进行softmax，得到的就是一个有效的概率分布，这里不同与sigmoid，因为sigmoid并没有保证网络所有的输出经过sigmoid后和为1，不是一个有效的概率分布。</p>
<p>有了labels和softmax后的logits，就可以计算交叉熵损失了，最后得到的是形状为[batch_size, 1]的loss。</p>
<h2 id="3、tf-nn-sparse-softmax-cross-entropy-with-logits"><a href="#3、tf-nn-sparse-softmax-cross-entropy-with-logits" class="headerlink" title="3、tf.nn.sparse_softmax_cross_entropy_with_logits"></a>3、tf.nn.sparse_softmax_cross_entropy_with_logits</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sparse_softmax_cross_entropy_with_logits(</span><br><span class="line">    _sentinel=None,</span><br><span class="line">    labels=None,</span><br><span class="line">    logits=None,</span><br><span class="line">    name=None</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这个版本是tf.nn.softmax_cross_entropy_with_logits的易用版本，这个版本的logits的形状依然是[batch_size, num_classes]，但是labels的形状是[batch_size, 1]，每个label的取值是从[0, num_classes)的离散值，这也更加符合我们的使用习惯，是哪一类就标哪个类对应的label。</p>
<p>如果已经对label进行了one hot编码，则可以直接使用tf.nn.softmax_cross_entropy_with_logits。</p>
<h2 id="4、总结："><a href="#4、总结：" class="headerlink" title="4、总结："></a>4、总结：</h2><p>到底是用sigmoid版本的cross entropy还是softmax版本的cross entropy主要取决于我们模型的目的，以及label的组织方式，这个需要大家在使用的时候去揣摩，到底使用哪一种loss比较合理。</p>
<p>在我最近训练的segmentation模型中，使用的就是sparse softmax cross entropy，使用的思路就是将输出的结果从NHWC（这里C=1，表示该pixel所属的class），进行一次reshape，形状变为[N<em>H</em>W, 1]，label也是如此，传入函数中进行计算，从而产生loss。从模型训练的结果来看，这种使用方法没有错误。</p>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy学习（二）命令行</title>
    <url>/2019/03/05/scrapy2/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Scrapy是通过Scrapy命令行工具进行控制的，包括创建新的项目，爬虫的启动，相关的设置，Scrapy提供了两种内置的命令，分别是全局命令和项目命令，顾名思义，全局命令就是在任意位置都可以执行的命令，而项目命令只有在你新创建了项目之后，在项目目录中才可以执行的命令。在这里，简单的介绍一些常用的命令。</p>
<h3 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h3><ul>
<li><h4 id="startproject"><a href="#startproject" class="headerlink" title="startproject"></a>startproject</h4><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy startproject &lt;project_name&gt;</span><br></pre></td></tr></table></figure>
<p>  这个命令是scrapy最为常用的命令之一，它将会在当前目录下创建一个名为</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project_name&gt;</span><br></pre></td></tr></table></figure>
<p>  的项目。</p>
<ul>
<li><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy settings [options]</span><br></pre></td></tr></table></figure>
<p>  该命令将会输出Scrapy默认设定，当然如果你在项目中运行这个命令将会输出项目的设定值。</p>
<ul>
<li><h4 id="runspider"><a href="#runspider" class="headerlink" title="runspider"></a>runspider</h4><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy runspider &lt;spider_file.py&gt;</span><br></pre></td></tr></table></figure>
<p>  在未创建项目的情况下，运行一个编写在Python文件中的spider。</p>
<ul>
<li><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy shell [url]</span><br></pre></td></tr></table></figure>
<p>  以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell。</p>
<p>  例如，</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy shell http://www.baidu.com</span><br></pre></td></tr></table></figure>
<p>  将会打开百度URL，</p>
<p>  并且启动交互式命令行，可以用来做一些测试。</p>
<ul>
<li><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy fetch &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p>  使用Scrapy下载器(downloader)下载给定的URL，并将获取到的内容送到标准输出。简单的来说，就是打印url的html代码。</p>
<ul>
<li><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy view &lt;url&gt;</span><br></pre></td></tr></table></figure>
<p>  在你的默认浏览器中打开给定的URL，并以Scrapy spider获取到的形式展现。 有些时候spider获取到的页面和普通用户看到的并不相同，一些动态加载的内容是看不到的， 因此该命令可以用来检查spider所获取到的页面。</p>
<ul>
<li><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy version [-v]</span><br></pre></td></tr></table></figure>
<p>  输出Scrapy版本。配合 -v 运行时，该命令同时输出Python, Twisted以及平台的信息。</p>
<h3 id="项目命令"><a href="#项目命令" class="headerlink" title="项目命令"></a>项目命令</h3><ul>
<li><h3 id="crawl"><a href="#crawl" class="headerlink" title="crawl"></a>crawl</h3><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy crawl &lt;spider_name&gt;</span><br></pre></td></tr></table></figure>
<p>  使用你项目中的spider进行爬取，即启动你的项目。这个命令将会经常用到，我们会在后面的内容中经常使用。</p>
<ul>
<li><h3 id="check"><a href="#check" class="headerlink" title="check"></a>check</h3><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crapy check [-l] &lt;spider&gt;</span><br></pre></td></tr></table></figure>
<p>  运行contract检查，检查你项目中的错误之处。</p>
<ul>
<li><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy list</span><br></pre></td></tr></table></figure>
<p>  列出当前项目中所有可用的spider。每行输出一个spider。</p>
<ul>
<li><h3 id="genspider"><a href="#genspider" class="headerlink" title="genspider"></a>genspider</h3><p>语法:</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scrapy genspider [-t template] &lt;name&gt; &lt;domain&gt;</span><br></pre></td></tr></table></figure>
<p>  在当前项目中创建spider。该方法可以使用提前定义好的模板来生成spider。您也可以自己创建spider的源码文件。</p>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy学习（一）框架简介</title>
    <url>/2019/03/05/scrapy1/</url>
    <content><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><strong><code>Scrapy</code></strong>是一个<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a>编写的<a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90" target="_blank" rel="noopener">开源</a><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB" target="_blank" rel="noopener">网络爬虫</a><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">框架</a>。它是一个被设计用于爬取网络数据、提取结构性数据的程序框架。<a href="https://zh.wikipedia.org/wiki/Scrapy#cite_note-3" target="_blank" rel="noopener">[3]</a>该框架主要由<a href="https://zh.wikipedia.org/w/index.php?title=Scrapinghub_%E5%85%AC%E5%8F%B8&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">Scrapinghub 公司</a>进行维护。<code>scrapy</code>官网给出的最新的架构图示。</p>
<p><img src="1.png" alt="1"></p>
<h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><ul>
<li><p>引擎（Engine）</p>
<p>引擎负责控制数据流在系统中所有组件中流动，并在相应动作发生时触发事件。 详细内容查看下面的数据流(Data Flow)部分。</p>
</li>
<li><p>调度器（Scheduler）</p>
<p>调度器从引擎接受request并将他们入队，以便之后引擎请求他们时提供给引擎。</p>
</li>
<li><p>下载器(Downloader)</p>
<p>下载器负责获取页面数据并提供给引擎，而后提供给spider。</p>
</li>
<li><p>爬虫（Spiders）</p>
<p>Spider是Scrapy用户编写用于分析response并提取item(即获取到的item)或额外跟进的URL的类。 每个spider负责处理一个特定(或一些)网站。</p>
</li>
<li><p>管道（Item Pipeline）</p>
<p>Item Pipeline负责处理被spider提取出来的item。典型的处理有清理、验证及持久化(例如存取到数据库中)。</p>
</li>
<li><p>下载器中间件（Downloader middlewares）</p>
<p>下载器中间件是在引擎及下载器之间的特定钩子(specific hook)，处理Downloader传递给引擎的response。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p>
</li>
<li><p>Spider中间件（Spider middlewares）</p>
<p>Spider中间件是在引擎及Spider之间的特定钩子(specific hook)，处理spider的输入(response)和输出(items及requests)。 其提供了一个简便的机制，通过插入自定义代码来扩展Scrapy功能。</p>
</li>
</ul>
<h2 id="数据流向"><a href="#数据流向" class="headerlink" title="数据流向"></a>数据流向</h2><p>Scrapy的数据流由执行引擎（Engine）控制，其基本过程如下：</p>
<pre><code>1. 引擎从Spider中获取到初始Requests。
2. 引擎将该Requests放入调度器，并请求下一个要爬取的Requests。
3. 调度器返回下一个要爬取的Requests给引擎
4. 引擎将Requests通过下载器中间件转发给下载器(Downloader)。
5. 一旦页面下载完毕，下载器生成一个该页面的Response，并将其通过下载中间件(返回(response)方向)发送给引擎。
6. 引擎从下载器中接收到Response并通过Spider中间件(输入方向)发送给Spider处理。
7. Spider处理Response并返回爬取到的Item及(跟进的)新的Request给引擎。
8. 引擎将(Spider返回的)爬取到的Item交给ItemPipeline处理，将(Spider返回的)Request交给调度器，并请求下一个Requests（如果存在的话）。
9. (从第一步)重复直到调度器中没有更多地Request。
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  Scrapy的各个组件相互配合执行，有的组件负责任务的调度，有的组件负责任务的下载，有的组件负责数据的清洗保存，各组件分工明确。在组件之间存在middleware的中间件，其作用就是功能的拓展，当然还可以根据自身的需求自定义这些拓展功能，比如我们可以在Downloader middlewares里面实现User-Agent的切换，Proxy的切换等等。这些功能我们会在后续的学习中逐渐拓展。这里只需要大致的了解即可。</p>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium详解</title>
    <url>/2019/03/03/selenium/</url>
    <content><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 用chrome发出get请求</span></span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    <span class="comment"># 找到id为kw的元素</span></span><br><span class="line">    input = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">    <span class="comment"># 输入Python</span></span><br><span class="line">    input.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">    <span class="comment"># 调用ENTER</span></span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    <span class="comment"># 等待</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 直到ID为 content_left 元素出现</span></span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, <span class="string">'content_left'</span>)))</span><br><span class="line">    <span class="comment"># URL地址</span></span><br><span class="line">    print(browser.current_url)</span><br><span class="line">    <span class="comment"># COOKIES	</span></span><br><span class="line">    print(browser.get_cookies())</span><br><span class="line">    <span class="comment"># 源代码</span></span><br><span class="line">    print(browser.page_source)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭此浏览器</span></span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>
<h2 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure>
<h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first, input_second, input_third)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<ul>
<li>find_element_by_name</li>
<li>find_element_by_xpath</li>
<li>find_element_by_link_text</li>
<li>find_element_by_partial_link_text</li>
<li>find_element_by_tag_name</li>
<li>find_element_by_class_name</li>
<li>find_element_by_css_selector</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element(By.ID, <span class="string">'q'</span>)</span><br><span class="line">print(input_first)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<ul>
<li>通过<code>browser.find_element</code>加上<code>from selenium.webdriver.common.by import By</code></li>
</ul>
<h2 id="多个元素"><a href="#多个元素" class="headerlink" title="多个元素"></a>多个元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<p>把element加上复数形式</p>
<ul>
<li>find_elements_by_name</li>
<li>find_elements_by_xpath</li>
<li>find_elements_by_link_text</li>
<li>find_elements_by_partial_link_text</li>
<li>find_elements_by_tag_name</li>
<li>find_elements_by_class_name</li>
<li>find_elements_by_css_selector</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements(By.CSS_SELECTOR, <span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<h2 id="元素交互操作"><a href="#元素交互操作" class="headerlink" title="元素交互操作"></a>元素交互操作</h2><p>对获取的元素调用交互方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure>
<p>更多操作: <a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p>
<h2 id="交互动作"><a href="#交互动作" class="headerlink" title="交互动作"></a>交互动作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure>
<p>更多操作: <a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a>&gt;</p>
<h2 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h2><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure>
<h3 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input.text)</span><br></pre></td></tr></table></figure>
<h3 id="获取ID、位置、标签名、大小"><a href="#获取ID、位置、标签名、大小" class="headerlink" title="获取ID、位置、标签名、大小"></a>获取ID、位置、标签名、大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input.id)</span><br><span class="line">print(input.location)</span><br><span class="line">print(input.tag_name)</span><br><span class="line">print(input.size)</span><br></pre></td></tr></table></figure>
<h2 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h2><p>Frame相当于一个网页，父Frame必须进入子Frame然后才能查找子Frame中的元素，子Frame中也不能获取父Frame中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line"><span class="comment"># swith_to.frame()传入frame的id</span></span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">print(source)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'NO LOGO'</span>)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line"><span class="comment">#swith_to.parent_frame()切换到父Frame</span></span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure>
<h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h2><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><p>当使用了隐式等待执行测试的时候，如果 WebDriver没有在 DOM中找到元素，将继续等待，超出设定时间后则抛出找不到元素的异常, 换句话说，当查找元素或元素并没有立即出现的时候，隐式等待将等待一段时间再查找 DOM，默认的时间是0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure>
<h3 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>)))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'.btn-search'</span>)))</span><br><span class="line">print(input, button)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>title_is         标题是某内容</p>
</li>
<li><p>title_contains         标题包含某内容</p>
</li>
<li><p>presence_of_element_located         元素加载出，传入定位元组，如(By.ID, ‘p’)</p>
</li>
<li><p>visibility_of_element_located         元素可见，传入定位元组</p>
</li>
<li><p>visibility_of         可见，传入元素对象</p>
</li>
<li><p>presence_of_all_elements_located         所有元素加载出</p>
</li>
<li><p>text_to_be_present_in_element         某个元素文本包含某文字</p>
</li>
<li><p>text_to_be_present_in_element_value         某个元素值包含某文字</p>
</li>
<li><p>frame_to_be_available_and_switch_to_it frame        加载并切换</p>
</li>
<li><p>invisibility_of_element_located         元素不可见</p>
</li>
<li><p>element_to_be_clickable         元素可点击</p>
</li>
<li><p>staleness_of         判断一个元素是否仍在DOM，可判断页面是否已经刷新</p>
</li>
<li><p>element_to_be_selected         元素可选择，传元素对象</p>
</li>
<li><p>element_located_to_be_selected         元素可选择，传入定位元组</p>
</li>
<li><p>element_selection_state_to_be         传入元素对象以及状态，相等返回True，否则返回False</p>
</li>
<li><p>element_located_selection_state_to_be         传入定位元组以及状态，相等返回True，否则返回False</p>
</li>
<li><p>alert_is_present         是否出现Alert</p>
</li>
</ul>
<h2 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.python.org/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>设置登陆状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure>
<h2 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://python.org'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#异常处理</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>
<p>加入异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException, NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'Time Out'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'No Element'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>BeautifulSoup详解</title>
    <url>/2019/03/02/BeautifulSoup/</url>
    <content><![CDATA[<h1 id="BeautifulSoup详解"><a href="#BeautifulSoup详解" class="headerlink" title="BeautifulSoup详解"></a>BeautifulSoup详解</h1><p>BeautifulSoup是一个灵活有方便的网页解系库，处理搞笑，支持多种解析器，利用他可以不编写正贼表达式即可方便实现网页信息的提取。</p>
<h2 id="解析库："><a href="#解析库：" class="headerlink" title="解析库："></a><strong>解析库：</strong></h2><p><img src="1.png" alt="1"></p>
<p>在此，我们主要用lxml解析器</p>
<h2 id="标签选择器："><a href="#标签选择器：" class="headerlink" title="标签选择器："></a><strong>标签选择器</strong>：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = bs(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.head)</span><br><span class="line">print(type(soup.head))</span><br><span class="line">print(soup.p)</span><br><span class="line">print(type(soup.p))</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>这里我们print了soup.title、head、p三个标签以及他们的类型，结果如下：</p>
<p><img src="2.png" alt="img"></p>
<p>他们的类型都是bs.elment.tag，类型，类就是标签类型，并且对于soup.p，是把第一个p标签输出，也就是说有多个相同的标签，只输出第一个</p>
<p><strong>获取名称：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.title.name)</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt="img"></p>
<p>输出结果就是title</p>
<p><strong>获取属性：</strong>　</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.title.attrs[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure>
<p><img src="4.png" alt="img"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure>
<p><img src="5.png" alt="img"></p>
<p>可以看到这两种方式都是相同的</p>
<p><strong>获取内容：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure>
<p><img src="6.png" alt="img"></p>
<p><strong>嵌套选择：</strong></p>
<p> <img src="7.png" alt="img"></p>
<p>也就是说从body到p，是一个嵌套的关系，p也是说，通过 .head得到的tag还可以进一步 向下索取，通过.body.p得到p标签</p>
<p><strong>子节点和子孙节点（children和contents）：</strong></p>
<p><strong>contents：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"> &lt;html&gt;</span></span><br><span class="line"><span class="string"> &lt;head&gt;</span></span><br><span class="line"><span class="string">  &lt;title&gt;</span></span><br><span class="line"><span class="string">   The Dormouse's story</span></span><br><span class="line"><span class="string">  &lt;/title&gt;</span></span><br><span class="line"><span class="string"> &lt;/head&gt;</span></span><br><span class="line"><span class="string"> &lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">   Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">   &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span></span><br><span class="line"><span class="string">    Elsie</span></span><br><span class="line"><span class="string">   &lt;/a&gt;</span></span><br><span class="line"><span class="string">   ,</span></span><br><span class="line"><span class="string">   &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;</span></span><br><span class="line"><span class="string">    Lacie</span></span><br><span class="line"><span class="string">   &lt;/a&gt;</span></span><br><span class="line"><span class="string">   and</span></span><br><span class="line"><span class="string">   &lt;a class="sister" href="http://example.com/tillie" id="link2"&gt;</span></span><br><span class="line"><span class="string">    Tillie</span></span><br><span class="line"><span class="string">   &lt;/a&gt;</span></span><br><span class="line"><span class="string">   ; and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">   ...</span></span><br><span class="line"><span class="string">  &lt;/p&gt;</span></span><br><span class="line"><span class="string"> &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = bs(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.body.contents)</span><br></pre></td></tr></table></figure>
<p><img src="8.png" alt="img"></p>
<p>可以看到contents属性返回了一个列表，整个p中的内容。把所有的换行符 标签放进了列表</p>
<p><strong>children:</strong></p>
<p>当我们把contents换成children：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.body.children)</span><br></pre></td></tr></table></figure>
<p><strong>contents：</strong></p>
<p><strong><img src="9.png" alt="img"></strong></p>
<p>它返回了一个迭代器，需要用for循环遍历使用</p>
<p><strong>后代descendants:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.body.descendants)</span><br></pre></td></tr></table></figure>
<p><img src="10.png" alt="img"></p>
<p>还是一个迭代器，并且descendants是获得所有子孙节点，也就是儿子的儿子也会获得</p>
<p><strong>父节点parent：</strong></p>
<p>返回父节点</p>
<p><img src="11.png" alt="img"></p>
<p><strong>父节点parents:</strong></p>
<p><img src="12.png" alt="img"></p>
<p><strong>兄弟节点siblings：</strong></p>
<p><img src="13.png" alt="img"></p>
<p>以上是<strong>标签选择器</strong>，是通过<strong>名字</strong>进行选择，但是在选择时候，往往会有很多名字相同的标签，所以我们不能完全用标签选择器进行选择，故引入<strong>标准选择器:</strong></p>
<p><strong>标准选择器：</strong></p>
<p><strong>find_all(name, attrs, recursive, text, \</strong>kwargs)**</p>
<p>可根据标签名、属性、内容查找文档， 把所有符合条件的结果，并以<strong>列表</strong>的形式返回</p>
<p><strong>name：</strong></p>
<p><strong><img src="14.png" alt="img"></strong></p>
<p>可以看到findall返回的列表中的每一个项哦都是tag类型</p>
<p>由此我们可以嵌套for循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> soup.find_all(<span class="string">'p'</span>):</span><br><span class="line">    print(p.find_all(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure>
<p><strong>attrs：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'list-1'</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'name'</span>: <span class="string">'elements'</span>&#125;))</span><br></pre></td></tr></table></figure>
<p>attr需要传入一个字典</p>
<p>并且对于某一些属性，可以直接用参数传入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(id=<span class="string">'list-1'</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">'elements'</span>))   <span class="comment">#class 是python的一个关键词，所以我们用class_代替class</span></span><br></pre></td></tr></table></figure>
<p><strong>text：</strong></p>
<p>根据文本的内容选择，而它的返回值仅仅是文本的列表而不是tag</p>
<p><strong><img src="15.png" alt="img"></strong></p>
<p><img src="16.png" alt="img"></p>
<p><strong>find(name, attrs, recursive, text, \</strong>kwargs)**</p>
<p>与find_all不同是  find返回<strong>单个</strong>元素，fan_all返回<strong>所有</strong>元素。 find查找一个不存在的元素返回<strong>None</strong></p>
<p><strong>find_parent()和find_parents():</strong></p>
<p>find_parent()返回所有祖先节点，find_parent()返回直接父节点。</p>
<p><strong>find_next_siblings() 和 find_next_sibling()</strong></p>
<p>find_next_siblings() 返回后面所有兄弟节点 find_next_sibling()返回前面一个兄弟节点</p>
<p><strong>find_all_next() 和find_next()</strong></p>
<p>find_all_next()返回节点后所有符合条件的节点，find_next()返回第一个符合条件的节点 </p>
<p><strong>find_all_previous()和find_previous()</strong></p>
<p>find_all_previous()返回节点钱所有符合条件的节点，find_previous返回第一个符合条件的节点</p>
<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a><strong>css选择器</strong></h2><p>通过css()直接传入css选择器即可完成选择</p>
<p>标签（什么都不用加）.属性（加点） #id（加井号） </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs  </span><br><span class="line">  </span><br><span class="line">html = <span class="string">""" </span></span><br><span class="line"><span class="string">&lt;html&gt; </span></span><br><span class="line"><span class="string">    &lt;head&gt; </span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt; </span></span><br><span class="line"><span class="string">    &lt;/head&gt; </span></span><br><span class="line"><span class="string">    &lt;body&gt; </span></span><br><span class="line"><span class="string">        &lt;p class="title" name="dromouse"&gt; </span></span><br><span class="line"><span class="string">            &lt;b&gt;The Dormouse's story&lt;/b&gt; </span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt; </span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were </span></span><br><span class="line"><span class="string">            &lt;a class="mysis" href="http://example.com/elsie" id="link1"&gt; </span></span><br><span class="line"><span class="string">                &lt;b&gt;the first b tag&lt;b&gt; </span></span><br><span class="line"><span class="string">                Elsie </span></span><br><span class="line"><span class="string">            &lt;/a&gt;, </span></span><br><span class="line"><span class="string">            &lt;a class="mysis" href="http://example.com/lacie" id="link2" myname="kong"&gt; </span></span><br><span class="line"><span class="string">                Lacie </span></span><br><span class="line"><span class="string">            &lt;/a&gt;and </span></span><br><span class="line"><span class="string">            &lt;a class="mysis" href="http://example.com/tillie" id="link3"&gt; </span></span><br><span class="line"><span class="string">                Tillie </span></span><br><span class="line"><span class="string">            &lt;/a&gt;;and they lived at the bottom of a well. </span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt; </span></span><br><span class="line"><span class="string">            myStory </span></span><br><span class="line"><span class="string">            &lt;a&gt;the end a tag&lt;/a&gt; </span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;a&gt;the p tag sibling&lt;/a&gt; </span></span><br><span class="line"><span class="string">    &lt;/body&gt; </span></span><br><span class="line"><span class="string">&lt;/html&gt; </span></span><br><span class="line"><span class="string">"""</span>  </span><br><span class="line">soup = bs(html, <span class="string">'lxml'</span>)  </span><br><span class="line">print(soup.select(<span class="string">'p'</span>))  </span><br><span class="line">print(soup.select(<span class="string">'p a'</span>))  </span><br><span class="line">print(type(soup.select(<span class="string">'p'</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>输出结果1是一个包含所有p标签的列表 2是一个包含所有p标签下的a标签的列表，3是<code>class &#39;bs4.element.Tag&#39;</code>，也就是说。css选择器生成的结果就是一个tag类型的列表。</p>
<p>同时对于soup.select(‘a.mysis‘表示class属性为mysis的所有标签。也即没有空格的表示有某一个属性的或者id的标签。 有空格代表是同等的</p>
<p>又因为select返回的是tag类型的列表，所以我们可以继续使用上面的方法获得属性即：、</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> soup.select(<span class="string">'p a'</span>):    </span><br><span class="line">    <span class="comment">#方法一    </span></span><br><span class="line">    print(a[<span class="string">'href'</span>])    </span><br><span class="line">    <span class="comment">#方法二    </span></span><br><span class="line">    print(a.attrs[<span class="string">'href'</span>])</span><br></pre></td></tr></table></figure>
<p> 以下罗列出一些css选择器的方法：（以下内容转自<a href="https://www.cnblogs.com/kongzhagen/p/6472746.html）" target="_blank" rel="noopener">https://www.cnblogs.com/kongzhagen/p/6472746.html）</a></p>
<p>1、通过标签选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择所有title标签  </span></span><br><span class="line">soup.select(<span class="string">"title"</span>)  </span><br><span class="line"><span class="comment"># 选择所有p标签中的第三个标签  </span></span><br><span class="line">soup.select(<span class="string">"p:nth-of-type(3)"</span>) 相当于soup.select(p)[<span class="number">2</span>]  </span><br><span class="line"><span class="comment"># 选择body标签下的所有a标签  </span></span><br><span class="line">soup.select(<span class="string">"body a"</span>)  </span><br><span class="line"><span class="comment"># 选择body标签下的直接a子标签  </span></span><br><span class="line">soup.select(<span class="string">"body &gt; a"</span>)  </span><br><span class="line"><span class="comment"># 选择id=link1后的所有兄弟节点标签  </span></span><br><span class="line">soup.select(<span class="string">"#link1 ~ .mysis"</span>)  </span><br><span class="line"><span class="comment"># 选择id=link1后的下一个兄弟节点标签  </span></span><br><span class="line">soup.select(<span class="string">"#link1 + .mysis"</span>)</span><br></pre></td></tr></table></figure>
<p>2、通过类名查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择a标签，其类属性为mysis的标签  </span></span><br><span class="line">soup.select(<span class="string">"a.mysis"</span>)</span><br></pre></td></tr></table></figure>
<p>3、通过id查找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择a标签，其id属性为link1的标签  </span></span><br><span class="line">soup.select(<span class="string">"a#link1"</span>)</span><br></pre></td></tr></table></figure>
<p>4、通过【属性】查找，当然也适用于class</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择a标签，其属性中存在myname的所有标签  </span></span><br><span class="line">soup.select(<span class="string">"a[myname]"</span>)  </span><br><span class="line"><span class="comment"># 选择a标签，其属性href=http://example.com/lacie的所有标签  </span></span><br><span class="line">soup.select(<span class="string">"a[href='http://example.com/lacie']"</span>)  </span><br><span class="line"><span class="comment"># 选择a标签，其href属性以http开头  </span></span><br><span class="line">soup.select(<span class="string">'a[href^="http"]'</span>)  </span><br><span class="line"><span class="comment"># 选择a标签，其href属性以lacie结尾  </span></span><br><span class="line">soup.select(<span class="string">'a[href$="lacie"]'</span>)  </span><br><span class="line"><span class="comment"># 选择a标签，其href属性包含.com  </span></span><br><span class="line">soup.select(<span class="string">'a[href*=".com"]'</span>)  </span><br><span class="line"><span class="comment"># 从html中排除某标签，此时soup中不再有script标签  </span></span><br><span class="line">[s.extract() <span class="keyword">for</span> s <span class="keyword">in</span> soup(<span class="string">'script'</span>)]  </span><br><span class="line"><span class="comment"># 如果想排除多个呢  </span></span><br><span class="line">[s.extract() <span class="keyword">for</span> s <span class="keyword">in</span> soup([<span class="string">'script'</span>,<span class="string">'fram'</span>]</span><br></pre></td></tr></table></figure>
<p>5、获取文本及属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">"""&lt;html&gt; </span></span><br><span class="line"><span class="string">    &lt;head&gt; </span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt; </span></span><br><span class="line"><span class="string">    &lt;/head&gt; </span></span><br><span class="line"><span class="string">&lt;body&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;, </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;; </span></span><br><span class="line"><span class="string">    &lt;/p&gt; </span></span><br><span class="line"><span class="string">        and they lived at the bottom of a well. </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;...&lt;/p&gt; </span></span><br><span class="line"><span class="string">&lt;/body&gt; </span></span><br><span class="line"><span class="string">"""</span>  </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line"><span class="string">''''' </span></span><br><span class="line"><span class="string">以列表的形式返回 </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)  </span><br><span class="line">s = soup.select(<span class="string">'p.story'</span>)  </span><br><span class="line">s[<span class="number">0</span>].get_text()  <span class="comment"># p节点及子孙节点的文本内容  </span></span><br><span class="line">s[<span class="number">0</span>].get_text(<span class="string">"|"</span>)  <span class="comment"># 指定文本内容的分隔符  </span></span><br><span class="line">s[<span class="number">0</span>].get_text(<span class="string">"|"</span>, strip=<span class="keyword">True</span>)  <span class="comment"># 去除文本内容前后的空白  </span></span><br><span class="line">print(s[<span class="number">0</span>].get(<span class="string">"class"</span>))  <span class="comment"># p节点的class属性值列表（除class外都是返回字符串）</span></span><br></pre></td></tr></table></figure>
<p>在创建 <code>BeautifulSoup</code> 或 <code>UnicodeDammit</code> 对象前一定要先对文档调用 <code>UnicodeDammit.detwingle()</code> 确保文档的编码方式正确.如果尝试去解析一段包含Windows-1252编码的UTF-8文档,就会得到一堆乱码,比如: â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”.</p>
<p>6、其他</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">"""&lt;html&gt; </span></span><br><span class="line"><span class="string">    &lt;head&gt; </span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt; </span></span><br><span class="line"><span class="string">    &lt;/head&gt; </span></span><br><span class="line"><span class="string">&lt;body&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;, </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;; </span></span><br><span class="line"><span class="string">    &lt;/p&gt; </span></span><br><span class="line"><span class="string">        and they lived at the bottom of a well. </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;...&lt;/p&gt; </span></span><br><span class="line"><span class="string">&lt;/body&gt; </span></span><br><span class="line"><span class="string">"""</span>  </span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line"><span class="string">''''' </span></span><br><span class="line"><span class="string">以列表的形式返回 </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)  </span><br><span class="line">soup.select(<span class="string">'title'</span>)  <span class="comment"># title标签  </span></span><br><span class="line">soup.select(<span class="string">"p:nth-of-type(3)"</span>)  <span class="comment"># 第三个p节点  </span></span><br><span class="line">soup.select(<span class="string">'body a'</span>)  <span class="comment"># body下的所有子孙a节点  </span></span><br><span class="line">soup.select(<span class="string">'p &gt; a'</span>)  <span class="comment"># 所有p节点下的所有a直接节点  </span></span><br><span class="line">soup.select(<span class="string">'p &gt; #link1'</span>)  <span class="comment"># 所有p节点下的id=link1的直接子节点  </span></span><br><span class="line">soup.select(<span class="string">'#link1 ~ .sister'</span>)  <span class="comment"># id为link1的节点后面class=sister的所有兄弟节点  </span></span><br><span class="line">soup.select(<span class="string">'#link1 + .sister'</span>)  <span class="comment"># id为link1的节点后面class=sister的第一个兄弟节点  </span></span><br><span class="line">soup.select(<span class="string">'.sister'</span>)  <span class="comment"># class=sister的所有节点  </span></span><br><span class="line">soup.select(<span class="string">'[class="sister"]'</span>)  <span class="comment"># class=sister的所有节点  </span></span><br><span class="line">soup.select(<span class="string">"#link1"</span>)  <span class="comment"># id=link1的节点  </span></span><br><span class="line">soup.select(<span class="string">"a#link1"</span>)  <span class="comment"># a节点，且id=link1的节点  </span></span><br><span class="line">soup.select(<span class="string">'a[href]'</span>)  <span class="comment"># 所有的a节点，有href属性  </span></span><br><span class="line">soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>)  <span class="comment"># 指定href属性值的所有a节点  </span></span><br><span class="line">soup.select(<span class="string">'a[href^="http://example.com/"]'</span>)  <span class="comment"># href属性以指定值开头的所有a节点  </span></span><br><span class="line">soup.select(<span class="string">'a[href$="tillie"]'</span>)  <span class="comment"># href属性以指定值结尾的所有a节点  </span></span><br><span class="line">soup.select(<span class="string">'a[href*=".com/el"]'</span>)  <span class="comment"># 支持正则匹配</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/03/02/regex/</url>
    <content><![CDATA[<h2 id="常见匹配模式"><a href="#常见匹配模式" class="headerlink" title="常见匹配模式"></a>常见匹配模式</h2><table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\w</td>
<td>匹配字母数字及下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母数字下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意空白字符，等价于 [\t\n\r\f].</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意非空字符</td>
</tr>
<tr>
<td>\d</td>
<td>匹配任意数字，等价于 [0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字</td>
</tr>
<tr>
<td>\A</td>
<td>匹配字符串开始</td>
</tr>
<tr>
<td>\Z</td>
<td>匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串</td>
</tr>
<tr>
<td>\z</td>
<td>匹配字符串结束</td>
</tr>
<tr>
<td>\G</td>
<td>匹配最后匹配完成的位置</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td>^</td>
<td>匹配字符串的开头</td>
</tr>
<tr>
<td>$</td>
<td>匹配字符串的末尾。</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td>[…]</td>
<td>用来表示一组字符,单独列出：[amk] 匹配 ‘a’，’m’或’k’</td>
</tr>
<tr>
<td>[^…]</td>
<td>不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或多个的表达式。</td>
</tr>
<tr>
<td>+</td>
<td>匹配1个或多个的表达式。</td>
</tr>
<tr>
<td>?</td>
<td>匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td>{n}</td>
<td>精确匹配n个前面表达式。</td>
</tr>
<tr>
<td>{n, m}</td>
<td>匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td>a&#124;b</td>
<td>匹配a或b</td>
</tr>
<tr>
<td>( )</td>
<td>匹配括号内的表达式，也表示一个组</td>
</tr>
</tbody>
</table>
<h2 id="re-match"><a href="#re-match" class="headerlink" title="re.match"></a>re.match</h2><p>  <code>re.match</code> 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.match(pattern, string, flags=0)</span><br></pre></td></tr></table></figure>
<h3 id="最常规的匹配"><a href="#最常规的匹配" class="headerlink" title="最常规的匹配"></a>最常规的匹配</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">   content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">   print(len(content))</span><br><span class="line">   result = re.match(<span class="string">'^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*Demo$'</span>, content)</span><br><span class="line">   print(result)</span><br><span class="line">   print(result.group(<span class="number">0</span>))</span><br><span class="line">   print(result.span())</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;_sre.SRE_Match object; span=(0, 41), match=&apos;Hello 123 4567 World_This is a Regex Demo&apos;&gt;</span><br><span class="line">&gt; Hello 123 4567 World_This is a Regex Demo</span><br><span class="line">&gt; (0, 41)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<a id="more"></a>
<h3 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a>匹配目标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^Hello\s(\d+)\sWorld.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;re.Match object; span=(0, 40), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt;</span><br><span class="line">&gt; 1234567</span><br><span class="line">&gt; (0, 40)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p><code>re.S</code>它表示“.”（不包含外侧双引号，下同）的作用扩展到整个字符串，包括“\n”。看如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content, re.S)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<p>1234567</p>
</blockquote>
<h2 id="re-search"><a href="#re-search" class="headerlink" title="re.search"></a>re.search</h2><p><code>re.search</code> 扫描整个字符串并返回第一个成功的匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.match(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<p>None</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.search(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;_sre.SRE_Match object; span=(13, 53), match=&apos;Hello 1234567 World_This is a Regex Demo&apos;&gt;</span><br><span class="line">&gt; 1234567</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>re.match</code>和<code>re.search</code>的差异：</p>
<p><img src="difference.png" alt="difference"></p>
<p>总结：为匹配方便，能用search就不用match</p>
<h3 id="匹配演练"><a href="#匹配演练" class="headerlink" title="匹配演练"></a>匹配演练</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;&lt;i class="fa fa-user"&gt;&lt;/i&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?active.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>), result.group(), sep=<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 齐秦</span><br><span class="line">&gt; 往事随风</span><br><span class="line">&gt; &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;7&quot;&gt;</span><br><span class="line">&gt;             &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;</span><br><span class="line">&gt;         &lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;</span><br><span class="line">&gt;             &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 任贤齐 沧海一声笑</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    print(result.group(<span class="number">1</span>), result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; beyond 光辉岁月</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h2><p>搜索字符串，以列表形式返回全部能匹配的<code>子串</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br><span class="line">    print(type(result[<span class="number">0</span>]), type(result), type(results))</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; [(&apos;/2.mp3&apos;, &apos;任贤齐&apos;, &apos;沧海一声笑&apos;), (&apos;/3.mp3&apos;, &apos;齐秦&apos;, &apos;往事随风&apos;), (&apos;/4.mp3&apos;, &apos;beyond&apos;, &apos;光辉岁月&apos;), (&apos;/5.mp3&apos;, &apos;陈慧琳&apos;, &apos;记事本&apos;), (&apos;/6.mp3&apos;, &apos;邓丽君&apos;, &apos;但愿人长久&apos;)]</span><br><span class="line">&gt; &lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt; (&apos;/2.mp3&apos;, &apos;任贤齐&apos;, &apos;沧海一声笑&apos;)</span><br><span class="line">&gt; /2.mp3 任贤齐 沧海一声笑</span><br><span class="line">&gt; &lt;class &apos;str&apos;&gt; &lt;class &apos;tuple&apos;&gt; &lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt; (&apos;/3.mp3&apos;, &apos;齐秦&apos;, &apos;往事随风&apos;)</span><br><span class="line">&gt; /3.mp3 齐秦 往事随风</span><br><span class="line">&gt; &lt;class &apos;str&apos;&gt; &lt;class &apos;tuple&apos;&gt; &lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt; (&apos;/4.mp3&apos;, &apos;beyond&apos;, &apos;光辉岁月&apos;)</span><br><span class="line">&gt; /4.mp3 beyond 光辉岁月</span><br><span class="line">&gt; &lt;class &apos;str&apos;&gt; &lt;class &apos;tuple&apos;&gt; &lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt; (&apos;/5.mp3&apos;, &apos;陈慧琳&apos;, &apos;记事本&apos;)</span><br><span class="line">&gt; /5.mp3 陈慧琳 记事本</span><br><span class="line">&gt; &lt;class &apos;str&apos;&gt; &lt;class &apos;tuple&apos;&gt; &lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt; (&apos;/6.mp3&apos;, &apos;邓丽君&apos;, &apos;但愿人长久&apos;)</span><br><span class="line">&gt; /6.mp3 邓丽君 但愿人长久</span><br><span class="line">&gt; &lt;class &apos;str&apos;&gt; &lt;class &apos;tuple&apos;&gt; &lt;class &apos;list&apos;&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;\s*?(&lt;a.*?&gt;)?(\w+)(&lt;/a&gt;)?\s*?&lt;/li&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>RESULT:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; [(&apos;&apos;, &apos;一路上有你&apos;, &apos;&apos;), (&apos;&lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&apos;, &apos;沧海一声笑&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&apos;, &apos;往事随风&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;&apos;, &apos;光辉岁月&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;&apos;, &apos;记事本&apos;, &apos;&lt;/a&gt;&apos;), (&apos;&lt;a href=&quot;/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&apos;, &apos;但愿人长久&apos;, &apos;&lt;/a&gt;&apos;)]</span><br><span class="line">&gt; 一路上有你</span><br><span class="line">&gt; 沧海一声笑</span><br><span class="line">&gt; 往事随风</span><br><span class="line">&gt; 光辉岁月</span><br><span class="line">&gt; 记事本</span><br><span class="line">&gt; 但愿人长久</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h3><p>替换字符串中每一个匹配的子串后返回替换后的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is 4567890 a Regex Demo Extra stings'</span></span><br><span class="line">content = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Extra stings Hello  World_This is  a Regex Demo Extra stings</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello | 1234567 |  891011 | World_This is a Regex Demo Extra stings'</span></span><br><span class="line">content = re.sub(<span class="string">'(\d+)'</span>, <span class="string">r'\1 New \1'</span>, content)</span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Extra stings Hello | 1234567 New 1234567 |  891011 New 891011 | World_This is a Regex Demo Extra stings</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = re.sub(<span class="string">'&lt;a.*?&gt;|&lt;/a&gt;'</span>, <span class="string">''</span>, html)</span><br><span class="line">print(html)</span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;(.*?)&lt;/li&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result.strip())</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;div id=&quot;songs-list&quot;&gt;</span><br><span class="line">&gt;     &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;</span><br><span class="line">&gt;     &lt;p class=&quot;introduction&quot;&gt;</span><br><span class="line">&gt;         经典老歌列表</span><br><span class="line">&gt;     &lt;/p&gt;</span><br><span class="line">&gt;     &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;7&quot;&gt;</span><br><span class="line">&gt;             沧海一声笑</span><br><span class="line">&gt;         &lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;</span><br><span class="line">&gt;             往事随风</span><br><span class="line">&gt;         &lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;6&quot;&gt;光辉岁月&lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;5&quot;&gt;记事本&lt;/li&gt;</span><br><span class="line">&gt;         &lt;li data-view=&quot;5&quot;&gt;</span><br><span class="line">&gt;             但愿人长久</span><br><span class="line">&gt;         &lt;/li&gt;</span><br><span class="line">&gt;     &lt;/ul&gt;</span><br><span class="line">&gt; &lt;/div&gt;</span><br><span class="line">&gt; [&apos;一路上有你&apos;, &apos;\n            沧海一声笑\n        &apos;, &apos;\n            往事随风\n        &apos;, &apos;光辉岁月&apos;, &apos;记事本&apos;, &apos;\n            但愿人长久\n        &apos;]</span><br><span class="line">&gt; 一路上有你</span><br><span class="line">&gt; 沧海一声笑</span><br><span class="line">&gt; 往事随风</span><br><span class="line">&gt; 光辉岁月</span><br><span class="line">&gt; 记事本</span><br><span class="line">&gt; 但愿人长久</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h2><p>将一个正则表达式串编译成正则对象，以便于复用该匹配模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo'''</span></span><br><span class="line">pattern = re.compile(<span class="string">'Hello.*Demo'</span>, re.S)</span><br><span class="line">result = re.match(pattern, content)</span><br><span class="line"><span class="comment">#result = re.match('Hello.*Demo', content, re.S)</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>RESULT:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &lt;_sre.SRE_Match object; span=(0, 40), match=&apos;Hello 1234567 World_This\nis a Regex Demo&apos;&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = requests.get(<span class="string">'https://book.douban.com/'</span>).text</span><br><span class="line">pattern = re.compile(<span class="string">'&lt;li.*?cover.*?href="(.*?)".*?title="(.*?)".*?more-meta.*?author"&gt;(.*?)&lt;/span&gt;.*?year"&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;'</span>, re.S)</span><br><span class="line">results = re.findall(pattern, content)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    url, name, author, date = result</span><br><span class="line">    author = re.sub(<span class="string">'\s'</span>, <span class="string">''</span>, author)</span><br><span class="line">    date = re.sub(<span class="string">'\s'</span>, <span class="string">''</span>, date)</span><br><span class="line">    print(url, name, author, date)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>requests</title>
    <url>/2019/03/01/requests/</url>
    <content><![CDATA[<h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><h2 id="GET请求："><a href="#GET请求：" class="headerlink" title="GET请求："></a><strong>GET请求：</strong></h2><p>带参数的url请求：　　　　　　</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data =&#123;<span class="string">'name'</span>:<span class="string">'cheng'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;        <span class="comment">#参数</span></span><br><span class="line">response = requests.get(<span class="string">'https://httpbin.org/get'</span>, params=data)</span><br></pre></td></tr></table></figure>
<p>这样requests会给我们自动build这个网址，查看response.url 这个属性。会得到我们请求的代码</p>
<p>‘<a href="https://httpbin.org/get?name=cheng&amp;age=20&#39;" target="_blank" rel="noopener">https://httpbin.org/get?name=cheng&amp;age=20&#39;</a></p>
<h2 id="解析JSON："><a href="#解析JSON：" class="headerlink" title="解析JSON："></a><strong>解析JSON：</strong></h2><p>requests还提供了一个解析json的方法，用get方法请求 <a href="https://httpbin.org/get，它的返回结果是一个json的字符串，所以我们可以直接调用response.json方法得到。" target="_blank" rel="noopener">https://httpbin.org/get，它的返回结果是一个json的字符串，所以我们可以直接调用response.json方法得到。</a></p>
<p><a href="javascript:void(0" target="_blank" rel="noopener"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a>;)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://httpbin.org/get'</span>)</span><br><span class="line">print(response.json()) <span class="comment">#调用json方法</span></span><br><span class="line">print(json.loads(response.text))</span><br></pre></td></tr></table></figure>
<p>用json.loads把json数据转化字典方法，同样打印输出，发现和response.json()是一样的，其实response.json()就是通过一个json.loads()方法</p>
<h2 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a><strong>获取二进制数据</strong></h2><p>​    <a id="more"></a></p>
<p>Requests 会自动解码来自服务器的内容。大多数 unicode 字符集都能被无缝地解码。请求发出后，Requests 会基于 HTTP 头部对响应的编码作出有根据的推测。当你访问 <code>r.text</code> 之时，Requests 会使用其推测的文本编码。你可以找出 Requests 使用了什么编码，并且能够使用<code>r.encoding</code> 属性来改变它。</p>
<p>response.content()方法可以使你也能以字节的方式访问请求响应体，对于一些图片和视频 音频内容，需要用到content</p>
<p><a href="https://ssl.gstatic.com/ui/v1/icons/mail/rfr/logo_gmail_lockup_default_1x.png" target="_blank" rel="noopener">https://ssl.gstatic.com/ui/v1/icons/mail/rfr/logo_gmail_lockup_default_1x.png</a> 是一张gmail的图片 通过储存content属性就可以获得图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">'https://ssl.gstatic.com/ui/v1/icons/mail/rfr/logo_gmail_lockup_default_1x.png'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'gmail.png'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:   <span class="comment">#注意这边是二进制的写入所以是wb</span></span><br><span class="line">    f.write(response.content)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt="img"> </p>
<p>成功写入了图片</p>
<h2 id="添加headers"><a href="#添加headers" class="headerlink" title="添加headers"></a><strong>添加headers</strong></h2><p>一些网站会检测请求方是不是机器，如果是机器，就不能成功访问，所以要添加headers伪装成浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36'</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">'https://www.zhihu.com/'</span>, headers=headers)</span><br></pre></td></tr></table></figure>
<p>添加上headers后的requests就可以伪装成浏览器了</p>
<p><strong>post请求</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'cheng'</span>, <span class="string">'age'</span>:<span class="number">20</span>&#125;   <span class="comment">#</span></span><br><span class="line">response = requests.post(<span class="string">'https://httpbin.org/post'</span>, data=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p>发送了post请求，返回结果：<br><img src="2.png" alt="img"></p>
<p>可以看到服务器接受了我们post的data，返回了一个json格式的数据.</p>
<h2 id="response常用属性"><a href="#response常用属性" class="headerlink" title="response常用属性"></a><strong>response常用属性</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.cnki.net/old/'</span>)</span><br><span class="line">print(type(response.status_code), response.status_code)</span><br><span class="line">print(type(response.headers), response.status_code)</span><br><span class="line">print(type(response.cookies), response.cookies)</span><br><span class="line">print(type(response.url), response.url)</span><br><span class="line">print(type(response.history), response.history)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<p><img src="3.png" alt="img"></p>
<p>可以看到服务器返回的状态码是int类型的数据，headers是一个字典类型，cookies ，请求的网址是一个字符串类型，history是浏览的历史</p>
<h2 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a><strong>文件上传：</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">file = &#123;<span class="string">'file'</span> :open(<span class="string">'img.jpg'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">response = requests.post(<span class="string">'https://httpbin.org/'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p>返回的结果中有file这个字典键值，对应的是我们上传的文件</p>
<h2 id="cookies："><a href="#cookies：" class="headerlink" title="cookies："></a><strong>cookies：</strong></h2><p>response.cookies是一个字典的形式，我们可以通过for循环把他们print出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">print(response)</span><br><span class="line">print(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    print(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="4.png" alt="img"></p>
<h2 id="会话维持——session"><a href="#会话维持——session" class="headerlink" title="会话维持——session"></a><strong>会话维持——session</strong></h2><p>模拟登陆 </p>
<p>普通的get方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'https://httpbin.org/cookies/set/number/123456'</span>)</span><br><span class="line">response = requests.get(<span class="string">'https://httpbin.org/cookies'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p>这里，我们第一次请求网站，设置cookies，当第二次请求是，返回结果是：</p>
<p><img src="5.png" alt="img"></p>
<p>可以看到第二次请求的cookies是空，原因是我们发起了两次请求，这两个请求是完全独立的过程，他们两个是没有相关性的，可以把他们想象成用两个浏览器分别访问，相当于模拟了一个会话。</p>
<p>用session请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.session()</span><br><span class="line">s.get(<span class="string">'https://httpbin.org/cookies/set/number/123456'</span>)</span><br><span class="line">response = s.get(<span class="string">'https://httpbin.org/cookies'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="6.png" alt="img"></p>
<p>可以看到第二次请求的返回值就是第一次设置的值，可以把他们看作一个浏览器先后发出了请求,会话对象让你能够跨请求保持某些参数</p>
<h2 id="证书验证："><a href="#证书验证：" class="headerlink" title="证书验证："></a><strong>证书验证：</strong></h2><p>有些网站访问时会出现证书错误的情况：</p>
<p>有两种方式可以解决：</p>
<p>一种是修改requests中的varify参数，使他为false：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.12306.cn'</span>, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<p>这样访问时会自动忽略网站的证书。但是requests还是用生成warning，提醒你证书是不安全的我们导入urllib3模块，用disable_warnings()方法</p>
<p>第二种是直接指定一个证书：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.12306.cn'</span>, cert(<span class="string">'path/server'</span>))</span><br></pre></td></tr></table></figure>
<h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a><strong>代理设置</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://127.0.0.1:13386'</span>,</span><br><span class="line">    <span class="string">'http'</span>:<span class="string">'https://127.0.0.1:12345'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">'https://www.google.com/?hl=zh_cn'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure>
<h2 id="直接添加一个proxies的字典就行"><a href="#直接添加一个proxies的字典就行" class="headerlink" title="直接添加一个proxies的字典就行"></a>直接添加一个proxies的字典就行</h2><p>当代理有密码时，只要在修改values值，添加上用户名和密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://user:password@127.0.0.1:13386'</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">'https://www.google.com/'</span>,proxies=proxies)</span><br></pre></td></tr></table></figure>
<p>如果是shadowsocks可以 pip install requests[socks] 然后将proxies修改成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5:330330://127.0.0.1:13386'</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure>
<h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a><strong>超时设置</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>, timeout=<span class="number">0.2</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>限制了响应时间，如果大于0.2秒，会抛出异常</p>
<h2 id="认证设置"><a href="#认证设置" class="headerlink" title="认证设置"></a><strong>认证设置</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">response = requests.get(url, auth=HTTPBasicAuth(<span class="string">'usr'</span>,<span class="string">'password'</span>))</span><br><span class="line">response = requests.get(url, auth=&#123;<span class="string">'user'</span>:<span class="string">'12345'</span>&#125;)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure>
<p>这样的两种auth属性都行</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><strong>异常处理</strong></h2><ul>
<li><p>exception requests.RequestException(*args, **kwargs)[源代码]¶<br>There was an ambiguous exception that occurred while handling your request.</p>
</li>
<li><p>exception requests.ConnectionError(*args, **kwargs)[源代码]<br>A Connection error occurred.</p>
</li>
<li><p>exception requests.HTTPError(*args, **kwargs)[源代码]<br>An HTTP error occurred.</p>
</li>
<li><p>exception requests.URLRequired(*args, **kwargs)[源代码]<br>A valid URL is required to make a request.</p>
</li>
<li><p>exception requests.TooManyRedirects(*args, **kwargs)[源代码]<br>Too many redirects.</p>
</li>
<li><p>exception requests.ConnectTimeout(*args, **kwargs)[源代码]<br>The request timed out while trying to connect to the remote server.<br>Requests that produced this error are safe to retry.</p>
</li>
<li><p>exception requests.ReadTimeout(*args, **kwargs)[源代码]<br>The server did not send any data in the allotted amount of time.</p>
</li>
<li><p>exception requests.Timeout(*args, **kwargs)[源代码]<br>The request timed out.<br>Catching this error will catch both ConnectTimeout and ReadTimeout errors.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>vimcmd</title>
    <url>/2019/02/17/vimcmd/</url>
    <content><![CDATA[<p> <strong><img src="1.png" alt="img"></strong></p>
<p><strong><img src="2.png" alt="img"></strong></p>
<p>### </p>
<p><strong>vim 选择文本，删除，复制，粘贴</strong>  </p>
<p>文本的选择，对于编辑器来说，是很基本的东西，也经常被用到，总结如下：</p>
<p>v    从光标当前位置开始，光标所经过的地方会被选中，再按一下v结束。 </p>
<p>V    从光标当前行开始，光标经过的行都会被选中，再按一下Ｖ结束。 </p>
<p>Ctrl + v   从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束。 </p>
<p>ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾</p>
<p>选中后就可以用编辑命令对其进行编辑，如<br>d   删除 </p>
<p>y   复制 （默认是复制到”寄存器） </p>
<p>p  粘贴 （默认从”寄存器取出内容粘贴） </p>
<p>“+y    复制到系统剪贴板(也就是vim的+寄存器） </p>
<p>“+p   从系统剪贴板粘贴 </p>
<p><strong>vim命令总结</strong></p>
<p>1.删除字符<br>  要删除一个字符，只需要将光标移到该字符上按下”x”。</p>
<p>2.删除一行<br>  删除一整行内容使用”dd”命令。删除后下面的行会移上来填补空缺。</p>
<p>3.删除换行符<br>  在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是”J”。</p>
<p>4.撤销<br>  如果你误删了过多的内容。显然你可以再输入一遍，但是命令”u” 更简便，它可以撤消上一次的操作。</p>
<p>5.重做:<br>  如果你撤消了多次，你还可以用CTRL-R(重做)来反转撤消的动作。换句话说，它是对撤消的撤消。撤消命令还有另一种形式，”U”命令，它一次撤消对一行的全部操作。第二次使用该命令则会撤消前一个”U”的操作。用”u”和CTRL-R你可以找回任何一个操作状态。</p>
<p>6.追加<br>  “i”命令可以在当前光标之前插入文本。<br>  “a”命令可以在当前光标之后插入文本。<br>  “o”命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。<br>  “O”命令(注意是大写的字母O)将在当前行的上面另起一行。</p>
<p>7.使用命令计数<br>  假设你要向上移动9行。这可以用”kkkkkkkkk”或”9k”来完成。事实上，很多命令都可以接受一个数字作为重复执行同一命令的次数。比如刚才的例子，要在行尾追加三个感叹号，当时用的命令是”a!!!”。另一个办法是用”3a!”命令。3说明该命令将被重复执行3次。同样，删除3个字符可以用”3x”。指定的数字要紧挨在它所要修饰的命令前面。</p>
<p>8.退出<br>  要退出Vim，用命令”ZZ”。该命令保存当前文件并退出Vim。</p>
<p>9.放弃编辑<br>  丢弃所有的修改并退出，用命令”:q!”。用”:e!”命令放弃所有修改并重新载入该文件的原始内容。</p>
<p>10.以Word为单位的移动<br>  使用”w”命令可以将光标向前移动一个word的首字符上；比如”3w”将光标向前移动3个words。”b”命令则将光标向后移动到前一个word的首字符上。<br>  “e”命令会将光标移动到下一个word的最后一个字符。命令”ge”，它将光标移动到前一个word的最后一个字符上。、</p>
<p>11.移动到行首或行尾<br>  “$”命令将光标移动到当前行行尾。如果你的键盘上有一个键，它的作用也一样。”^”命令将光标移动到当前行的第一个非空白字符上。”0”命令则总是把光标移动到当前行的第一个字符上。键也是如此。”$”命令还可接受一个计数，如”1$”会将光标移动到当前行行尾，”2$”则会移动到下一行的行尾，如此类推。”0”命令却不能接受类似这样的计数，命令”^”前加上一个计数也没有任何效果。</p>
<p>12.移动到指定字符上<br>  命令”fx”在当前行上查找下一个字符x（向右方向），可以带一个命令计数”F”命令向左方向搜索。”tx”命令形同”fx”命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示：”t”意为”To”。该命令的反方向版是”Tx”。这4个命令都可以用”;”来重复。以”,”也是重复同样的命令，但是方向与原命令的方向相反。</p>
<p>13.以匹配一个括号为目的移动<br>  用命令”%”跳转到与当前光标下的括号相匹配的那一个括号上去。如果当前光标在”(“上，它就向前跳转到与它匹配的”)”上，如果当前在”)”上，它就向后自动跳转到匹配的”(“上去.</p>
<p>14.移动到指定行<br>  用”G”命令指定一个命令计数，这个命令就会把光标定位到由命令计数指定的行上。比如”33G”就会把光标置于第33行上。没有指定命令计数作为参数的话, “G”会把光标定位到最后一行上。”gg”命令是跳转到第一行的快捷的方法。<br>  另一个移动到某行的方法是在命令”%”之前指定一个命令计数比如”50%”将会把光标定位在文件的中间. “90%”跳到接近文件尾的地方。<br>  命令”H”,”M”,”L”,分别将光标跳转到第一行，中间行，结尾行部分。</p>
<p>15.告诉你当前的位置<br>  使用CTRL-G命令。”set number”在每行的前面显示一个行号。相反关闭行号用命令”:set nonumber”。”:set ruler”在Vim窗口的右下角显示当前光标位置。</p>
<p>16.滚屏<br>  CTRL-U显示文本的窗口向上滚动了半屏。CTRL-D命令将窗口向下移动半屏。一次滚动一行可以使用CTRL-E(向上滚动)和CTRL-Y(向下滚动)。要向前滚动一整屏使用命令CTRL-F。另外CTRL-B是它的反向版。”zz”命令会把当前行置为屏幕正中央，”zt”命令会把当前行置于屏幕顶端，”zb”则把当前行置于屏幕底端.</p>
<p>17.简单搜索<br>  “/string”命令可用于搜索一个字符串。要查找上次查找的字符串的下一个位置,使用”n”命令。如果你知道你要找的确切位置是目标字符串的第几次出现，还可以在”n”之前放置一个命令计数。”3n”会去查找目标字符串的第3次出现。<br>  “?”命令与”/“的工作相同，只是搜索方向相反.”N”命令会重复前一次查找，但是与最初用”/“或”?”指定的搜索方向相反。<br>  如果查找内容忽略大小写，则用命令”set ignorecase”, 返回精确匹配用命令”set noignorecase” 。</p>
<p>18.在文本中查找下一个word<br>  把光标定位于这个word上然后按下”<em>“键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。”#”命令是”</em>“的反向版。还可以在这两个命令前加一个命令计数:”3*”查找当前光标下的word的第三次出现。</p>
<p>19.查找整个word<br>  如果你用”/the”来查找Vim也会匹配到”there”。要查找作为独立单词的”the”使用如下命令：”/the>“。”>“是一个特殊的记法，它只匹配一个word的结束处。近似地，”\&lt;”匹配到一个word的开始处。这样查找作为一个word的”the”就可以用:”/\”。</p>
<p>20.高亮显示搜索结果<br>  开启这一功能用”:set hlsearch”，关闭这一功能：”:set nohlsearch”。如果只是想去掉当前的高亮显示，可以使用下面的命令：”:nohlsearch”(可以简写为noh)。</p>
<p>21.匹配一行的开头与结尾<br>   ^ 字符匹配一行的开头。$字符匹配一行的末尾。<br>   所以”/was$”只匹配位于一行末尾的单词was，所以”/^was”只匹配位于一行开始的单词was。</p>
<p>22.匹配任何的单字符<br>  .这个字符可以匹配到任何字符。比如”c.m”可以匹配任何前一个字符是c，后一个字符是m的情况，不管中间的字符是什么。</p>
<p>23.匹配特殊字符<br>  放一个反斜杠在特殊字符前面。如果你查找”ter。”，用命令”/ter\。”</p>
<p>24.使用标记<br>  当你用”G”命令从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用命令” <code>&quot;可以使你跳回到刚才的出发点。</code>命令可以在两点之间来回跳转。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older). CTRL-I则是跳回到后来停置光标的更新的位置(提示：I在键盘上位于O前面)。<br>    注:使用CTRL-I 与按下键一样。</p>
<p>25.具名标记<br>   命令”ma”将当前光标下的位置名之为标记”a”。从a到z一共可以使用26个自定义的标记。要跳转到一个你定义过的标记，使用命令” <code>marks &quot;marks就是定义的标记的名字。命令&quot; &#39;a &quot;使你跳转到a所在行的行首，&quot;</code>a “会精确定位a所在的位置。命令：”:marks”用来查看标记的列表。<br>  命令delm！删除所有标记。</p>
<p>26.操作符命令和位移<br>  “dw”命令可以删除一个word，”d4w”命令是删除4个word，依此类推。类似有”d2e”、”d$”。此类命令有一个固定的模式：操作符命令+位移命令。首先键入一个操作符命令。比如”d”是一个删除操作符。接下来是一个位移命。比如”w”。这样任何移动光标命令所及之处，都是命令的作用范围。</p>
<p>27.改变文本<br>  操作符命令是”c”，改变命令。它的行为与”d”命令类似，不过在命令执行后会进入Insert模式。比如”cw”改变一个word。或者，更准确地说，它删除一个word并让你置身于Insert模式。<br>  “cc”命令可以改变整行。不过仍保持原来的缩进。<br>  “c$”改变当前光标到行尾的内容。<br>  快捷命令：x 代表dl(删除当前光标下的字符)<br>            X 代表dh(删除当前光标左边的字符)<br>            D 代表d$(删除到行尾的内容)<br>            C 代表c$(修改到行尾的内容)<br>            s 代表cl(修改一个字符)<br>            S 代表cc(修改一整行)<br>  命令”3dw”和”d3w”都是删除3个word。第一个命令”3dw”可以看作是删除一个word的操作执行3次；第二个命令”d3w”是一次删除3个word。这是其中不明显的差异。事实上你可以在两处都放上命令记数，比如，”3d2w”是删除两个word，重复执行3次，总共是6个word。</p>
<p>28.替换单个字符<br>  “r”命令不是一个操作符命令。它等待你键入下一个字符用以替换当前光标下的那个字符。”r”命令前辍以一个命令记数是将多个字符都替换为即将输入的那个字符。要把一个字符替换为一个换行符使用”r”。它会删除一个字符并插入一个换行符。在此处使用命令记数只会删除指定个数的字符：”4r”将把4个字符替换为一个换行符。</p>
<p>29.重复改动<br>  “.”命令会重复上一次做出的改动。”.”命令会重复你做出的所有修改，除了”u”命令CTRL-R和以冒号开头的命令。”.”需要在Normal模式下执行，它重复的是命令，而不是被改动的内容，</p>
<p>30.Visual模式<br>  按”v”可以进入Visual模式。移动光标以覆盖你想操纵的文本范围。同时被选中的文本会以高亮显示。最后键入操作符命令。</p>
<p>31.移动文本<br>  以”d”或”x”这样的命令删除文本时，被删除的内容还是被保存了起来。你还可以用p命令把它取回来。”P”命令是把被去回的内容放在光标之前，”p”则是放在光标之后。对于以”dd”删除的整行内容，”P”会把它置于当前行的上一行。”p”则是至于当前行的后一行。也可以对命令”p”和”P”命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来”dd”之后的”3p”就可以把被删除行的3 份副本放到当前位置。<br>  命令”xp”将光标所在的字符与后一个字符交换。</p>
<p><strong>32.**</strong>复制文本（VIM编辑器内复制）**<br>  “y”操作符命令会把文本复制到一个寄存器3中。然后可以用”p”命令把它取回。因为”y”是一个操作符命令，所以你可以用”yw”来复制一个word. 同样可以使用命令记数。如下例中用”y2w”命令复制两个word，”yy”命令复制一整行，”Y”也是复制整行的内容，复制当前光标至行尾的命令是”y$”。</p>
<p>33.文本对象<br>  “diw” 删除当前光标所在的word(不包括空白字符) “daw” 删除当前光标所在的word(包括空白字符)</p>
<p>34.快捷命令<br>  x 删除当前光标下的字符(“dl”的快捷命令)<br>  X 删除当前光标之前的字符(“dh”的快捷命令)<br>  D 删除自当前光标至行尾的内容(“d$”的快捷命令)<br>  dw 删除自当前光标至下一个word的开头<br>  db 删除自当前光标至前一个word的开始<br>  diw 删除当前光标所在的word(不包括空白字符)<br>  daw 删除当前光标所在的word(包括空白字符)<br>  dG 删除当前行至文件尾的内容<br>  dgg 删除当前行至文件头的内容<br>  如果你用”c”命令代替”d”这些命令就都变成更改命令。使用”y”就是yank命令，如此类推。</p>
<p>35.编辑另一个文件<br>  用命令”:edit foo.txt”，也可简写为”:e foo.txt”。</p>
<p>36.文件列表<br>  可以在启动Vim时就指定要编辑多个文件，用命令”vim one.c two.c three.c”。Vim将在启动后只显示第一个文件，完成该文件的编辑后，可以用令：”:next”或”:n”要保存工作成果并继续下一个文件的编辑，命令：”:wnext”或”:wn”可以合并这一过程。</p>
<p>37.显示当前正在编辑的文件<br>  用命令”:args”。</p>
<p>38.移动到另一个文件<br>  用命令”:previous” “:prev”回到上一个文件,合并保存步骤则是”:wprevious” “:wprev”。要移到最后一个文件”:last”,到第一个”:first”.不过没有”:wlast”或者”:wfirst”这样的命令。可以在”:next”和”:previous”命令前面使用一个命令计数。</p>
<p>39.编辑另一个文件列表<br>  不用重新启动Vim，就可以重新定义一个文件列表。命令”:args five.c six.c seven.h”定义了要编辑的三个文件。</p>
<p>39.自动存盘<br>  命令”:set autowrite”,”set aw”。自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行。<br>  命令”:set autowriteall”,”set awa”。和 ‘autowrite’ 类似，但也适用于”:edit”、”:enew”、”:quit”、”:qall”、”:exit”、”:xit”、”:recover” 和关闭 Vim 窗口。置位本选项也意味着 Vim 的行为就像打开 ‘autowrite’ 一样。</p>
<p>40.切换到另一文件<br>  要在两个文件间快速切换，使用CTRL-^。</p>
<p>41.文件标记<br>  以大写字母命名的标记。它们是全局标记，它们可以用在任何文件中。比如，正在编辑”fab1.<a href="http://lib.csdn.net/base/javaee" target="_blank" rel="noopener">Java</a>“,用命令”50%mF”在文件的中间设置一个名为F的标记。然后在”fab2.java”文件中，用命令”GnB”在最后一行设置名为B的标记。在可以用”F”命令跳转到文件”fab1.java”的半中间。或者编辑另一个文件，”‘B”命令会再把你带回文件”fab2.java”的最后一行。<br>  要知道某个标记所代表的位置是什么，可以将该标记的名字作为”marks”命令的参数”:marks M”或者连续跟上几个参数”:marks MJK”<br>  可以用CTRL-O和CTRL-I可以跳转到较早的位置和靠后的某位置。</p>
<p>42.查看文件<br>  仅是查看文件，不向文件写入内容，可以用只读形式编辑文件。用命令：<br>vim -R file。如果是想强制性地避免对文件进行修改，可以用命令：<br>vim -M file。</p>
<p>43.更改文件名<br>  将现有文件存成新的文件，用命令”:sav(eas) move.c”。如果想改变当前正在编辑的文件名，但不想保存该文件，就可以用命令：”:f(ile) move.c”。</p>
<p>44.分割一个窗口<br>  打开一个新窗口最简单的办法就是使用命令：”:split”。CTRL-W 命令可以切换当前活动窗口。</p>
<p>45.关闭窗口<br>  用命令：”close”.可以关闭当前窗口。实际上,任何退出文件编辑的命令”:quit”和”ZZ”都会关闭窗口，但是用”:close”可以阻止你关闭最后一个Vim，以免以意外地整个关闭了Vim。</p>
<p>46.关闭除当前窗口外的所有其他窗口<br>  用命令：”:only”,关闭除当前窗口外的所有其它窗口。如果这些窗口中有被修改过的，你会得到一个错误信息，同时那个窗口会被留下来。</p>
<p>47.为另一个文件分隔出一个窗口<br>  命令”:split two.c”可以打开第二个窗口同时在新打开的窗口中开始编辑作为<br>参数的文件。如果要打开一个新窗口并开始编辑一个空的缓冲区，使用命令:”:new”。</p>
<p>48.垂直分割<br>  用命令”:vsplit或：:vsplit two.c”。同样有一个对应的”:vnew”命令，用于垂直分隔窗口并在其中打开一个新的空缓冲区。</p>
<p>49.切换窗口<br>  CTRL-W h 到左边的窗口<br>  CTRL-W j 到下面的窗口<br>  CTRL-W k 到上面的窗口<br>  CTRL-W l 到右边的窗口<br>  CTRL-W t 到顶部窗口<br>  CTRL-W b 到底部窗口</p>
<p>50.针对所有窗口操作的命令<br>  “:qall”放弃所有操作并退出，”:wall”保存所有，”:wqall”保存所有并退出。</p>
<p>51.为每一个文件打开一个窗口<br>  使用”-o”选项可以让Vim为每一个文件打开一个窗口：<br>“vim -o one.txt two.txt three.txt”。</p>
<p>52.使用vimdiff查看不同<br>  “vimdiff main.c~ main.c”,另一种进入diff模式的办法可以在Vim运行中操作。编辑文件”main.c”，然后打开另一个分隔窗口显示其不同:<br>  “:edit main.c”<br>  “:vertical diffpatch main.c.diff”。<br>53.页签<br>   命令”:tabe(dit) thatfile”在一个窗口中打开”thatfile”，该窗口占据着整个的Vim显示区域。命令”:tab split/new”结果是新建了一个拥有一个窗口的页签。以用”gt”命令在不同的页签间切换。</p>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
  </entry>
  <entry>
    <title>django-vuejs-api-views</title>
    <url>/2019/01/02/django-vuejs-api-views/</url>
    <content><![CDATA[<h3 id="Translation-Table"><a href="#Translation-Table" class="headerlink" title="Translation Table"></a>Translation Table</h3><table>
<thead>
<tr>
<th style="text-align:left">English</th>
<th style="text-align:right">Chinese</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">front-end</td>
<td style="text-align:right">前端</td>
</tr>
<tr>
<td style="text-align:left">back-end</td>
<td style="text-align:right">后端</td>
</tr>
<tr>
<td style="text-align:left">pagination</td>
<td style="text-align:right">分页</td>
</tr>
<tr>
<td style="text-align:left">tweaking</td>
<td style="text-align:right">拧（这里应该是修改的意思）</td>
</tr>
<tr>
<td style="text-align:left">queries</td>
<td style="text-align:right">查询</td>
</tr>
<tr>
<td style="text-align:left">Decimal</td>
<td style="text-align:right">十进制</td>
</tr>
<tr>
<td style="text-align:left">querysets</td>
<td style="text-align:right">查询集</td>
</tr>
</tbody>
</table>
<h2 id="Building-a-Modern-Web-Application-with-Django-REST-Framework-and-Vue-Building-Views-and-REST-API"><a href="#Building-a-Modern-Web-Application-with-Django-REST-Framework-and-Vue-Building-Views-and-REST-API" class="headerlink" title="Building a Modern Web Application with Django REST Framework and Vue: Building Views and REST API"></a>Building a Modern Web Application with Django REST Framework and Vue: Building Views and REST API</h2><p>Throughout this part of these tutorial series you will continue developing a CRUD (Create, Read, Update and Delete) application with a restful API  <u>back-end</u> and a Vue  <u>front-end</u> using Django, Django REST framework and Vue (with Axios as an HTTP client). In this part you’ll specifically build the REST API and the front-end views to consume and display data from the API endpoints. You will also see how to integrate your Vue application with your Django back-end in production. As always you can find the source code of the demo project in this <a href="https://github.com/techiediaries/django-auth0-vue" target="_blank" rel="noopener">Github repository</a>.</p>
<p>You can check the second article from this <a href="https://www.techiediaries.com/django-vuejs-auth0" target="_blank" rel="noopener">link</a></p>
<ul>
<li>Building the REST API: You will create a simple REST API around one model (<em>Product</em>) with DRF(Django REST Framework) and learn how to add <u>pagination</u> to your APIs.</li>
<li>Creating the Service to Consume the API: You will create the class that interfaces with your API using Axios.</li>
<li>Creating the Front End Views: You will create different views and routes for the Vue application and see how you can protect some routes from non authenticated users.</li>
<li>Getting Ready for Production: Finally you’ll prepare your app for production by tweaking some settings in Vue and Django parts.</li>
</ul>
<h3 id="Building-the-REST-API"><a href="#Building-the-REST-API" class="headerlink" title="Building the REST API"></a>Building the REST API</h3><p>Django REST framework is a powerful and easy to use package for building Web APIs.</p>
<p>Let’s get started by building a simple REST API using Django REST framework.</p>
<a id="more"></a>
<h3 id="Adding-the-Product-Model"><a href="#Adding-the-Product-Model" class="headerlink" title="Adding the Product Model"></a>Adding the Product Model</h3><p>Django has a powerful ORM (Object Relational Mapper) that allows you to work with multiple database management systems without actually writing any SQL. All you need to do is to define models in Python classes and Django will take care of mapping Python classes to SQL <u>queries</u>.</p>
<p>The API is built around a simple product model so continuing with the project you’ve built in the previous part open the <code>catalog/models.py</code> file then add the following model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    sku = models.CharField(max_length=<span class="number">13</span>,help_text=<span class="string">"Enter Stock Keeping Unit"</span>)    </span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>, help_text=<span class="string">"Enter product name"</span>)</span><br><span class="line">    description = models.TextField(help_text=<span class="string">"Enter product description"</span>)</span><br><span class="line"></span><br><span class="line">    buyPrice = models.DecimalField(decimal_places=<span class="number">2</span>, max_digits=<span class="number">20</span>,help_text=<span class="string">"Enter product price per unit"</span>)</span><br><span class="line">    sellPrice = models.DecimalField(decimal_places=<span class="number">2</span>, max_digits=<span class="number">20</span>,help_text=<span class="string">"Enter product price per unit"</span>)</span><br><span class="line"></span><br><span class="line">    unit = models.CharField(max_length=<span class="number">10</span>,help_text=<span class="string">"Enter product unit"</span>)</span><br><span class="line"></span><br><span class="line">    quantity = models.DecimalField(decimal_places=<span class="number">1</span>, max_digits=<span class="number">20</span>,help_text=<span class="string">"Enter quantity"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_absolute_url</span><span class="params">(self)</span>:</span></span><br><span class="line">         <span class="string">"""</span></span><br><span class="line"><span class="string">         Returns the url to access a particular instance of Product.</span></span><br><span class="line"><span class="string">         """</span></span><br><span class="line">         <span class="keyword">return</span> reverse(<span class="string">'product-detail-view'</span>, args=[str(self.id)])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.sku</span><br></pre></td></tr></table></figure>
<p>This is a Python class that extends the special Django class <em>Model</em> which is imported from the <code>django.db.models</code> built-in package. Every Django model needs to extends the <em>Model</em>class. You then specify the model fields using classes like <em>CharField</em>, <em>TextField</em> and <em>DecimalField</em> etc.</p>
<p>Now you need to migrate your database to add the new changes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>Next let’s add some seed data using a data migration</p>
<p>So first make an empty migration by running the following command:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations catalog --empty</span><br></pre></td></tr></table></figure>
<p>Next open your migration file in your app migrations folder (<code>catalog/migrations</code>) then create a function that will executed by the <code>RunPython()</code> method when you apply your migration</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_data</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    Product = apps.get_model(<span class="string">'catalog'</span>, <span class="string">'Product'</span>)</span><br><span class="line">    Product(sku=<span class="string">'sku1'</span>,name=<span class="string">'Product 1'</span>, description=<span class="string">'Product 1'</span>, buyPrice=<span class="number">100</span> , sellPrice=<span class="number">100</span>,unit=<span class="string">'kilogram'</span>, quantity=<span class="number">100</span>).save()</span><br><span class="line">    <span class="comment">##...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'catalog'</span>, <span class="string">'0001_initial'</span>),</span><br><span class="line">    ]</span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(create_data),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<p>You can then migrate your database to create the initial data</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h3 id="Adding-the-Serializer-Class"><a href="#Adding-the-Serializer-Class" class="headerlink" title="Adding the Serializer Class"></a>Adding the Serializer Class</h3><p>From <a href="http://www.django-rest-framework.org/api-guide/serializers/" target="_blank" rel="noopener">Django REST framework docs</a> here is the definition of a serializer</p>
<blockquote>
<p><em>Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON, XML or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data.</em></p>
</blockquote>
<blockquote>
<p>Serializers允许将复杂数据（如查询集和模型实例）转换为Python数据类型，然后可以轻松地将其呈现为JSON，XML或其他内容类型。 序列化程序还提供反序列化，允许在首次验证传入数据后将解析后的数据转换回复杂类型。</p>
</blockquote>
<p>Create a <code>serializers.py</code> file inside your the <em>catalog</em> app folder then add the following code to create a serializer class for the product model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Product</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Product </span><br><span class="line">        fields = (<span class="string">'pk'</span>,<span class="string">'sku'</span>, <span class="string">'name'</span>, <span class="string">'description'</span>, <span class="string">'buyPrice'</span>,<span class="string">'sellPrice'</span>,<span class="string">'unit'</span>,<span class="string">'quantity'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Adding-the-API-Views"><a href="#Adding-the-API-Views" class="headerlink" title="Adding the API Views"></a>Adding the API Views</h3><p>After adding the database model and the serializer class and also some seed data the next thing is to create the API views that will be responsible for creating, updating, deleting and fetching data from the database and send it back to users as JSON database when users request the appropriate API endpoint so go ahead and open the <code>catalog/views.py</code> file then start by adding the following imports</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Product </span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>This code imports different classes from DRF package, paginator classes to add pagination and then the Product model and its serializer class.</p>
<h3 id="Adding-the-Product-List-Create-API-View"><a href="#Adding-the-Product-List-Create-API-View" class="headerlink" title="Adding the Product List/Create API View"></a>Adding the Product List/Create API View</h3><p>In your <code>catalog/views.py</code> add the following view function which can process either GET or POST requests to either return paginated list of products or create a product.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api_view(['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List  products, or create a new product.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        data = []</span><br><span class="line">        nextPage = <span class="number">1</span></span><br><span class="line">        previousPage = <span class="number">1</span></span><br><span class="line">        products = Product.objects.all()</span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">        paginator = Paginator(products, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = paginator.page(page)</span><br><span class="line">        <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">            data = paginator.page(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> EmptyPage:</span><br><span class="line">            data = paginator.page(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">        serializer = ProductSerializer(data,context=&#123;<span class="string">'request'</span>: request&#125; ,many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">if</span> data.has_next():</span><br><span class="line">            nextPage = data.next_page_number()</span><br><span class="line">        <span class="keyword">if</span> data.has_previous():</span><br><span class="line">            previousPage = data.previous_page_number()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'data'</span>: serializer.data , <span class="string">'count'</span>: paginator.count, <span class="string">'numpages'</span> : paginator.num_pages, <span class="string">'nextlink'</span>: <span class="string">'/api/products/?page='</span> + str(nextPage), <span class="string">'prevlink'</span>: <span class="string">'/api/products/?page='</span> + str(previousPage)&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        serializer = ProductSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure>
<p>This function first checks if it’s a GET or POST request then preforms the processing based on the type of the request:</p>
<ul>
<li>If it’s a GET request, the function retrieves the page number from the GET request or use the first page by default if no page is submitted then retrieves the request page of products, serialize it and return it back alongside with other information such as the next page and previous page links.</li>
<li>If it’s a POST request, the function creates the product based on the POST data.</li>
</ul>
<h3 id="Adding-the-Product-Detail-API-View"><a href="#Adding-the-Product-Detail-API-View" class="headerlink" title="Adding the Product Detail API View"></a>Adding the Product Detail API View</h3><p>Now you need to add the view function that will be responsible for getting, updating or deleting a single product by <em>id</em> depending on the type of the HTTP request (GET, PUT or DELETE).</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a product instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        product = Product.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Product.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        serializer = ProductSerializer(product,context=&#123;<span class="string">'request'</span>: request&#125;)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</span><br><span class="line">        serializer = ProductSerializer(product, data=request.data,context=&#123;<span class="string">'request'</span>: request&#125;)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        product.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>正则化方法小结</title>
    <url>/2018/12/31/%E6%AD%A3%E5%88%99%E5%8C%96%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>  在总结正则化（Regularization）之前，我们先谈一谈正则化是什么，为什么要正则化。</p>
<p>  个人认为正则化这个字眼有点太过抽象和宽泛，<strong>其实正则化的本质很简单，就是对某一问题加以先验的限制或约束以达到某种特定目的的一种手段或操作。在算法中使用正则化的目的是防止模型出现过拟合</strong>。一提到正则化，很多同学可能马上会想到常用的L1范数和L2范数，在汇总之前，我们先看下LP范数是什么鬼。</p>
<h3 id="LP范数"><a href="#LP范数" class="headerlink" title="LP范数"></a>LP范数</h3><p>  范数简单可以理解为用来表征向量空间中的距离，而距离的定义很抽象，只要满足<strong>非负、自反、三角不等式</strong>就可以称之为距离。</p>
<p>  <code>LP</code>范数不是一个范数，而是一组范数，其定义如下：</p>
<p><img src="1.png" alt="1"></p>
<p>  <code>p</code>的范围是[1, +∞],<strong><code>p</code>在(0,1)范围内定义的并不是范数，因为违反了三角不等式。</strong></p>
<a id="more"></a>
<p>根据p的变化，范数也有着不同的变化，借用一个经典的有关P范数的变化图如下：</p>
<p><img src="2.png" alt="1"></p>
<p>  上图表示了<code>p</code>从<code>0</code>到正无穷变化时，单位球（unit ball）的变化情况。在P范数下定义的单位球都是凸集，但是当0&lt;p&lt;1时，该定义下的单位球不是凸集（这个我们之前提过，当0&lt;p&lt;1时并不是范数）。</p>
<p>那问题来了，<code>L0</code>范数是啥玩意？</p>
<p><code>L0</code>范数表示向量中非零元素的个数，用公式表示如下：</p>
<p><img src="3.png" alt="3"></p>
<p>  我们可以通过最小化<code>L0</code>范数，来寻找最少最优的稀疏特征项。但不幸的是，<code>L0</code>范数的最优化问题是一个<code>NP hard</code>问题（<code>L0</code>范数同样是非凸的）。因此，在实际应用中我们经常对<code>L0</code>进行凸松弛，理论上有证明，<code>L1</code>范数是<code>L0</code>范数的最优凸近似，因此通常使用<code>L1</code>范数来代替直接优化<code>L0</code>范数。</p>
<h3 id="L1范数"><a href="#L1范数" class="headerlink" title="L1范数"></a>L1范数</h3><p>  根据<code>LP</code>范数的定义我们可以很轻松的得到<code>L1</code>范数的数学形式：</p>
<p><img src="4.png" alt="4"></p>
<p>  通过上式可以看到，<code>L1</code>范数就是向量各元素的绝对值之和，也被称为是”<strong>稀疏规则算子</strong>“（Lasso regularization）。那么问题来了，为什么我们希望稀疏化？稀疏化有很多好处，最直接的两个：</p>
<ul>
<li>特征选择</li>
<li>可解释性</li>
</ul>
<h3 id="L2范数"><a href="#L2范数" class="headerlink" title="L2范数"></a>L2范数</h3><p>  <code>L2</code>范数是我们最熟悉的，它就是欧几里得距离，公式如下：</p>
<p><img src="5.png" alt="5"></p>
<p>  <code>L2</code>范数有很多名称，有人把它的回归叫“<strong>岭回归</strong>”（Ridge Regression），也有人叫它“<strong>权值衰减</strong>”（Weight Decay）。<strong>以<code>L2</code>范数作为正则项可以得到稠密解，即每个特征对应的参数w都很小，接近于0但是不为0</strong>；此外，<code>L2</code>范数作为正则化项，<strong>可以防止模型为了迎合训练集而过于复杂造成过拟合的情况，从而提高模型的泛化能力</strong>。</p>
<h3 id="L1范数和L2范数的区别"><a href="#L1范数和L2范数的区别" class="headerlink" title="L1范数和L2范数的区别"></a>L1范数和L2范数的区别</h3><p>  引入<code>PRML</code>一个经典的图来说明下<code>L1</code>和<code>L2</code>范数的区别，如下图所示：</p>
<p><img src="1.jpg" alt="1"></p>
<p>  如上图所示，蓝色的圆圈表示问题可能的解范围，橘色的表示正则项可能的解范围。而整个目标函数（原问题+正则项）有解当且仅当两个解范围相切。从上图可以很容易地看出，由于<code>L2</code>范数解范围是圆，所以相切的点有很大可能不在坐标轴上，而由于<code>L1</code>范数是菱形（顶点是凸出来的），其相切的点更可能在坐标轴上，而坐标轴上的点有一个特点，其只有一个坐标分量不为零，其他坐标分量为零，即是稀疏的。所以有如下结论，<code>L1</code>范数可以导致稀疏解，<code>L2</code>范数导致稠密解。</p>
<p>从贝叶斯先验的角度看，当训练一个模型时，仅依靠当前的训练数据集是不够的，为了实现更好的泛化能力，往往需要加入先验项，而加入正则项相当于加入了一种先验。</p>
<ul>
<li><p><code>L1</code>范数相当于加入了一个<code>Laplacean</code>先验；</p>
</li>
<li><p><code>L2</code>范数相当于加入了一个<code>Gaussian</code>先验。</p>
<p><img src="2.jpg" alt="2"></p>
</li>
</ul>
<h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h3><p>  <code>Dropout</code>是深度学习中经常采用的一种正则化方法。它的做法可以简单的理解为在<code>DNNs</code>训练的过程中以概率<code>p</code>丢弃部分神经元，即使得被丢弃的神经元输出为0。<code>Dropout</code>可以实例化的表示为下图：</p>
<p><img src="3.jpg" alt="3"></p>
<p>我们可以从两个方面去直观地理解<code>Dropout</code>的正则化效果：</p>
<ul>
<li>在<code>Dropout</code>每一轮训练过程中随机丢失神经元的操作相当于多个<code>DNNs</code>进行取平均，因此用于预测具有<code>vote</code>的效果。</li>
<li>减少神经元之间复杂的共适应性。当隐藏层神经元被随机删除之后，使得全连接网络具有了一定的稀疏化，从而有效地减轻了不同特征的协同效应。也就是说，有些特征可能会依赖于固定关系的隐含节点的共同作用，而通过<code>Dropout</code>的话，就有效地组织了某些特征在其他特征存在下才有效果的情况，增加了神经网络的鲁棒性。</li>
</ul>
<h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h3><p>  批规范化（Batch Normalization）严格意义上讲属于归一化手段，主要用于加速网络的收敛，但也具有一定程度的正则化效果。</p>
<p>这里借鉴下魏秀参博士的知乎回答中对covariate shift的解释。</p>
<blockquote>
<p>大家都知道在统计机器学习中的一个经典假设是“源空间（source domain）和目标空间（target domain）的数据分布（distribution）是一致的”。如果不一致，那么就出现了新的机器学习问题，如transfer  learning/domain adaptation等。而covariate  shift就是分布不一致假设之下的一个分支问题，它是指源空间和目标空间的条件概率是一致的，但是其边缘概率不同。大家细想便会发现，的确，对于神经网络的各层输出，由于它们经过了层内操作作用，其分布显然与各层对应的输入信号分布不同，而且差异会随着网络深度增大而增大，可是它们所能“指示”的样本标记（label）仍然是不变的，这便符合了covariate  shift的定义。</p>
<p>BN的基本思想其实相当直观，因为神经网络在做非线性变换前的激活输入值（X = WU + B，U是输入），随着网络深度加深，其分布逐渐发生偏移或者变动（即上述的covariate shift）。之所以训练收敛慢，一般是整体分布逐渐往非线性函数的取值区间的上下限两端靠近（对于Sigmoid函数来说，意味着激活输入值（X = WU + B）是大的负值和正值。所以这导致后向传播时低层神经网络的梯度消失，这是训练深层神经网络收敛越来越慢的本质原因。而 BN 就是通过一定的规范化手段，把每层神经网络任意神经元这个输入值的分布强行拉回到均值为0方差为1的标准正态分布，避免因为激活函数导致的梯度弥散问题。所以与其说BN的作用是缓解covariate shift，倒不如说BN可缓解梯度弥散问题。</p>
</blockquote>
<h3 id="归一化、标准化-amp-正则化"><a href="#归一化、标准化-amp-正则化" class="headerlink" title="归一化、标准化 &amp; 正则化"></a>归一化、标准化 &amp; 正则化</h3><p>  正则化我们已经提到过了，这里简单提一下归一化和标准化。</p>
<p><strong>归一化（Normalization）</strong>：归一化的目标是找到某种映射关系，将原数据映射到<code>[a,b]</code>区间上。一般a，b会取<code>[-1,1]</code>，<code>[0,1]</code>这些组合 。</p>
<p>一般有两种应用场景：</p>
<ul>
<li>把数变为<code>(0, 1)</code>之间的小数</li>
<li>把有量纲的数转化为无量纲的数</li>
</ul>
<p>常用Min-Max Normalization：</p>
<p><img src="6.png" alt="6"></p>
<p><strong>标准化（Standardization）**</strong>：用大数定理将数据转化为一个标准正态分布**，标准化公式为：</p>
<p><img src="7.png" alt="7"></p>
<p><strong>归一化和标准化的区别：</strong></p>
<p>我们可以这样简单地解释：</p>
<p>归一化的缩放是“拍扁”统一到区间（仅由极值决定），而标准化的缩放是更加“弹性”和“动态”的，和整体样本的分布有很大的关系。</p>
<p><strong>值得注意：</strong></p>
<p>归一化：缩放仅仅跟最大、最小值的差别有关。</p>
<p>标准化：缩放和每个点都有关系，通过方差（variance）体现出来。与归一化对比，标准化中所有数据点都有贡献（通过均值和标准差造成影响）。</p>
<p><strong>为什么要标准化和归一化？</strong></p>
<ul>
<li>提升模型精度：归一化后，不同维度之间的特征在数值上有一定比较性，可以大大提高分类器的准确性。</li>
<li>加速模型收敛：标准化后，最优解的寻优过程明显会变得平缓，更容易正确的收敛到最优解。如下图所示：</li>
</ul>
<p><img src="8.png" alt="8"></p>
<p><img src="9.png" alt="9"></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>十大经典排序算法动画与解析</title>
    <url>/2018/12/26/SortAlgorithm/</url>
    <content><![CDATA[<p>排序算法是《数据结构与算法》中最基本的算法之一</p>
<p>排序算法可以分为<strong>内部排序</strong>和<strong>外部排序</strong>。</p>
<p>内部排序是数据记录在内存中进行排序。</p>
<p>而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<p>常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。</p>
<p>用一张图概括：</p>
<p><img src="1.png" alt="640"></p>
<a id="more"></a>
<h4 id="关于时间复杂度："><a href="#关于时间复杂度：" class="headerlink" title="关于时间复杂度：**"></a>关于时间复杂度：**</h4><ol>
<li>平方阶<code>(O(n2))</code> 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li>
<li>线性对数阶 <code>(O(nlog2n))</code> 排序 快速排序、堆排序和归并排序；</li>
<li><code>O(n1+§))</code> 排序，§ 是介于<code>0</code> 和 <code>1</code>之间的常数。 希尔排序</li>
<li>线性阶<code>(O(n))</code> 排序 基数排序，此外还有桶、箱排序。</li>
</ol>
<h4 id="关于稳定性："><a href="#关于稳定性：" class="headerlink" title="关于稳定性："></a><strong>关于稳定性：</strong></h4><ol>
<li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li>
<li>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</li>
</ol>
<h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><h4 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a><strong>1.1 算法步骤</strong></h4><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ul>
<h4 id="1-2-动画演示"><a href="#1-2-动画演示" class="headerlink" title="1.2 动画演示"></a>1.2 动画演示</h4><p><img src="2.gif" alt="2"></p>
<h4 id="1-3-参考代码"><a href="#1-3-参考代码" class="headerlink" title="1.3 参考代码"></a><strong>1.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort1</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sz-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">             <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><h4 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a><strong>2.1 算法步骤</strong></h4><ul>
<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li>
<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>
<li>重复第二步，直到所有元素均排序完毕。</li>
</ul>
<h4 id="2-2-动画演示"><a href="#2-2-动画演示" class="headerlink" title="2.2 动画演示"></a><strong>2.2 动画演示</strong></h4><p><img src="3.gif" alt="3"></p>
<h4 id="2-3-参考代码"><a href="#2-3-参考代码" class="headerlink" title="2.3 参考代码"></a><strong>2.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *pData,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;size<span class="number">-1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> index = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;size;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pData[j]&lt;pData[index])</span><br><span class="line">                index = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index != i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = pData[i];</span><br><span class="line">            pData[i] = pData[index];</span><br><span class="line">            pData[index] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pData[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pData[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    SelectSort(pData,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pData[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><h4 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a><strong>3.1 算法步骤</strong></h4><ul>
<li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li>
<li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li>
</ul>
<h4 id="3-2-动画演示"><a href="#3-2-动画演示" class="headerlink" title="3.2 动画演示"></a><strong>3.2 动画演示</strong></h4><p><img src="4.gif" alt="4"></p>
<h4 id="3-3-参考代码"><a href="#3-3-参考代码" class="headerlink" title="3.3 参考代码"></a><strong>3.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> key = a[j]; <span class="comment">//待排序第一个元素</span></span><br><span class="line">        <span class="keyword">int</span> i = j - <span class="number">1</span>;  <span class="comment">//代表已经排过序的元素最后一个索引数</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; key &lt; a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//从后向前逐个比较已经排序过数组，如果比它小，则把后者用前者代替，</span></span><br><span class="line">            <span class="comment">//其实说白了就是数组逐个后移动一位,为找到合适的位置时候便于Key的插入</span></span><br><span class="line">            a[i + <span class="number">1</span>] = a[i];</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i + <span class="number">1</span>] = key; <span class="comment">//找到合适的位置了，赋值,在i索引的后面设置key值。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d[] = &#123;<span class="number">12</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">6</span>, <span class="number">31</span>, <span class="number">24</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序前数组：12, 15, 9, 20, 6, 31, 24, "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    InsertSort(d, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序后结果："</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; d[i] &lt;&lt;<span class="string">","</span>&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4. 希尔排序"></a>4. 希尔排序</h2><h4 id="4-1-算法步骤"><a href="#4-1-算法步骤" class="headerlink" title="4.1 算法步骤"></a><strong>4.1 算法步骤</strong></h4><ul>
<li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li>
<li>按增量序列个数 k，对序列进行 k 趟排序；</li>
<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<h4 id="4-2-动画演示"><a href="#4-2-动画演示" class="headerlink" title="4.2 动画演示"></a><strong>4.2 动画演示</strong></h4><p><img src="5.gif" alt="5"></p>
<h4 id="4-3-参考代码"><a href="#4-3-参考代码" class="headerlink" title="4.3 参考代码"></a><strong>4.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 从一个大的Gap开始， 不断缩小Gao</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 对此间隙大小执行有缺口的插入排序。</span></span><br><span class="line">        <span class="comment">// 第一个间隙元素a[0..gap-1]已经是有间隙的顺序</span></span><br><span class="line">        <span class="comment">// 继续添加一个元素，直到整个数组都进行了间隙排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; n; i += <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 在已经进行间隙排序的元素中添加 a[i]</span></span><br><span class="line">            <span class="comment">// 在temp中保存 a[i] 并在第i个位置留个空隙</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移动较早经过Gap-Sort的元素移动直到a[i]的位置被找到</span></span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap)</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把temp(原来的a[i])放到正确的位置</span></span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>&#125;, i;</span><br><span class="line">    <span class="comment">//数组长度计算</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"排序前的数组: \n"</span>;</span><br><span class="line">    printArray(arr, n);</span><br><span class="line"></span><br><span class="line">    shellSort(arr, n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n排序后的数组: \n"</span>;</span><br><span class="line">    printArray(arr, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-归并排序"><a href="#5-归并排序" class="headerlink" title="5. 归并排序"></a>5. 归并排序</h2><h4 id="5-1-算法步骤"><a href="#5-1-算法步骤" class="headerlink" title="5.1 算法步骤"></a><strong>5.1 算法步骤</strong></h4><ul>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>
<li>重复步骤 3 直到某一指针达到序列尾；</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>
</ul>
<h4 id="5-2-动画演示"><a href="#5-2-动画演示" class="headerlink" title="5.2 动画演示"></a><strong>5.2 动画演示</strong></h4><p><img src="6.gif" alt="6"></p>
<h4 id="5-3-参考代码"><a href="#5-3-参考代码" class="headerlink" title="5.3 参考代码"></a><strong>5.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* Merge sort in C++ */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Function to Merge Arrays L and R into A.</span></span><br><span class="line"><span class="comment">// lefCount = number of elements in L</span></span><br><span class="line"><span class="comment">// rightCount = number of elements in R.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> *L,<span class="keyword">int</span> leftCount,<span class="keyword">int</span> *R,<span class="keyword">int</span> rightCount)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// i - to mark the index of left aubarray (L)</span></span><br><span class="line">	<span class="comment">// j - to mark the index of right sub-raay (R)</span></span><br><span class="line">	<span class="comment">// k - to mark the index of merged subarray (A)</span></span><br><span class="line">	i = <span class="number">0</span>; j = <span class="number">0</span>; k =<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">while</span>(i&lt;leftCount &amp;&amp; j&lt; rightCount) &#123;</span><br><span class="line">		<span class="keyword">if</span>(L[i]  &lt; R[j]) A[k++] = L[i++];</span><br><span class="line">		<span class="keyword">else</span> A[k++] = R[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i &lt; leftCount) A[k++] = L[i++];</span><br><span class="line">	<span class="keyword">while</span>(j &lt; rightCount) A[k++] = R[j++];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Recursive function to sort an array of integers.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> mid,i, *L, *R;</span><br><span class="line">	<span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span>; <span class="comment">// base condition. If the array has less than two element, do nothing.</span></span><br><span class="line"> </span><br><span class="line">	mid = n/<span class="number">2</span>;  <span class="comment">// find the mid index.</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// create left and right subarrays</span></span><br><span class="line">	<span class="comment">// mid elements (from index 0 till mid-1) should be part of left sub-array</span></span><br><span class="line">	<span class="comment">// and (n-mid) elements (from mid to n-1) will be part of right sub-array</span></span><br><span class="line">	L = <span class="keyword">new</span> <span class="keyword">int</span>[mid];</span><br><span class="line">	R = <span class="keyword">new</span> <span class="keyword">int</span> [n - mid];</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;mid;i++) L[i] = A[i]; <span class="comment">// creating left subarray</span></span><br><span class="line">	<span class="keyword">for</span>(i = mid;i&lt;n;i++) R[i-mid] = A[i]; <span class="comment">// creating right subarray</span></span><br><span class="line"> </span><br><span class="line">	MergeSort(L,mid);  <span class="comment">// sorting the left subarray</span></span><br><span class="line">	MergeSort(R,n-mid);  <span class="comment">// sorting the right subarray</span></span><br><span class="line">	Merge(A,L,mid,R,n-mid);  <span class="comment">// Merging L and R into A as sorted list.</span></span><br><span class="line">	<span class="comment">// the delete operations is very important</span></span><br><span class="line">	<span class="keyword">delete</span> [] R;</span><br><span class="line">	<span class="keyword">delete</span> [] L;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">/* Code to test the MergeSort function. */</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">int</span> A[] = &#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">13</span>,<span class="number">12</span>,<span class="number">17</span>&#125;; <span class="comment">// creating an array of integers.</span></span><br><span class="line">	<span class="keyword">int</span> i,numberOfElements;</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// finding number of elements in array as size of complete array in bytes divided by size of integer in bytes.</span></span><br><span class="line">	<span class="comment">// This won't work if array is passed to the function because array</span></span><br><span class="line">	<span class="comment">// is always passed by reference through a pointer. So sizeOf function will give size of pointer and not the array.</span></span><br><span class="line">	<span class="comment">// Watch this video to understand this concept - http://www.youtube.com/watch?v=CpjVucvAc3g</span></span><br><span class="line">	numberOfElements = <span class="keyword">sizeof</span>(A)/<span class="keyword">sizeof</span>(A[<span class="number">0</span>]);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">// Calling merge sort to sort the array.</span></span><br><span class="line">	MergeSort(A,numberOfElements);</span><br><span class="line"> </span><br><span class="line">	<span class="comment">//printing all elements in the array once its sorted.</span></span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; numberOfElements;i++)</span><br><span class="line">	   <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; A[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-快速排序"><a href="#6-快速排序" class="headerlink" title="6. 快速排序"></a>6. 快速排序</h2><h4 id="6-1-算法步骤"><a href="#6-1-算法步骤" class="headerlink" title="6.1 算法步骤"></a><strong>6.1 算法步骤</strong></h4><ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）;</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>
</ul>
<h4 id="6-2-动画演示"><a href="#6-2-动画演示" class="headerlink" title="6.2 动画演示"></a><strong>6.2 动画演示</strong></h4><p><img src="7.gif" alt="7"></p>
<h4 id="6-3-参考代码"><a href="#6-3-参考代码" class="headerlink" title="6.3 参考代码"></a><strong>6.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* low  --&gt; Starting index,  high  --&gt; Ending index */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This function takes last element as pivot, places </span></span><br><span class="line"><span class="comment">   the pivot element at its correct position in sorted </span></span><br><span class="line"><span class="comment">    array, and places all smaller (smaller than pivot) </span></span><br><span class="line"><span class="comment">   to left of pivot and all greater elements to right </span></span><br><span class="line"><span class="comment">   of pivot */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = arr[high]; <span class="comment">// pivot</span></span><br><span class="line">    <span class="keyword">int</span> i = (low - <span class="number">1</span>);     <span class="comment">// Index of smaller element</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = low; j &lt;= high - <span class="number">1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If current element is smaller than or</span></span><br><span class="line">        <span class="comment">// equal to pivot</span></span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt;= pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            i++; <span class="comment">// increment index of smaller element</span></span><br><span class="line">            swap(&amp;arr[i], &amp;arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(&amp;arr[i + <span class="number">1</span>], &amp;arr[high]);</span><br><span class="line">    <span class="keyword">return</span> (i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The main function that implements QuickSort </span></span><br><span class="line"><span class="comment"> arr[] --&gt; Array to be sorted, </span></span><br><span class="line"><span class="comment">  low  --&gt; Starting index, </span></span><br><span class="line"><span class="comment">  high  --&gt; Ending index */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* pi is partitioning index, arr[p] is now </span></span><br><span class="line"><span class="comment">           at right place */</span></span><br><span class="line">        <span class="keyword">int</span> pi = partition(arr, low, high);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Separately sort elements before</span></span><br><span class="line">        <span class="comment">// partition and after partition</span></span><br><span class="line">        quickSort(arr, low, pi - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, pi + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Function to print an array */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver program to test above functions</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    quickSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sorted array: \n"</span>);</span><br><span class="line">    printArray(arr, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-堆排序"><a href="#7-堆排序" class="headerlink" title="7. 堆排序"></a>7. 堆排序</h2><h4 id="7-1-算法步骤"><a href="#7-1-算法步骤" class="headerlink" title="7.1 算法步骤"></a><strong>7.1 算法步骤</strong></h4><ul>
<li>创建一个堆 H[0……n-1]；</li>
<li>把堆首（最大值）和堆尾互换；</li>
<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>
<li>重复步骤 2，直到堆的尺寸为 1。</li>
</ul>
<h4 id="7-2-动画演示"><a href="#7-2-动画演示" class="headerlink" title="7.2 动画演示"></a><strong>7.2 动画演示</strong></h4><p><img src="8.gif" alt="8"></p>
<h4 id="7-3-参考代码"><a href="#7-3-参考代码" class="headerlink" title="7.3 参考代码"></a><strong>7.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助交换函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆排序的核心是建堆,传入参数为数组，根节点位置，数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heap_build</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> root, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lchild = root * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">//根节点的左子结点下标</span></span><br><span class="line">    <span class="keyword">if</span> (lchild &lt; length)       <span class="comment">//左子结点下标不能超出数组的长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag = lchild;       <span class="comment">//flag保存左右节点中最大值的下标</span></span><br><span class="line">        <span class="keyword">int</span> rchild = lchild + <span class="number">1</span>; <span class="comment">//根节点的右子结点下标</span></span><br><span class="line">        <span class="keyword">if</span> (rchild &lt; length)     <span class="comment">//右子结点下标不能超出数组的长度(如果有的话)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[rchild] &gt; a[flag]) <span class="comment">//找出左右子结点中的最大值</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[root] &lt; a[flag])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//交换父结点和比父结点大的最大子节点</span></span><br><span class="line">            Swap(a[root], a[flag]);</span><br><span class="line">            <span class="comment">//从此次最大子节点的那个位置开始递归建堆</span></span><br><span class="line">            Heap_build(a, flag, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Heap_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) <span class="comment">//从最后一个非叶子节点的父结点开始建堆</span></span><br><span class="line">    &#123;</span><br><span class="line">        Heap_build(a, i, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">1</span>; j &gt; <span class="number">0</span>; --j) <span class="comment">//j表示数组此时的长度，因为len长度已经建过了，从len-1开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        Swap(a[<span class="number">0</span>], a[j]);    <span class="comment">//交换首尾元素,将最大值交换到数组的最后位置保存</span></span><br><span class="line">        Heap_build(a, <span class="number">0</span>, j); <span class="comment">//去除最后位置的元素重新建堆，此处j表示数组的长度，最后一个位置下标变为len-2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">748</span>, <span class="number">12</span>, <span class="number">56</span>, <span class="number">3</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">48</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    Heap_sort(a, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8. 计数排序"></a>8. 计数排序</h2><h4 id="8-1-算法步骤"><a href="#8-1-算法步骤" class="headerlink" title="8.1 算法步骤"></a><strong>8.1 算法步骤</strong></h4><ul>
<li>花O(n)的时间扫描一下整个序列 A，获取最小值 min 和最大值 max</li>
<li>开辟一块新的空间创建新的数组 B，长度为 ( max - min + 1)</li>
<li>数组 B 中 index 的元素记录的值是 A 中某元素出现的次数</li>
<li>最后输出目标整数序列，具体的逻辑是遍历数组 B，输出相应元素以及对应的个数</li>
</ul>
<h4 id="8-2-动画演示"><a href="#8-2-动画演示" class="headerlink" title="8.2 动画演示"></a><strong>8.2 动画演示</strong></h4><p><img src="9.gif" alt="9"></p>
<h4 id="8-3-参考代码"><a href="#8-3-参考代码" class="headerlink" title="8.3 参考代码"></a><strong>8.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C Program for counting sort</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RANGE 255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The main function that sort the given string arr[] in</span></span><br><span class="line"><span class="comment">// alphabatical order</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">char</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// The output character array that will have sorted arr</span></span><br><span class="line">    <span class="keyword">char</span> output[<span class="built_in">strlen</span>(arr)];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a count array to store count of inidividul</span></span><br><span class="line">    <span class="comment">// characters and initialize count array as 0</span></span><br><span class="line">    <span class="keyword">int</span> count[RANGE + <span class="number">1</span>], i;</span><br><span class="line">    <span class="built_in">memset</span>(count, <span class="number">0</span>, <span class="keyword">sizeof</span>(count));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Store count of each character</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; arr[i]; ++i)</span><br><span class="line">        ++count[arr[i]];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Change count[i] so that count[i] now contains actual</span></span><br><span class="line">    <span class="comment">// position of this character in output array</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= RANGE; ++i)</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build the output character array</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; arr[i]; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        output[count[arr[i]] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        --count[arr[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     For Stable algorithm  </span></span><br><span class="line"><span class="comment">     for (i = sizeof(arr)-1; i&gt;=0; --i) </span></span><br><span class="line"><span class="comment">    &#123; </span></span><br><span class="line"><span class="comment">        output[count[arr[i]]-1] = arr[i]; </span></span><br><span class="line"><span class="comment">        --count[arr[i]]; </span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">    For Logic : See implementation </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Copy the output array to arr, so that arr now</span></span><br><span class="line">    <span class="comment">// contains sorted characters</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; arr[i]; ++i)</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver program to test above function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"geeksforgeeks"</span>; <span class="comment">//"applepp";</span></span><br><span class="line"></span><br><span class="line">    countSort(arr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sorted character array is %sn"</span>, arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9. 桶排序"></a>9. 桶排序</h2><h4 id="9-1-算法步骤"><a href="#9-1-算法步骤" class="headerlink" title="9.1 算法步骤"></a><strong>9.1 算法步骤</strong></h4><ul>
<li>设置固定数量的空桶。</li>
<li>把数据放到对应的桶中。</li>
<li>对每个不为空的桶中数据进行排序。</li>
<li>拼接不为空的桶中数据，得到结果</li>
<li>桶排序耗用较大的辅助空间，所需要的辅助空间一般与被排序的数列的最大值与最小值有关</li>
</ul>
<h4 id="9-2-动画演示"><a href="#9-2-动画演示" class="headerlink" title="9.2 动画演示"></a><strong>9.2 动画演示</strong></h4><p><img src="10.gif" alt="10"></p>
<h4 id="9-3-参考代码"><a href="#9-3-参考代码" class="headerlink" title="9.3 参考代码"></a><strong>9.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = vec.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buckets(length, <span class="number">0</span>); <span class="comment">//准备一堆桶，容器的下标即待排序数组的键值或键值经过转化后的值</span></span><br><span class="line">    <span class="comment">//此时每个桶中都是没有放蛋的，所以都是0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        buckets[vec[i]]++; <span class="comment">//把每个蛋放入到对应的桶中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">    &#123; <span class="comment">//把蛋取出，空桶则直接跳过</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; buckets[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vec[index++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上例是直接将键值作为桶下标的程序，没有经过转化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(a, a + <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    bucketSort(vec);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-基数排序"><a href="#10-基数排序" class="headerlink" title="10. 基数排序"></a>10. 基数排序</h2><h4 id="10-1-算法步骤"><a href="#10-1-算法步骤" class="headerlink" title="10.1 算法步骤"></a><strong>10.1 算法步骤</strong></h4><ul>
<li>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零</li>
<li>从最低位开始，依次进行一次排序</li>
<li>从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列</li>
</ul>
<h4 id="10-2-动画演示"><a href="#10-2-动画演示" class="headerlink" title="10.2 动画演示"></a><strong>10.2 动画演示</strong></h4><p><img src="11.gif" alt="11"></p>
<h4 id="10-3-参考代码"><a href="#10-3-参考代码" class="headerlink" title="10.3 参考代码"></a><strong>10.3 参考代码</strong></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec, <span class="keyword">int</span> <span class="built_in">exp</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//计数排序</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; range(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = vec.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmpVec(length, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        range[(vec[i] / <span class="built_in">exp</span>) % <span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; range.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        range[i] += range[i - <span class="number">1</span>]; <span class="comment">//统计本应该出现的位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpVec[range[(vec[i] / <span class="built_in">exp</span>) % <span class="number">10</span>] - <span class="number">1</span>] = vec[i];</span><br><span class="line">        range[(vec[i] / <span class="built_in">exp</span>) % <span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    vec = tmpVec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = vec.size();</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i)</span><br><span class="line">    &#123; <span class="comment">//提取出最大值</span></span><br><span class="line">        <span class="keyword">if</span> (vec[i] &gt; max)</span><br><span class="line">            max = vec[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提取每一位并进行比较，位数不足的高位补0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">exp</span> = <span class="number">1</span>; max / <span class="built_in">exp</span> &gt; <span class="number">0</span>; <span class="built_in">exp</span> *= <span class="number">10</span>)</span><br><span class="line">        countSort(vec, <span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">53</span>, <span class="number">3</span>, <span class="number">542</span>, <span class="number">748</span>, <span class="number">14</span>, <span class="number">214</span>, <span class="number">154</span>, <span class="number">63</span>, <span class="number">616</span>, <span class="number">589</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(a, a + <span class="number">10</span>);</span><br><span class="line">    radixSort(vec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; vec[i] &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Alg</category>
      </categories>
  </entry>
  <entry>
    <title>Django流程</title>
    <url>/2018/12/04/Django%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Django-admin startproject mysite</span><br></pre></td></tr></table></figure>
<p><strong>注意：路径中不要带有中文</strong></p>
<p>层级目录说明</p>
<p><img src="1.png" alt="1"></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>manage.py</td>
<td>一个命令行工具，可以让我们用多种方式对Django项目进行交互</td>
</tr>
<tr>
<td>__init__.py</td>
<td>一个空文件，它告诉Python这个目录应该被看做一个包</td>
</tr>
<tr>
<td>settings.py</td>
<td>项目的配置文件（主要处理文件）</td>
</tr>
<tr>
<td>urls.py</td>
<td>项目的url声明 （主要处理文件）</td>
</tr>
<tr>
<td>wsgi.py</td>
<td>项目与WSGI兼容的Web服务器入口</td>
</tr>
</tbody>
</table>
<h3 id="配置数据库-mysql"><a href="#配置数据库-mysql" class="headerlink" title="配置数据库(mysql)"></a>配置数据库(mysql)</h3><p>  在Django中，默认使用 SQLite数据库，在settings.py文件中通过DATABASES选项进行数据库配置。</p>
<h4 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h4><p>  1.在mysite/__init__.py中写入两行代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql</span><br><span class="line">mysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>
<p>  2.在settings.py中对DATABASES进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">    &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">    &apos;NAME&apos;: &quot;my_site&quot;,</span><br><span class="line">    &apos;USER&apos;: &quot;root&quot;,</span><br><span class="line">    &apos;PASSWORD&apos;: &quot;m&quot;,</span><br><span class="line">    &apos;HOST&apos;: &quot;localhost&quot;,</span><br><span class="line">    &apos;PORT&apos;: &quot;3306&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>创建</p>
<p>  创建应用–在一个项目中可以创建多个应用，每个应用进行一种业务处理在manage.py所在文件夹下打开cmd，输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py startapp myapp</span><br></pre></td></tr></table></figure>
<p>  层级目录说明</p>
<p><img src="2.png" alt="2"></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>admin.py</td>
<td>进行站点配置，用于注册模型等</td>
</tr>
<tr>
<td>models.py</td>
<td>创建模型</td>
</tr>
<tr>
<td>views.py</td>
<td>创建视图</td>
</tr>
<tr>
<td>test,py</td>
<td>网站测试</td>
</tr>
<tr>
<td>migration文件夹</td>
<td>于数据迁移</td>
</tr>
</tbody>
</table>
<h4 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h4><p>  在settings.py中，将myapo应用加入到INSTALLED.APPS选项中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line">    &apos;myapp&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>  概述，有一个数据表就对应有一个模型。在models.py中定义模型。模型类要继承models.Model类。所以要import models这个类</p>
<p>示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classes</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    cname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    cdate = models.DateTimeField()</span><br><span class="line">    cgirlnum = models.IntegerField()</span><br><span class="line">    cboynum = models.IntegerField()</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    sname = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    sgender = models.BooleanField(default=<span class="keyword">True</span>)</span><br><span class="line">    sage = models.IntegerField()</span><br><span class="line">    scontend = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="keyword">False</span>)</span><br><span class="line">    sgrade = models.ForeignKey(<span class="string">"Classes"</span>, on_delete=models.CASCADE,)</span><br></pre></td></tr></table></figure>
<p><strong>说明：不需要定义主键，在生成时自动添加，并且值为自动增加</strong></p>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><p>  1.生成迁移文件，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure>
<p>  2.执行迁移，执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h4 id="测试数据操作"><a href="#测试数据操作" class="headerlink" title="测试数据操作"></a>测试数据操作</h4><p>进入到python shell </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure>
<p>引入包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myApp.models <span class="keyword">import</span> Grades, Students</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>查询所有数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类名.objects.all()</span></span><br><span class="line">Student.objects.all()</span><br></pre></td></tr></table></figure>
<p>添加数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Classes1 = Classes()</span><br><span class="line"></span><br><span class="line">Classes1.cname = <span class="string">"python"</span></span><br><span class="line">Classes1.cdate = datetime(year=<span class="number">2017</span>, month=<span class="number">7</span>, day=<span class="number">17</span>)</span><br><span class="line">Classes1.cgirlnum = <span class="number">3</span></span><br><span class="line">Classes1.cboynum = <span class="number">70</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##保存</span></span><br><span class="line">Classes1.save()</span><br></pre></td></tr></table></figure>
<p>查看某个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类名.objects.get(pk=1)   pk:primary key</span></span><br><span class="line">Classes.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#类名.objects.all()  得到所有</span></span><br><span class="line">Classes.objects.get(pk=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>关联对象</p>
<p>需求获取班所以普学生</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关联的类名小写_set.all()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>.<span class="title">sutdents_set</span>.<span class="title">all</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>需求创建A，属于班</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stu3=classes1.students_set.create(**values)</span><br></pre></td></tr></table></figure>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>格式：python manage.py runserver ip:port</p>
<h3 id="Admin站点管理"><a href="#Admin站点管理" class="headerlink" title="Admin站点管理"></a>Admin站点管理</h3><h4 id="创建管理员用户"><a href="#创建管理员用户" class="headerlink" title="创建管理员用户"></a>创建管理员用户</h4><p> 在manage.py文件所在目录执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<p>一次输入账号、邮箱、密码即可创建用户</p>
<h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h4><p>  登陆网站： <a href="http://localhost:8000/admin/" target="_blank" rel="noopener">http://localhost:8000/admin/</a></p>
<p><img src="3.png" alt="3"></p>
<h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>  在settings.py中将LANGUAGE_CODE设置为’zh-Hans0’, TIME_ZONE=’Asia/Shanghai’</p>
<h4 id="管理数据表"><a href="#管理数据表" class="headerlink" title="管理数据表"></a>管理数据表</h4><p>修改myapp\admin.py:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">#register your models here</span><br><span class="line">from .models import Classes, Students</span><br><span class="line">admin</span><br></pre></td></tr></table></figure>
<h4 id="自定义管理页面"><a href="#自定义管理页面" class="headerlink" title="自定义管理页面"></a>自定义管理页面</h4><p>属性说明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表页属性</span></span><br><span class="line">         list_display = [] <span class="comment"># 显示字段设置</span></span><br><span class="line">         list_filter = [] <span class="comment"># 过滤字段设置</span></span><br><span class="line">         search_fields = [] <span class="comment"># 搜索字段设置</span></span><br><span class="line">         list_per_page = [] <span class="comment"># 分页设置</span></span><br><span class="line">         <span class="comment"># 添加，修改页属性</span></span><br><span class="line">         fields = [] <span class="comment"># 规定属性的先后顺序</span></span><br><span class="line">         fieldsets = [] <span class="comment"># 给属性分组 注意：fields与fieldsets不能同时使用</span></span><br><span class="line">     属性示例：</span><br><span class="line">         <span class="comment"># 列表页属性</span></span><br><span class="line">         list_display = [<span class="string">'pk'</span>, <span class="string">'gname'</span>, <span class="string">'gdate'</span>, <span class="string">'ggirlnum'</span>, <span class="string">'gboynum'</span>, <span class="string">'isDelete'</span>]</span><br><span class="line">         list_filter = [<span class="string">'gname'</span>]</span><br><span class="line">         search_fields = [<span class="string">'gname'</span>]</span><br><span class="line">         list_per_page = <span class="number">5</span></span><br><span class="line">         <span class="comment"># 添加，修改页属性</span></span><br><span class="line">         <span class="comment"># fields = ['ggirlnum', 'gboynum', 'gname', 'gdate', 'isDelete']</span></span><br><span class="line">         fieldsets = [</span><br><span class="line">             (<span class="string">"num"</span>,&#123;<span class="string">"fields"</span>:[<span class="string">'ggirlnum'</span>, <span class="string">'gboynum'</span>]&#125;),</span><br><span class="line">             (<span class="string">"base"</span>, &#123;<span class="string">"fields"</span>:[<span class="string">"gname"</span>, <span class="string">"gdate"</span>, <span class="string">"isDelete"</span>]&#125;),</span><br><span class="line">         ]</span><br><span class="line">     关联对象：需求：在创建一个班级时可以直接添加几个学生</span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">StudentsInfo</span><span class="params">(admin.TabularInline)</span>:</span><span class="comment"># 可选参数admin.StackedInline</span></span><br><span class="line">             model = Students</span><br><span class="line">             extra = <span class="number">2</span></span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">GradesAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">             inlines = [StudentsInfo]</span><br><span class="line">     布尔值显示问题示例：</span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">StudentsAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">             <span class="function"><span class="keyword">def</span> <span class="title">gender</span><span class="params">(self)</span>:</span></span><br><span class="line">                 <span class="keyword">if</span> self.sgender:</span><br><span class="line">                     <span class="keyword">return</span> <span class="string">"男"</span></span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     <span class="keyword">return</span> <span class="string">"女"</span></span><br><span class="line">             <span class="comment"># 设置页面列的名称</span></span><br><span class="line">             gender.short_description = <span class="string">"性别"</span></span><br><span class="line">             list_display = [<span class="string">'pk'</span>, <span class="string">'sname'</span>, <span class="string">'sage'</span>, gender,</span><br><span class="line">                             <span class="string">'scontend'</span>, <span class="string">'sgrade'</span>, <span class="string">'isDelete'</span>]</span><br><span class="line">             list_per_page = <span class="number">10</span></span><br><span class="line">         admin.site.register(Students, StudentsAdmin)</span><br><span class="line">     执行按钮位置：</span><br><span class="line">         <span class="class"><span class="keyword">class</span> <span class="title">StudentsAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">             ...snip...</span><br><span class="line">             actions_on_top = <span class="keyword">False</span></span><br><span class="line">             actions_on_bottom = <span class="keyword">True</span></span><br><span class="line">         admin.site.register(Students, StudentsAdmin)</span><br><span class="line">     使用装饰器完成注册：</span><br><span class="line"><span class="meta">         @admin.register(Students)</span></span><br><span class="line">             <span class="class"><span class="keyword">class</span> <span class="title">StudentsAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">                 <span class="function"><span class="keyword">def</span> <span class="title">gender</span><span class="params">(self)</span>:</span></span><br><span class="line">                 ...snip...</span><br><span class="line">                 actions_on_top = <span class="keyword">False</span></span><br><span class="line">                 actions_on_bottom = <span class="keyword">True</span></span><br></pre></td></tr></table></figure>
<h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><p>  在Django中，视图是对web请求进行回应，视图就是一个python函数</p>
<p>流程：</p>
<blockquote>
<p><strong>1.网址：</strong>Django获取网址信息，去掉端口。</p>
<p><strong>2.虚拟路径与文件名：</strong>url管理器逐个匹配urlconf，记录视图函数</p>
<p><strong>3.函数视图名：</strong>视图管理，找到对应的视图去执行，返回结果给浏览器</p>
<p><strong>4.相应的数据：</strong>返回第一步</p>
</blockquote>
<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><h5 id="错误视图"><a href="#错误视图" class="headerlink" title="错误视图"></a>错误视图</h5><p>​    404视图：找不到网页（url匹配不成功时返回）</p>
<p>​    <strong>自定义 404 page：</strong></p>
<p>​    1.修改project/settings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="keyword">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">"*"</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li>在ALLOWED_HOSTS中设置”*“将允许你在debug中为false时使用任何host婞项目，不要再生产中这样做</li>
<li>设置DEBUG为Flase将会允许你的错误URL返回响应</li>
</ul>
<p>​    2.配置project/urls.py，添加上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> handler404</span><br><span class="line">handler404 = <span class="string">'myapp.views.error_404_view'</span></span><br></pre></td></tr></table></figure>
<p>​    3.自定义404错误页面</p>
<p>   在/myapp/views.py中写入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_404_view</span><span class="params">(request, exception)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">"name"</span>: <span class="string">"ThePythonDjango.com"</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">'error_404.html'</span>, data)</span><br></pre></td></tr></table></figure>
<p>​     这样，当用户输入错误的url，我们将会返回project下，templates中的error_404.html页面了</p>
<p>   接下来在project/templates文件夹中创建error_404.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> This is a custom 404 error page which will </span><br><span class="line">         be shown instead of default 404 error page of Django everytime</span><br><span class="line">         incorrect urls is entered in browser.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="urls配置"><a href="#urls配置" class="headerlink" title="urls配置"></a>urls配置</h4><h5 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h5><p>  1.定制根url配置文件</p>
<p>  setting.py中<strong>默认实现了</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROOT_URLCONF = <span class="string">'project.urls'</span></span><br></pre></td></tr></table></figure>
<p>  2.urlpatterns</p>
<p> 在应用中创建urls.py</p>
<p>project/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> handler404, handler500</span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> urls</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'myapp.urls'</span>))</span><br><span class="line">]</span><br><span class="line">handler404 = <span class="string">'myapp.views.error_404_view'</span></span><br></pre></td></tr></table></figure>
<p>project/myapp/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">  path(<span class="string">'index'</span>, views.index),</span><br><span class="line">  path(<span class="string">'&lt;int:a&gt;'</span>, views.number),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><p>url反响解析</p>
<p>概述：如果在视图，模板中使用了硬编码链接，在url配置发生改变时，动态生成链接的地址<br>解决：在使用链接时，通过url配置的名称，动态生成url地址<br>作用：使用url模板</p>
</li>
</ol>
<h5 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h5><p>  <strong>参数</strong></p>
<pre><code>*  一个Httprequest实例(request),
*  从urls中传递过来的参数
</code></pre><p>  <strong>HttpRequest 对象</strong></p>
<p>  概述：</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;  服务器接收http请求后，会根据报文创建HttpRequest对象</span><br><span class="line">&gt;  视图的第一个参数就是HttpRequest对象</span><br><span class="line">&gt;  django创建的，之后调用视图时传递给视图</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>属性</p>
<ul>
<li>path:请求的完整路径（不包括域名和端口）</li>
<li>method:表示请求的方式，常用的有GET,POST</li>
<li>encoding:表示浏览器提交的数据的编码方式，一般为utf-8</li>
<li>GET：类似于字典的对象，包含了get请求的所有参数</li>
<li>POST:类似于字典的对象，包含了post请求的所有参数</li>
<li>FILES:类似字典的对象，包含了所有上传的文件</li>
<li>COOKIES:字典，包含所有的cookie</li>
<li>session:类似字典的对象，表示当前会话</li>
</ul>
<p>方法和对象</p>
<ul>
<li>is_ajax():如果是通过XMLHttpRequest发起的，返回 True</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>tf.strided_slice</title>
    <url>/2018/11/27/tf-strided-slice/</url>
    <content><![CDATA[<p>tf.strided_slice其实就是TensorFlow中用来分片的函数。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strided_slice</span><span class="params">(input_,</span></span></span><br><span class="line"><span class="function"><span class="params">                  begin,</span></span></span><br><span class="line"><span class="function"><span class="params">                  end,</span></span></span><br><span class="line"><span class="function"><span class="params">                  strides=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  begin_mask=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  end_mask=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  ellipsis_mask=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  new_axis_mask=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  shrink_axis_mask=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  var=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                  name=None)</span>:</span></span><br></pre></td></tr></table></figure>
<p>begin是分片开始， end是分片结束，strides是步长，注意这边的步长其实是从步长的最后一位开始的</p>
<a id="more"></a>
<h3 id="Question："><a href="#Question：" class="headerlink" title="Question："></a>Question：</h3><p>I am wondering what <code>tf.strided_slice()</code> operator actually does.<br>The <a href="https://www.tensorflow.org/api_docs/python/array_ops/slicing_and_joining#strided_slice" target="_blank" rel="noopener">doc</a> says,</p>
<blockquote>
<p>To a first order, this operation extracts a slice of size end - begin from a tensor input starting at the location specified by begin. The slice continues by adding stride to the begin index until all dimensions are not less than end. Note that components of stride can be negative, which causes a reverse slice.</p>
</blockquote>
<p>And in the sample,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 'input' is [[[1, 1, 1], [2, 2, 2]],</span></span><br><span class="line"><span class="comment">#             [[3, 3, 3], [4, 4, 4]],</span></span><br><span class="line"><span class="comment">#             [[5, 5, 5], [6, 6, 6]]]</span></span><br><span class="line">tf.slice(input, [1, 0, 0], [2, 1, 3], [1, 1, 1]) ==&gt; [[[3, 3, 3]]]</span><br><span class="line">tf.slice(input, [1, 0, 0], [2, 2, 3], [1, 1, 1]) ==&gt; [[[3, 3, 3],</span><br><span class="line">                                                       [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]]]</span><br><span class="line">tf.slice(input, [1, 1, 0], [2, -1, 3], [1, -1, 1]) ==&gt;[[[4, 4, 4],</span><br><span class="line">                                                        [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]]]</span><br></pre></td></tr></table></figure>
<p>So in my understanding of the doc, the first sample (<code>tf.slice(input, begin=[1, 0, 0], end=[2, 1, 3], strides=[1, 1, 1])</code>),</p>
<ul>
<li>resulting size is <code>end - begin = [1, 1, 3]</code>. The sample result shows <code>[[[3, 3, 3,]]]</code>, that shape is <code>[1, 1, 3]</code>, it seems OK.</li>
<li>the first element of the result is at <code>begin = [1, 0, 0]</code>. The first element of the sample result is <code>3</code>, which is <code>input[1,0,0]</code>, it seems OK.</li>
<li>the slice continues by adding stride to the begin index. So the second element of the result should be <code>input[begin + strides] = input[2, 1, 1] = 6</code>, but the sample shows the second element is <code>3</code>.</li>
</ul>
<p>What <code>strided_slice()</code> does?</p>
<h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><p>The mistake in your argument is the fact that you are directly adding the lists <code>strides</code> and <code>begin</code>element by element. This will make the function a lot less useful. Instead, it increments the <code>begin</code>list one dimension at a time, starting from the last dimension.</p>
<p>Let’s solve the first example part by part. <code>begin = [1, 0, 0]</code> and <code>end = [2, 1, 3]</code>. Also, all the <code>strides</code> are <code>1</code>. Work your way backwards, from the last dimension.</p>
<p>Start with element <code>[1,0,0]</code>. Now <strong>increase the last dimension only by its stride amount</strong>, giving you <code>[1,0,1]</code>. Keep doing this until you reach the limit. Something like <code>[1,0,2]</code>, <code>[1,0,3]</code> (end of the loop). Now in your next iteration, start by incrementing the second to last dimension and resetting the last dimension, <code>[1,1,0]</code>. Here the second to last dimension is equal to <code>end[1]</code>, so move to the first dimension (third to last) and reset the rest, giving you <code>[2,0,0]</code>. Again you are at the first dimension’s limit, so quit the loop.</p>
<p>The following code is a recursive implementation of what I described above,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Assume global `begin`, `end` and `stride`</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterate</span><span class="params">(active, dim)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> dim == len(begin):</span><br><span class="line">        <span class="comment"># last dimension incremented, work on the new matrix</span></span><br><span class="line">        <span class="comment"># Note that `active` and `begin` are lists</span></span><br><span class="line">        new_matrix[active - begin] = old_matrix[active]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(begin[dim], end[dim], stride[dim]):</span><br><span class="line">            new_active = copy(active)</span><br><span class="line">            new_active[dim] = i</span><br><span class="line">            iterate(new_active, dim + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">iterate(begin, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/2018/11/22/html5/</url>
    <content><![CDATA[<h3 id="HTML-Attributes"><a href="#HTML-Attributes" class="headerlink" title="HTML Attributes"></a>HTML Attributes</h3><table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>alt</td>
<td>Specifies an alternative text for an image, when the image cannot be displayed                 图片无法显示时候提示是怎么样的图片</td>
</tr>
<tr>
<td>disabled</td>
<td>Specifies that an input element should be disabled</td>
</tr>
<tr>
<td>href</td>
<td>Specifies the URL (web address) for a link</td>
</tr>
<tr>
<td>id</td>
<td>Specifies a unique id for an element</td>
</tr>
<tr>
<td>src</td>
<td>Specifies the URL (web address) for an image  也就是图片的source</td>
</tr>
<tr>
<td>style</td>
<td>Specifies an inline CSS style for an element</td>
</tr>
<tr>
<td>title</td>
<td>Specifies extra information about an element (displayed as a tool tip)                                   鼠标停留时显示的字样</td>
</tr>
<tr>
<td>width, height</td>
<td>图片的宽和高</td>
</tr>
</tbody>
</table>
<h2 id="HTML-Horizontal-Rules-标签水平"><a href="#HTML-Horizontal-Rules-标签水平" class="headerlink" title="HTML Horizontal Rules 标签水平"></a>HTML Horizontal Rules 标签水平</h2><p>The <code>&lt;hr&gt;</code> tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.</p>
<p>The <code>&lt;hr&gt;</code> element is used to separate content (or define a change) in an HTML page:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is heading 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is heading 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is some other text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="This-is-heading-1"><a href="#This-is-heading-1" class="headerlink" title="This is heading 1"></a>This is heading 1</h1><p>This is some text.</p>
<hr>
<h2 id="This-is-heading-2"><a href="#This-is-heading-2" class="headerlink" title="This is heading 2"></a>This is heading 2</h2><p>This is some other text.</p>
<hr>
<h2 id="This-is-heading-2-1"><a href="#This-is-heading-2-1" class="headerlink" title="This is heading 2"></a>This is heading 2</h2><p>This is some other text.</p>
<h2 id="Bigger-Headings-更大的标题"><a href="#Bigger-Headings-更大的标题" class="headerlink" title="Bigger Headings 更大的标题"></a>Bigger Headings 更大的标题</h2><p>Each HTML heading has a default size. However, you can specify the size for any heading with the <code>style</code> attribute, using the CSS <code>font-size</code> property:</p>
<p>也就是说h1, h2, h3这些的字体大小都是可以调整的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&quot;font-size:60px;&quot;&gt;Heading 1&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h2 id="The-HTML-lt-pre-gt-Element-标签实例预格式化的文本"><a href="#The-HTML-lt-pre-gt-Element-标签实例预格式化的文本" class="headerlink" title="The HTML &lt;pre&gt;  Element 标签实例预格式化的文本"></a>The HTML <code>&lt;pre&gt;</code>  Element 标签实例预格式化的文本</h2><p>The HTML <code>&lt;pre&gt;</code> element defines preformatted text.</p>
<p>The text inside a <code>&lt;pre&gt;</code> element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks:</p>
<p>会保留文本原格式</p>
<table>
<thead>
<tr>
<th>Tag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>p</td>
<td>Defines a paragraph</td>
</tr>
<tr>
<td>br</td>
<td>Inserts a single line break</td>
</tr>
<tr>
<td>pre</td>
<td>Defines pre-formatted text</td>
</tr>
</tbody>
</table>
<h2 id="Style-Chapter-Summary"><a href="#Style-Chapter-Summary" class="headerlink" title="Style Chapter Summary"></a>Style Chapter Summary</h2><ul>
<li>Use the <code>style</code> attribute for styling HTML elements</li>
<li>Use <code>background-color</code> for background color</li>
<li>Use <code>color</code> for text colors</li>
<li>Use <code>font-family</code> for text fonts</li>
<li>Use <code>font-size</code> for text sizes</li>
<li>Use <code>text-align</code> for text alignment</li>
</ul>
<h3 id="HTML-Formatting"><a href="#HTML-Formatting" class="headerlink" title="HTML Formatting"></a>HTML Formatting</h3><ul>
<li><p><code>&lt;b&gt;</code> - Bold text</p>
</li>
<li><p><code>&lt;strong&gt;</code> - Important text</p>
</li>
<li><p><code>&lt;i&gt;</code> - Italic text</p>
</li>
<li><p><code>&lt;em&gt;</code> - Emphasized text</p>
</li>
<li><p><code>&lt;mark&gt;</code> - Marked text</p>
</li>
<li><p><code>&lt;small&gt;</code> - Small text</p>
</li>
<li><p><code>&lt;del&gt;</code> - Deleted text</p>
</li>
<li><p><code>&lt;ins&gt;</code> - Inserted text</p>
</li>
<li><p><code>&lt;sub&gt;</code> - Subscript text</p>
</li>
<li><p><code>&lt;sup&gt;</code> - Superscript text</p>
</li>
</ul>
<p>  mark <code>&lt;mark&gt;</code></p>
<p>  ​                  <img src="1.png" alt="1"></p>
<p>  del  <code>&lt;del&gt;</code></p>
<p>  ​                      <img src="2.png" alt="2"></p>
<p>  insert  <code>&lt;ins&gt;</code></p>
<p>  <img src="3.png" alt="3"></p>
<p>   small <code>&lt;small&gt;</code></p>
<p>​                         <img src="4.png" alt="4"></p>
<p>​    subscripted <code>&lt;sub&gt;</code></p>
<p><img src="5.png" alt="5"></p>
<p>​    superscripted  <code>&lt;sup&gt;</code></p>
<p><img src="6.png" alt="6"></p>
<h3 id="HTML-Quotation-and-Citation-Elements"><a href="#HTML-Quotation-and-Citation-Elements" class="headerlink" title="HTML Quotation and Citation Elements"></a>HTML Quotation and Citation Elements</h3><h2 id="HTML-lt-blockquote-gt-for-Quotations"><a href="#HTML-lt-blockquote-gt-for-Quotations" class="headerlink" title="HTML &lt;blockquote&gt; for Quotations"></a>HTML <code>&lt;blockquote&gt;</code> for Quotations</h2><p>The HTML <code>&lt;blockquote&gt;</code> element defines a section that is quoted from another source.</p>
<p>Browsers usually indent <code>&lt;blockquote&gt;</code> elements.  （块状引用）</p>
<p>The HTML <code>&lt;abbr&gt;</code> element defines an abbreviation or an acronym.（缩写简称 如：WHO是World Health Organization）</p>
<p>The HTML <code>&lt;address&gt;</code> element defines contact information (author/owner) of a document or an article.</p>
<p>The <code>&lt;address&gt;</code> element is usually displayed in italic. Most browsers will add a line break before and after the element.</p>
<table>
<thead>
<tr>
<th>Tag</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>abbr</td>
<td>Defines an abbreviation or acronym</td>
</tr>
<tr>
<td>address</td>
<td>Defines contact information for the author/owner of a document</td>
</tr>
<tr>
<td>bdo</td>
<td>Defines the text direction</td>
</tr>
<tr>
<td>blockquote</td>
<td>Defines a section that is quoted from another source</td>
</tr>
<tr>
<td>cite</td>
<td>Defines the title of a work</td>
</tr>
<tr>
<td>q</td>
<td>Defines a short inline quotation</td>
</tr>
</tbody>
</table>
<h2 id="The-HTML-lt-meta-gt-Element"><a href="#The-HTML-lt-meta-gt-Element" class="headerlink" title="The HTML &lt;meta&gt; Element"></a>The HTML <code>&lt;meta&gt;</code> Element</h2><p>The <code>&lt;meta&gt;</code> element is used to specify which character set is used, page description, keywords, author, and other metadata.</p>
<p>Metadata is used by browsers (how to display content), by search engines (keywords), and other web services.</p>
<p>Define the character set used:</p>
<h2 id="The-HTML-lt-base-gt-Element"><a href="#The-HTML-lt-base-gt-Element" class="headerlink" title="The HTML &lt;base&gt; Element"></a>The HTML <code>&lt;base&gt;</code> Element</h2><p>The <code>&lt;base&gt;</code> element specifies the base URL and base target for all relative URLs in a page:</p>
<h3 id="CSS-Floats"><a href="#CSS-Floats" class="headerlink" title="CSS Floats"></a>CSS Floats</h3><p>It is common to do entire web layouts using the CSS float property. Float is easy to learn - you just need to remember how the float and clear properties work.<strong>Disadvantages:</strong> Floating elements are tied to the document flow, which may harm the flexibility. Learn more about float in our <a href="https://www.w3schools.com/css/css_float.asp" target="_blank" rel="noopener">CSS Float and Clear</a> chapter.</p>
<h3 id="CSS-Flexbox"><a href="#CSS-Flexbox" class="headerlink" title="CSS Flexbox"></a>CSS Flexbox</h3><p>Flexbox is a new layout mode in CSS3.</p>
<p>Use of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices. <strong>Disadvantages:</strong>Does not work in IE10 and earlier.</p>
<p>Learn more about flexbox in our <a href="https://www.w3schools.com/css/css3_flexbox.asp" target="_blank" rel="noopener">CSS Flexbox</a> chapter.</p>
<table>
<thead>
<tr>
<th>Attribute</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>accept-charset</td>
<td>Specifies the charset used in the submitted form (default: the page charset).</td>
</tr>
<tr>
<td>action</td>
<td>Specifies an address (url) where to submit the form (default: the submitting page).</td>
</tr>
<tr>
<td>autocomplete</td>
<td>Specifies if the browser should autocomplete the form (default: on).</td>
</tr>
<tr>
<td>enctype</td>
<td>Specifies the encoding of the submitted data (default: is url-encoded).</td>
</tr>
<tr>
<td>method</td>
<td>Specifies the HTTP method used when submitting the form (default: GET).</td>
</tr>
<tr>
<td>name</td>
<td>Specifies a name used to identify the form (for DOM usage: document.forms.name).</td>
</tr>
<tr>
<td>novalidate</td>
<td>Specifies that the browser should not validate the form.</td>
</tr>
<tr>
<td>target</td>
<td>Specifies the target of the address in the action attribute (default: _self).</td>
</tr>
</tbody>
</table>
<h2 id="The-lt-select-gt-Element"><a href="#The-lt-select-gt-Element" class="headerlink" title="The &lt;select&gt; Element"></a>The <code>&lt;select&gt;</code> Element</h2><p>The <code>&lt;select&gt;</code> element defines a <strong>drop-down list</strong>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"volvo"</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"saab"</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"fiat"</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"audi"</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<select name="cars"><br>  <option value="volvo">Volvo</option><br>  <option value="saab">Saab</option><br>  <option value="fiat">Fiat</option><br>  <option value="audi">Audi</option><br></select>

<h3 id="Allow-Multiple-Selections"><a href="#Allow-Multiple-Selections" class="headerlink" title="Allow Multiple Selections:"></a>Allow Multiple Selections:</h3><p>Use the <code>multiple</code> attribute to allow the user to select more than one value:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"cars"</span> <span class="attr">size</span>=<span class="string">"4"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"volvo"</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"saab"</span>&gt;</span>Saab<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"fiat"</span>&gt;</span>Fiat<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"audi"</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<select name="cars" size="4" multiple><br>  <option value="volvo">Volvo</option><br>  <option value="saab">Saab</option><br>  <option value="fiat">Fiat</option><br>  <option value="audi">Audi</option><br></select>    

<h2 id="The-lt-textarea-gt-Element"><a href="#The-lt-textarea-gt-Element" class="headerlink" title="The &lt;textarea&gt; Element"></a>The <code>&lt;textarea&gt;</code> Element</h2><p>The <code>&lt;textarea&gt;</code> element defines a multi-line input field (<strong>a text area</strong>):</p>
<h2 id="HTML5-lt-datalist-gt-Element"><a href="#HTML5-lt-datalist-gt-Element" class="headerlink" title="HTML5 &lt;datalist&gt;Element"></a>HTML5 <code>&lt;datalist&gt;</code>Element</h2><p>The <code>&lt;datalist&gt;</code> element specifies a list of pre-defined options for an <code>&lt;input&gt;</code> element.</p>
<p>Users will see a drop-down list of the pre-defined options as they input data.</p>
<p>The <code>list</code> attribute of the <code>&lt;input&gt;</code> element, must <strong>refer to the <code>id</code></strong> attribute of the <code>&lt;datalist&gt;</code> element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/action_page.php"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">"browsers"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"browsers"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Internet Explorer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Firefox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Chrome"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Opera"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Safari"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action="/action_page.php"><br>  <input list="browsers"><br>  <datalist id="browsers"><br>    <option value="Internet Explorer"><br>    </option><option value="Firefox"><br>    </option><option value="Chrome"><br>    </option><option value="Opera"><br>    </option><option value="Safari"><br>  </option></datalist><br></form>

<h2 id="HTML5-lt-output-gt-Element"><a href="#HTML5-lt-output-gt-Element" class="headerlink" title="HTML5 &lt;output&gt;Element"></a>HTML5 <code>&lt;output&gt;</code>Element</h2><p>The <code>&lt;output&gt;</code> element represents the result of a calculation (like one performed by a script).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/action_page.php&quot;</span><br><span class="line">  oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;</span><br><span class="line">  0</span><br><span class="line">  &lt;input type=&quot;range&quot;  id=&quot;a&quot; name=&quot;a&quot; value=&quot;50&quot;&gt;</span><br><span class="line">  100 +</span><br><span class="line">  &lt;input type=&quot;number&quot; id=&quot;b&quot; name=&quot;b&quot; value=&quot;50&quot;&gt;</span><br><span class="line">  =</span><br><span class="line">  &lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;&lt;/output&gt;</span><br><span class="line">  &lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<form action="/action_page.php" oninput="x.value=parseInt(a.value)+parseInt(b.value)"><br>  0<br>  <input type="range" id="a" name="a" value="50"><br>  100 +<br>  <input type="number" id="b" name="b" value="50"><br>  =<br>  <output name="x" for="a b"></output><br>  <br><br><br>  <input type="submit"><br></form>

<h2 id="Input-Type-Password"><a href="#Input-Type-Password" class="headerlink" title="Input Type Password"></a>Input Type Password</h2><p><code>&lt;input type=&quot;password&quot;&gt;</code> defines a <strong>password field</strong>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  User name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  User password:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"psw"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form><br>  User name:<br><br>  <input type="text" name="username"><br><br>  User password:<br><br>  <input type="password" name="psw"><br></form>

<h2 id="Input-Type-Checkbox"><a href="#Input-Type-Checkbox" class="headerlink" title="Input Type Checkbox"></a>Input Type Checkbox</h2><p><code>&lt;input type=&quot;checkbox&quot;&gt;</code> defines a <strong>checkbox</strong>.</p>
<p>Checkboxes let a user select ZERO or MORE options of a limited number of choices.</p>
<form><br>  <input type="checkbox" name="vehicle1" value="Bike"> I have a bike<br><br>  <input type="checkbox" name="vehicle2" value="Car"> I have a car<br></form>

<h2 id="Input-Type-Color"><a href="#Input-Type-Color" class="headerlink" title="Input Type Color"></a>Input Type Color</h2><p>The <code>&lt;input type=&quot;color&quot;&gt;</code> is used for input fields that should contain a color.</p>
<p>Depending on browser support, a color picker can show up in the input field.</p>
<form><br>  Select your favorite color:<br>  <input type="color" name="favcolor"><br></form>

<h2 id="Input-Type-Date"><a href="#Input-Type-Date" class="headerlink" title="Input Type Date"></a>Input Type Date</h2><p>The <code>&lt;input type=&quot;date&quot;&gt;</code> is used for input fields that should contain a date.</p>
<p>Depending on browser support, a date picker can show up in the input field.</p>
<form><br>  Birthday:<br>  <input type="date" name="bday"><br></form>

<p>You can also use the <code>min</code> and <code>max</code> attributes to add restrictions to dates:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  Enter a date before 1980-01-01:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"bday"</span> <span class="attr">max</span>=<span class="string">"1979-12-31"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  Enter a date after 2000-01-01:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"bday"</span> <span class="attr">min</span>=<span class="string">"2000-01-02"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form><br>  Enter a date before 1980-01-01:<br>  <input type="date" name="bday" max="1979-12-31"><br><br>  Enter a date after 2000-01-01:<br>  <input type="date" name="bday" min="2000-01-02"><br><br></form>

<h2 id="Input-Type-Datetime-local"><a href="#Input-Type-Datetime-local" class="headerlink" title="Input Type Datetime-local"></a>Input Type Datetime-local</h2><p>The <code>&lt;input type=&quot;datetime-local&quot;&gt;</code> specifies a date and time input field, with no time zone.</p>
<p>Depending on browser support, a date picker can show up in the input field.</p>
<h2 id="Input-Type-Email"><a href="#Input-Type-Email" class="headerlink" title="Input Type Email"></a>Input Type Email</h2><p>The <code>&lt;input type=&quot;email&quot;&gt;</code> is used for input fields that should contain an e-mail address.</p>
<p>Depending on browser support, the e-mail address can be automatically validated when submitted.</p>
<p>Some smartphones recognize the email type, and adds “.com” to the keyboard to match email input.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  E-mail:</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form><br>  E-mail:<br>  <input type="email" name="email"><br></form>

<h2 id="The-readonly-Attribute"><a href="#The-readonly-Attribute" class="headerlink" title="The readonly Attribute"></a>The readonly Attribute</h2><p>The <code>readonly</code> attribute specifies that the input field is read only (cannot be changed):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action=""><br>  First name:<br><br>  <input type="text" name="firstname" value="John" readonly><br></form>

<h2 id="The-disabled-Attribute"><a href="#The-disabled-Attribute" class="headerlink" title="The disabled Attribute"></a>The disabled Attribute</h2><p>The <code>disabled</code> attribute specifies that the input field is disabled.</p>
<p>A disabled input field is unusable and un-clickable, and its value will not be sent when submitting the form:</p>
<form action=""><br>  First name:<br><br>  <input type="text" name="firstname" value="John" disabled><br></form>

<h2 id="The-size-Attribute"><a href="#The-size-Attribute" class="headerlink" title="The size Attribute"></a>The size Attribute</h2><p>The <code>size</code> attribute specifies the size (in characters) for the input field:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  First name:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstname"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">size</span>=<span class="string">"40"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<form action=""><br>  First name:<br><br>  <input type="text" name="firstname" value="John" size="40"><br></form>

<h2 id="The-maxlength-Attribute"><a href="#The-maxlength-Attribute" class="headerlink" title="The maxlength Attribute"></a>The maxlength Attribute</h2><p>The <code>maxlength</code> attribute specifies the maximum allowed length for the input field:</p>
<h2 id="The-autocomplete-Attribute"><a href="#The-autocomplete-Attribute" class="headerlink" title="The autocomplete Attribute"></a>The autocomplete Attribute</h2><p>The <code>autocomplete</code> attribute specifies whether a form or input field should have autocomplete on or off.</p>
<p>When autocomplete is on, the browser automatically completes the input values based on values that the user has entered before.</p>
<p><strong>Tip:</strong> It is possible to have autocomplete “on” for the form, and “off” for specific input fields, or vice versa.</p>
<p>The <code>autocomplete</code> attribute works with <code>&lt;form&gt;</code> and the following <code>&lt;input&gt;</code> types: text, search, url, tel, email, password, datepickers, range, and color.</p>
<h2 id="The-novalidate-Attribute"><a href="#The-novalidate-Attribute" class="headerlink" title="The novalidate Attribute"></a>The novalidate Attribute</h2><p>The <code>novalidate</code> attribute is a <code>&lt;form&gt;</code> attribute.</p>
<p>When present, novalidate specifies that the form data should not be validated when submitted.</p>
<h2 id="The-autofocus-Attribute"><a href="#The-autofocus-Attribute" class="headerlink" title="The autofocus Attribute"></a>The autofocus Attribute</h2><p>The <code>autofocus</code> attribute specifies that the input field should automatically get focus when the page loads.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">First name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="The-form-Attribute"><a href="#The-form-Attribute" class="headerlink" title="The form Attribute"></a>The form Attribute</h2><p>The <code>form</code> attribute specifies one or more forms an <code>&lt;input&gt;</code> element belongs to.</p>
<p><strong>Tip:</strong> To refer to more than one form, use a space-separated list of form ids.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/action_page.php"</span> <span class="attr">id</span>=<span class="string">"form1"</span>&gt;</span></span><br><span class="line">  First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lname"</span> <span class="attr">form</span>=<span class="string">"form1"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="The-formenctype-Attribute"><a href="#The-formenctype-Attribute" class="headerlink" title="The formenctype Attribute"></a>The formenctype Attribute</h2><p>The <code>formenctype</code> attribute specifies how the form data should be encoded when submitted (only for forms with method=”post”).</p>
<p>The <code>formenctype</code> attribute overrides the enctype attribute of the <code>&lt;form&gt;</code> element.</p>
<p>The <code>formenctype</code> attribute is used with <code>type=&quot;submit&quot;</code> and <code>type=&quot;image&quot;</code>.</p>
<h2 id="The-formmethod-Attribute"><a href="#The-formmethod-Attribute" class="headerlink" title="The formmethod Attribute"></a>The formmethod Attribute</h2><p>The <code>formmethod</code> attribute defines the HTTP method for sending form-data to the action URL.</p>
<p>The <code>formmethod</code> attribute overrides the method attribute of the <code>&lt;form&gt;</code> element.</p>
<p>The <code>formmethod</code> attribute can be used with <code>type=&quot;submit&quot;</code> and <code>type=&quot;image&quot;</code>.</p>
<h2 id="The-formnovalidate-Attribute"><a href="#The-formnovalidate-Attribute" class="headerlink" title="The formnovalidate Attribute"></a>The formnovalidate Attribute</h2><p>The <code>formnovalidate</code> attribute overrides the novalidate attribute of the <code>&lt;form&gt;</code> element.</p>
<p>The <code>formnovalidate</code> attribute can be used with <code>type=&quot;submit&quot;</code>.</p>
<h2 id="The-formtarget-Attribute"><a href="#The-formtarget-Attribute" class="headerlink" title="The formtarget Attribute"></a>The formtarget Attribute</h2><p>The <code>formtarget</code> attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form.</p>
<p>The <code>formtarget</code> attribute overrides the target attribute of the <code>&lt;form&gt;</code> element.</p>
<p>The <code>formtarget</code> attribute can be used with <code>type=&quot;submit&quot;</code> and <code>type=&quot;image&quot;</code>.</p>
<h2 id="The-multiple-Attribute"><a href="#The-multiple-Attribute" class="headerlink" title="The multiple Attribute"></a>The multiple Attribute</h2><p>The <code>multiple</code> attribute specifies that the user is allowed to enter more than one value in the <code>&lt;input&gt;</code> element.</p>
<p>The <code>multiple</code> attribute works with the following input types: email, and file.</p>
<hr>
<h2 id="The-pattern-Attribute正则表达式"><a href="#The-pattern-Attribute正则表达式" class="headerlink" title="The pattern Attribute正则表达式"></a>The pattern Attribute正则表达式</h2><p>The <code>pattern</code> attribute specifies a regular expression that the <code>&lt;input&gt;</code> element’s value is checked against.</p>
<p>The <code>pattern</code> attribute works with the following input types: text, search, url, tel, email, and password.</p>
<p><strong>Tip:</strong> Use the global <a href="https://www.w3schools.com/tags/att_global_title.asp" target="_blank" rel="noopener">title</a> attribute to describe the pattern to help the user.</p>
<p><strong>Tip:</strong> Learn more about <a href="https://www.w3schools.com/js/js_regexp.asp" target="_blank" rel="noopener">regular expressions</a> in our JavaScript tutorial.</p>
<h2 id="The-placeholder-Attributes"><a href="#The-placeholder-Attributes" class="headerlink" title="The placeholder Attributes"></a>The placeholder Attributes</h2><p>The <code>placeholder</code> attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).</p>
<p>The hint is displayed in the input field before the user enters a value.</p>
<p>The <code>placeholder</code> attribute works with the following input types: text, search, url, tel, email, and password.</p>
<h2 id="The-placeholder-Attribute-HINT"><a href="#The-placeholder-Attribute-HINT" class="headerlink" title="The placeholder Attribute  (HINT )"></a>The placeholder Attribute  (HINT )</h2><p>The <code>placeholder</code> attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).</p>
<p>The hint is displayed in the input field before the user enters a value.</p>
<p>The <code>placeholder</code> attribute works with the following input types: text, search, url, tel, email, and password.</p>
<p>&lt;!DOCTYPE html&gt;</p>
<p><html></html></p>
<p><body><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"live2d-widget-model-shizuku"},"display":{"position":"right","width":80,"height":200},"mobile":{"show":false},"log":false});</script></body></p>
<p></p><h2>The placeholder Attribute</h2><p></p>
<p>The placeholder attribute specifies a hint that describes the expected value of an input field (a sample value or a short description of the format).</p>

<form action="/action_page.php"><br>  <input type="text" name="fname" placeholder="First name"><br><br>  <input type="text" name="lname" placeholder="Last name"><br><br>  <input type="submit" value="Submit"><br></form>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode_5</title>
    <url>/2018/11/15/leetcode_5/</url>
    <content><![CDATA[<h1 id="LeetCode-No-5"><a href="#LeetCode-No-5" class="headerlink" title="[LeetCode: No.5]"></a>[LeetCode: No.5]</h1><blockquote>
<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>
</blockquote>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Note: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;cbbd&quot;</span><br><span class="line">Output: &quot;bb&quot;</span><br></pre></td></tr></table></figure>
<p>  <strong>最长回文子串的中间子串也是回文串，换言之，回文串是否最长，可以看回文串两边的字符是否相同。例如“dabcba”的最长回文子串是“abcba”，</strong>其可看出回文子串“bcb”的拓展，判断“bab”两边的字符是否相同决定是否进行回文子串拓展（可以利用切片的索引左右移动实现）</p>
<p>  由这个想法下， 写出第一个代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(s) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        self.res = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            left = right = i</span><br><span class="line">            <span class="keyword">while</span> left&gt;=<span class="number">0</span> <span class="keyword">and</span> right &lt; len(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">                left -= <span class="number">1</span></span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> right -left <span class="number">-1</span> &gt; len(self.res):</span><br><span class="line">                self.res = s[left+<span class="number">1</span>:right]</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>其中在While语句中， s[left] == s[right]<strong>是一定要放在最后面的</strong>，因为在python中and的机制是这样的and之前的是Flase， 那么and后面的就不会被执行，有可能会出现left=-1或者right=len(s)，这是的s[left]和s[right]会超出索引值。还有就是<strong>一定要注意字符串的索引值和长度</strong>。</p>
<p>  但是这段代码还是会出错，当输出值s为’abbc’是 ，检测不出bb，因为他没有对称中心。所以我们在做添加，left和right的初始值不设为想等而是相差1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span>      </span><br><span class="line">        <span class="keyword">if</span> len(s) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        self.res = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="comment">#这里就是考虑到两种情况，从相同字符拓宽和从相邻字符拓宽</span></span><br><span class="line">            self.helper(s, i, i)</span><br><span class="line">            self.helper(s, i, i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self,s, left, right)</span>:</span></span><br><span class="line">        <span class="comment">#这里是判断当前回文子串两端相同的时候，向两端拓展</span></span><br><span class="line">        <span class="keyword">while</span> left&gt;=<span class="number">0</span> <span class="keyword">and</span> right &lt; len(s) <span class="keyword">and</span> s[left] == s[right]:</span><br><span class="line">            left -= <span class="number">1</span></span><br><span class="line">            right += <span class="number">1</span></span><br><span class="line">            <span class="comment">#这里的right-left-1是当前的回文子串长度，大于历史最大值，就更新最大值</span></span><br><span class="line">        <span class="keyword">if</span> right -left <span class="number">-1</span> &gt; len(self.res):</span><br><span class="line">            self.res = s[left+<span class="number">1</span>:right]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_4</title>
    <url>/2018/11/13/leetcode_4/</url>
    <content><![CDATA[<h1 id="LeetCode-No-4"><a href="#LeetCode-No-4" class="headerlink" title="[LeetCode: No.4]"></a>[LeetCode: No.4]</h1><blockquote>
<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p>
</blockquote>
<p>仔细分析题目，nums1和nums2都已经是排好序了的，这就大大的降低了难度，让找到两个列表的中间值，其实我们可以拓展为找到两个列表的第k个值。当然这个是拓展部分了，对于这个题目，有不同的思路，最简单粗暴的就是将两个列表合并，之后进行排序，拍好序后进行寻找中间值就简单了。但是用传统的先合并再排序，效率想必会很低~</p>
<p>我们发现对于两个已经有序的列表（从小到大），其实有一个更优的排序方式：<strong>从小到大，依次进行列表元素的比较，较小值放到一个新列表中，比如A中该位置的值较小，将其放到新的列表C中，同时将A列表下一个值继续与B中当前位置元素进行比较，以此类推。</strong>这样的比较次数就比先合并在排序小很多啦！代码如下：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :rtype: float</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        length = len(nums1)+len(nums2)</span><br><span class="line">        <span class="comment">#计算总长度</span></span><br><span class="line">        num = [<span class="number">0</span>]  * length</span><br><span class="line">        </span><br><span class="line">        index, i_1, i_2 = <span class="number">0</span></span><br><span class="line">        <span class="comment">#当输入两个列表都还存在元素没进行比较的时候，循环进行对比</span></span><br><span class="line">        <span class="comment">#并将较小值放入新列表，同时较小元素的列表和新列表索引加一</span></span><br><span class="line">        <span class="keyword">while</span> i_1&lt;len(nums1) <span class="keyword">and</span> i_2 &lt; len(nums2):</span><br><span class="line">        	<span class="keyword">if</span> nums1[i_1] &gt;= nums2[i_2]:</span><br><span class="line">        		num[index] = nums2[i_2]</span><br><span class="line">        		i_2 += <span class="number">1</span></span><br><span class="line">        	<span class="keyword">else</span>:</span><br><span class="line">        	    num[index] = nums1[i_1]</span><br><span class="line">        	    i_1 += <span class="number">1</span></span><br><span class="line">        	index += <span class="number">1</span></span><br><span class="line">        <span class="comment">#当存在某一个列表所有元素已经比较完，即排好了序</span></span><br><span class="line">        <span class="comment">#剩下那个列表剩下的值直接放入新列表对应位置即可</span></span><br><span class="line">        <span class="keyword">if</span> i_1 == len(nums1)  :   <span class="comment">#这里要注意的是， 我们while语句最后都多加了一个1所以这里是==len(nums1)</span></span><br><span class="line">        	num[index:] = nums2[i_2:]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	num[index:] = nums1[i_1:]</span><br><span class="line">        <span class="keyword">if</span> length % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        	<span class="keyword">return</span> float(num[length//<span class="number">2</span>]+num[length//<span class="number">2</span> - <span class="number">1</span>])/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	<span class="keyword">return</span> num[length//<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>python妹子爬虫（1）</title>
    <url>/2018/11/12/python%E5%A6%B9%E5%AD%90%E7%88%AC%E8%99%AB(1)/</url>
    <content><![CDATA[<p>这篇博客写一个python妹子爬虫(嘿嘿嘿)</p>
<p>我们要爬取的网站是<a href="http://www.doyo.cn/tu" target="_blank" rel="noopener">http://www.doyo.cn/tu</a> ，网页是这样的：</p>
<p><img src="1.png" alt="1"></p>
<p>可以看到，好多美女的。</p>
<p>  我们点开其中一个连接，进入其页面，是哇小姐姐真漂亮^^，同时我们发现链接地址地址为<a href="http://www.doyo.cn/picture/7399" target="_blank" rel="noopener">http://www.doyo.cn/picture/7399</a> ，也就是说我们只要知道/picure/后面的数字就可以找到这个小姐姐了！~</p>
<a id="more"></a>
<p><img src="2.png" alt="2"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p> 大体的思路很简单，就是先爬取每一个小姐姐的连接，然后由每个分类爬取这个小姐姐的所有图片。</p>
<h3 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> RequestException</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure>
<h3 id="爬取分类的连接"><a href="#爬取分类的连接" class="headerlink" title="爬取分类的连接"></a>爬取分类的连接</h3><p> 第一步就是获得分类连接，我们在首页打开Chrome的审查，点开Network选项， 发现在Ajax请求返回了一个Json格式的数据，其中包括了每个小姐姐的信息，其中就有这个小姐姐的网页连接</p>
<p><img src="3.png" alt="3"></p>
<p>注意到这第七项的7276就是这个小姐姐的连接的后缀了。</p>
<p>这个Ajax的连接是<a href="http://www.doyo.cn/tu/getdata?cate=all&amp;tag=all&amp;sort=updatetime&amp;start=50&amp;count=25" target="_blank" rel="noopener">http://www.doyo.cn/tu/getdata?cate=all&amp;tag=all&amp;sort=updatetime&amp;start=50&amp;count=25</a> ，也就是说我们只要设置其中的start参数就可以无限的得到这些包含小姐姐信息的Json文件连接了。</p>
<p>由此引出第一个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_url = <span class="string">'http://www.doyo.cn/tu/getdata'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(start)</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">"cate"</span>: <span class="string">"all"</span>,</span><br><span class="line">        <span class="string">"tag"</span>: <span class="string">"all"</span>,</span><br><span class="line">        <span class="string">"sort"</span>: <span class="string">"updatetime"</span>,</span><br><span class="line">        <span class="string">"start"</span>: start,</span><br><span class="line">        <span class="string">"count"</span>: <span class="number">25</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=data_url, params=params)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">"NetWork Error"</span>)</span><br></pre></td></tr></table></figure>
<p>其中我们传入的参数是start，这里的data_url就是Ajax亲贵根网页。构造一个params字典作为参数然后用requests.get请求网页，我们通过我们传入的params，requests将会自动给我们构建出url连接，如果请求失败，我们设置except，自动抛出”Network Error”</p>
<h3 id="解析Ajax请求返回的Json文本"><a href="#解析Ajax请求返回的Json文本" class="headerlink" title="解析Ajax请求返回的Json文本"></a>解析Ajax请求返回的Json文本</h3><p>  由上一个函数返回值是一个文本，大概是这个样子的</p>
<p><img src="4.png" alt="4"></p>
<p>它的本质是一个Json格式的字典，就是前面图片</p>
<p><img src="5.png" alt="5"></p>
<p>我们定义一个函数，用json解析文档，其中的number是指小姐姐地址的后缀，count是指小姐姐有几张图片，等下我们会用这两个来构建图片的网址：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_data</span><span class="params">(html)</span>:</span></span><br><span class="line">    data = json.loads(html)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">and</span> <span class="string">'info'</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> data.get(<span class="string">'info'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'title'</span>: info[<span class="number">0</span>],</span><br><span class="line">                <span class="string">'count'</span>: info[<span class="number">1</span>],</span><br><span class="line">                <span class="string">'pic'</span>: info[<span class="number">6</span>],</span><br><span class="line">                <span class="string">'number'</span>: info[<span class="number">7</span>]</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>如果data字典中不是None并且字典中有‘info’我们对info中的值进行操作。这个键值我们yield返回一个生成器，生成器每次都会迭代出一个json格式的文本</p>
<h3 id="解析每个json文本，得到链接列表"><a href="#解析每个json文本，得到链接列表" class="headerlink" title="解析每个json文本，得到链接列表"></a>解析每个json文本，得到链接列表</h3><p>  上一个函数中返回的是一个生成器，每次迭代都会返回json文本，接下来我们就需要根据每每个json文本得到图片的地址了每张小姐姐图片的地址是<a href="http://www.doyo.cn/picture/{number}/{index}/viewhttp://www.doyo.cn/picture/{number}/{index}/view" target="_blank" rel="noopener">http://www.doyo.cn/picture/{number}/{index}/viewhttp://www.doyo.cn/picture/{number}/{index}/view</a> ，其中number是小姐姐的编号，index就是某个小姐姐的所有图片中的某一张的编号了我们用一个for语句来得到每张图片。然后yield出所有的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root_url = <span class="string">'http://www.doyo.cn/picture/&#123;number&#125;/&#123;index&#125;/view'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_urllist</span><span class="params">(res)</span>:</span></span><br><span class="line">    <span class="comment"># root_url = 'http://www.doyo.cn/picture/&#123;number&#125;/&#123;index&#125;/view'</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, int(res.get(<span class="string">'count'</span>)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> root_url.format(number=res.get(<span class="string">'number'</span>), index=index)</span><br></pre></td></tr></table></figure>
<h3 id="解析每个链接，得到每一张图片链接"><a href="#解析每个链接，得到每一张图片链接" class="headerlink" title="解析每个链接，得到每一张图片链接"></a>解析每个链接，得到每一张图片链接</h3><p> 经过上一步得到的图片列表，其中每一个连接的页面将会是这样：</p>
<p><img src="6.png" alt="6"></p>
<p>用正则表达式匹配图片的链接，先写正则表达式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">'&lt;img src="(.*?)" id="big_picture" /&gt;'</span>, re.S)</span><br></pre></td></tr></table></figure>
<p>然后进行匹配：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_url</span><span class="params">(imag_url)</span>:</span></span><br><span class="line">    print(<span class="string">'image_url'</span> , imag_url)</span><br><span class="line">    html = get_html(imag_url)</span><br><span class="line">    res = re.search(pattern=pattern, string=html)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="keyword">return</span> res.group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> RequestException:</span><br><span class="line">        print(<span class="string">"connection error"</span>)</span><br></pre></td></tr></table></figure>
<p>返回链接。</p>
<h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(res)</span>:</span></span><br><span class="line">    os.chdir(parent_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.mkdir(res.get(<span class="string">'title'</span>))</span><br><span class="line">        os.chdir(res.get(<span class="string">'title'</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    url_list = get_img_urllist(res)</span><br><span class="line">    <span class="keyword">for</span> imag_url <span class="keyword">in</span> url_list:</span><br><span class="line">        url = get_img_url(imag_url)</span><br><span class="line">        print(imag_url)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            filename = str(random.random())</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            response = requests.get(url, headers=headers)</span><br><span class="line">            <span class="keyword">with</span> open(filename + <span class="string">'.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>这里我们保存图片时，每个小姐姐都新建一个文件夹存入</p>
<h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(start)</span>:</span></span><br><span class="line">    html = get_one_page(start)</span><br><span class="line">    res = get_one_data(html)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> res:</span><br><span class="line">        print(each)</span><br><span class="line">        write_to_file(each)</span><br><span class="line">        save_img(each)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = [n * <span class="number">25</span> <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> start:</span><br><span class="line">        main(i)</span><br><span class="line">    j.close()</span><br></pre></td></tr></table></figure>
<h3 id="开始爬取"><a href="#开始爬取" class="headerlink" title="开始爬取"></a>开始爬取</h3><p><img src="7.png" alt="7"></p>
<p><img src="8.png" alt="8"></p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>Python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>基于TensorFlow的验证码识别</title>
    <url>/2018/11/11/%E5%9F%BA%E4%BA%8ETensorFlow%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>  这篇博客我们来用TensorFlow来实现一个验证码识别的深度学习模型，我们的。我们会先用标注好的数据来训练第一个模型，然后再用模型来实现验证码识别</p>
<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><p>  我们先看下验证码是怎么样的， 我们使用Python的captcha库来生成验证码，再用pip安装好captcha之后，就可以用代码来生成一个简单的图形验证码了。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> captcha.image <span class="keyword">import</span> ImageCaptcha</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot  <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">text = <span class="string">'1234'</span></span><br><span class="line">image = ImageCaptcha()</span><br><span class="line">captcha = image.generate(text)</span><br><span class="line">captcha_image = Image.open(captcha)</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(captcha_image)</span><br></pre></td></tr></table></figure></p>
<p>运行代码，就可以看到这样的图片了：</p>
<a id="more"></a>
<p><img src="1.png" alt="1"></p>
<p>可以看到图片中的验证码内容就是我们所定义的text内容，这样我们就可以得到一张图片和其所对应的真是文本你，由此我们用它生成一批训练数据和测试数据</p>
<h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><p>我们先定义一个词表和其长度变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VOCAB = list(str(<span class="number">123456789</span>))</span><br><span class="line">CAPTCHA_LENGTH = <span class="number">4</span></span><br><span class="line">VOCAB_LENGTH = len(VOCAB)</span><br></pre></td></tr></table></figure>
<p>  这里 VOCAB 就是词表的内容，即 0 到 9 这 10 个数字，验证码的字符个数即 CAPTCHA_LENGTH 是 4，词表长度是 VOCAB 的长度，即 10。</p>
<p>  接下来我们定义一个生成验证码数据的方法，流程类似上文，只不过这里我们利用np.asarray()方法将返回的数据转为了 Numpy 形式的数组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_captcha</span><span class="params">(captcha_text)</span>:</span></span><br><span class="line">    image = ImageCaptcha()</span><br><span class="line">    captcha  = image.generate(captcha_text)</span><br><span class="line">    captcha_image = Image.open(captcha)</span><br><span class="line">    captcha_array = np.asarray(captcha_image)</span><br><span class="line">    <span class="keyword">return</span> captcha_array</span><br></pre></td></tr></table></figure>
<p>  我们看一下生成的验证码的矩阵shape是(60, 160, 3),是 60 x 160 像素的验证码，每个像素都有 RGB 值，所以最后一维即为像素的 RGB 值。</p>
<p>  接下来我们需要定义 label，由于我们需要使用深度学习模型进行训练，所以这里我们的 label 数据最好使用 One-Hot 编码，即如果验证码文本是 1234，那么应该词表索引位置置 1，总共的长度是 40，我们用程序实现一下 One-Hot 编码和文本的互相转换。即如果验证码文本是 1234，那么应该词表索引位置置 1，总共的长度是 40</p>
<p>one-hot编码将离散特征的取值扩展到了欧式空间，离散特征的某个取值就对应欧式空间的某个点。one-hot多应用于分类器中。</p>
<blockquote>
<p>  将离散型特征使用one-hot编码，确实会让特征之间的距离计算更加合理。比如，有一个离散型特征，代表工作类型，该离散型特征，共有三个取值，不使用one-hot编码，其表示分别是x_1 = (1), x_2 = (2), x_3 = (3)。两个工作之间的距离是，(x_1, x_2) = 1, d(x_2, x_3) = 1, d(x_1, x_3) = 2。那么x_1和x_3工作之间就越不相似吗？显然这样的表示，计算出来的特征的距离是不合理。那如果使用one-hot编码，则得到x_1 = (1, 0, 0), x_2 = (0, 1, 0), x_3 = (0, 0, 1)，那么两个工作之间的距离就都是sqrt(2).即每两个工作之间的距离是一样的，显得更合理。</p>
</blockquote>
<p>我们用程序实现一下one-hot编码和文本的互相转化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text2vec</span><span class="params">(text)</span>:</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> len(text) &gt; CAPTCHA_LENGTH:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    vector = np.zeros(CAPTCHA_LENGTH * VOCAB_LENGTH)</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(text):</span><br><span class="line">        index = i * VOCAB_LENGTH + VOCAB.index(c)</span><br><span class="line">        vector[index] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> vector</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vec2text</span><span class="params">(vector)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(vector, np.ndarray):</span><br><span class="line">        vector = np.asarray(vector)</span><br><span class="line">    vector = np.reshape(vector, [CAPTCHA_LENGTH, <span class="number">-1</span>])   <span class="comment">#这边的reshape的-1是将会被自动填入np的总长度除以CAPTCHA_LENGTH</span></span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> vector:</span><br><span class="line">        text += VOCAB[np.argmax(item)]</span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure>
<p>接下来我们构造出一批数据， x数据就是验证码的Numpy数组，y数据就是验证码文本的on-hot编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, exists</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> makedirs</span><br><span class="line"></span><br><span class="line">DATA_LENGTH = <span class="number">10000</span></span><br><span class="line">DATA_PATH = <span class="string">'data'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_text</span><span class="params">()</span>:</span></span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(CAPTCHA_LENGTH):</span><br><span class="line">        text += random.choice(VOCAB)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_data</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Generating Data...'</span>)</span><br><span class="line">    data_x, data_y = [], []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate data x and y</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(DATA_LENGTH):</span><br><span class="line">        text = get_random_text()</span><br><span class="line">        <span class="comment"># get captcha array</span></span><br><span class="line">        captcha_array = generate_captcha(text)</span><br><span class="line">        <span class="comment"># get vector</span></span><br><span class="line">        vector = text2vec(text)</span><br><span class="line">        data_x.append(captcha_array)</span><br><span class="line">        data_y.append(vector)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># write data to pickle</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists(DATA_PATH):</span><br><span class="line">        makedirs(DATA_PATH)</span><br><span class="line"></span><br><span class="line">    x = np.asarray(data_x, np.float32)</span><br><span class="line">    y = np.asarray(data_y, np.float32)</span><br><span class="line">    <span class="keyword">with</span> open(join(DATA_PATH, <span class="string">'data.pkl'</span>), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(x, f)</span><br><span class="line">        pickle.dump(y, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, exists</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> makedirs</span><br><span class="line"> </span><br><span class="line">DATA_LENGTH = <span class="number">10000</span></span><br><span class="line">DATA_PATH = <span class="string">'data'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_text</span><span class="params">()</span>:</span></span><br><span class="line">    text = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(CAPTCHA_LENGTH):</span><br><span class="line">        text += random.choice(VOCAB)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_data</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Generating Data...'</span>)</span><br><span class="line">    data_x, data_y = [], []</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># generate data x and y</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(DATA_LENGTH):</span><br><span class="line">        text = get_random_text()</span><br><span class="line">        <span class="comment"># get captcha array</span></span><br><span class="line">        captcha_array = generate_captcha(text)</span><br><span class="line">        <span class="comment"># get vector</span></span><br><span class="line">        vector = text2vec(text)</span><br><span class="line">        data_x.append(captcha_array)</span><br><span class="line">        data_y.append(vector)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># write data to pickle</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> exists(DATA_PATH):</span><br><span class="line">        makedirs(DATA_PATH)</span><br><span class="line"> </span><br><span class="line">    x = np.asarray(data_x, np.float32)</span><br><span class="line">    y = np.asarray(data_y, np.float32)</span><br><span class="line">    <span class="keyword">with</span> open(join(DATA_PATH, <span class="string">'data.pkl'</span>), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(x, f)</span><br><span class="line">        pickle.dump(y, f)</span><br></pre></td></tr></table></figure>
<p>  定义一个get_random_text()函数，  用于随机生成验证码文本， 然后用pickle写进硬盘。完成了生成数据的工作。</p>
<h3 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h3><p>  我们用pickle.loads导入数据  ，从sklearn.model_selection 导入 train_test_split方法将模型分为三部分，训练集开发集，验证集，(比例为6：2：2):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'data.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data_x = pickle.load(f)</span><br><span class="line">    data_y = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> standardize(data_x), data_y</span><br><span class="line"></span><br><span class="line">train_x, test_x, train_y, test_y = train_test_split(data_x, data_y, test_size=<span class="number">0.4</span>, random_state=<span class="number">40</span>)</span><br><span class="line">dev_x, test_x, dev_y, test_y, = train_test_split(test_x, test_y, test_size=<span class="number">0.5</span>, random_state=<span class="number">40</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data_x = pickle.load(f)</span><br><span class="line">    data_y = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> standardize(data_x), data_y</span><br><span class="line"> </span><br><span class="line">train_x, test_x, train_y, test_y = train_test_split(data_x, data_y, test_size=<span class="number">0.4</span>, random_state=<span class="number">40</span>)</span><br><span class="line">dev_x, test_x, dev_y, test_y, = train_test_split(test_x, test_y, test_size=<span class="number">0.5</span>, random_state=<span class="number">40</span>)</span><br></pre></td></tr></table></figure>
<p>接下来我们使用者三个数据集构建三个 Dataset 对象, 关于Tensorflow中的数据导入，可以参考<a href="https://www.tensorflow.org/programmers_guide/datasets?hl=zh-cn" target="_blank" rel="noopener">Google官方文档</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train and dev dataset</span></span><br><span class="line">train_dataset = tf.data.Dataset.from_tensor_slices((train_x, train_y)).shuffle(<span class="number">10000</span>)</span><br><span class="line">train_dataset = train_dataset.batch(FLAGS.train_batch_size)</span><br><span class="line"> </span><br><span class="line">dev_dataset = tf.data.Dataset.from_tensor_slices((dev_x, dev_y))</span><br><span class="line">dev_dataset = dev_dataset.batch(FLAGS.dev_batch_size)</span><br><span class="line"> </span><br><span class="line">test_dataset = tf.data.Dataset.from_tensor_slices((test_x, test_y))</span><br><span class="line">test_dataset = test_dataset.batch(FLAGS.test_batch_size)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.tensorflow.org/api_docs/python/tf/data/Dataset?hl=zh-cn" target="_blank" rel="noopener"><code>tf.data.Dataset</code></a> 表示一系列元素，其中每个元素包含一个或多个 <code>Tensor</code> 对象。例如，在图片管道中，元素可能是单个训练样本，具有一对表示图片数据和标签的张量。可以通过两种不同的方式来创建数据集：</p>
<ul>
<li>创建<strong>来源</strong>（例如 <code>Dataset.from_tensor_slices()</code>），以通过一个或多个 <a href="https://www.tensorflow.org/api_docs/python/tf/Tensor?hl=zh-cn" target="_blank" rel="noopener"><code>tf.Tensor</code></a> 对象构建数据集。</li>
<li>应用<strong>转换</strong>（例如 <code>Dataset.batch()</code>），以通过一个或多个 <a href="https://www.tensorflow.org/api_docs/python/tf/data/Dataset?hl=zh-cn" target="_blank" rel="noopener"><code>tf.data.Dataset</code></a> 对象构建数据集。</li>
</ul>
</blockquote>
<p>然后我们初始化一个迭代器，并绑定到这个数据集上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a reinitializable iterator</span></span><br><span class="line">iterator = tf.data.Iterator.from_structure(train_dataset.output_types, train_dataset.output_shapes)</span><br><span class="line">train_initializer = iterator.make_initializer(train_dataset)</span><br><span class="line">dev_initializer = iterator.make_initializer(dev_dataset)</span><br><span class="line">test_initializer = iterator.make_initializer(test_dataset)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.tensorflow.org/api_docs/python/tf/data/Iterator?hl=zh-cn" target="_blank" rel="noopener"><code>tf.data.Iterator</code></a> 提供了从数据集中提取元素的主要方法。<code>Iterator.get_next()</code> 返回的操作会在执行时生成 <code>Dataset</code> 的下一个元素，并且此操作通常充当输入管道代码和模型之间的接口。最简单的迭代器是“单次迭代器”，它与特定的 <code>Dataset</code> 相关联，并对其进行一次迭代。要实现更复杂的用途，您可以通过 <code>Iterator.initializer</code>操作使用不同的数据集重新初始化和参数化迭代器，这样一来，您就可以在同一个程序中对训练和验证数据进行多次迭代（举例而言）。</p>
</blockquote>
<p>接下来是模型部分了。为了简化写法，直接采用了TensorFlow中的layers模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input Layer</span></span><br><span class="line"><span class="comment"># x.shape = [-1, 60, 160, 3]</span></span><br><span class="line">x, y_label = iterator.get_next()</span><br><span class="line">keep_prob = tf.placeholder(tf.float32, [])</span><br><span class="line">y = tf.cast(x, tf.float32)</span><br><span class="line"><span class="comment"># 3 CNN layers</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    y = tf.layers.conv2d(y, filters=<span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="string">'same'</span>, activation=tf.nn.relu)</span><br><span class="line">    y = tf.layers.max_pooling2d(y, pool_size=<span class="number">1</span>, strides=<span class="number">2</span>, padding=<span class="string">'same'</span>)</span><br><span class="line">    <span class="comment"># y = tf.layers.dropout(y, rate=keep_prob)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 2 dense layers</span></span><br><span class="line">y = tf.layers.flatten(y)</span><br><span class="line">y = tf.layers.dense(y, <span class="number">1024</span>, activation=tf.nn.relu)</span><br><span class="line">y = tf.layers.dropout(y, rate=keep_prob)</span><br><span class="line">y = tf.layers.dense(y, VOCAB_LENGTH)</span><br></pre></td></tr></table></figure>
<p>  这里我们的卷积核（patch）为3，padding模式为SAME，激活函数为relu。max_pooling的size为1，strides为2. 通过这样的卷积和池化层，数据的尺寸将会变成[sample_number, 32] 32是我们在tf.layers.cov2d中设置的输出channels数量(filter)。</p>
<p>   经过全连接网络变换之后，y 的 shape 就变成了 [batch_size, n_classes]，我们的 label 是 CAPTCHA_LENGTH 个 One-Hot 向量拼合而成的，在这里我们想使用交叉熵来计算，但是交叉熵计算的时候，label 参数向量最后一维各个元素之和必须为 1，不然计算梯度的时候会出现问题。<strong>对于这个例子来说，我们现在未经处理label和logits的shape都是是[sameple_number, 1, 40]，我们想把它变成[sample_number, 4, 10]</strong>详情参见 TensorFlow 的官方文档：<a href="https://www.tensorflow.org/api_docs/python/tf/nn/softmax_cross_entropy_with_logits：" target="_blank" rel="noopener"></a></p>
<blockquote>
<p>NOTE: While the classes are mutually exclusive, their probabilities need not be. All that is required is that each row of labels is a valid probability distribution. If they are not, the computation of the gradient will be incorrect.</p>
</blockquote>
<p>reshape代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y_reshape = tf.reshape(y, [<span class="number">-1</span>, VOCAB_LENGTH])</span><br><span class="line">y_label_reshape = tf.reshape(y_label, [<span class="number">-1</span>, VOCAB_LENGTH])</span><br></pre></td></tr></table></figure>
<p>接下来计算Loss和Accuracy，<a href="https://francis0cheng.github.io/2018/11/11/2TensorFlow%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E4%BA%A4%E5%8F%89%E7%86%B5/" target="_blank" rel="noopener">这里的计算交叉熵公式可以参考我另外一篇博客</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># loss</span></span><br><span class="line">cross_entropy = tf.reduce_sum(tf.nn.softmax_cross_entropy_with_logits(logits=y_reshape, labels=y_label_reshape))</span><br><span class="line"><span class="comment"># accuracy</span></span><br><span class="line">max_index_predict = tf.argmax(y_reshape, axis=<span class="number">-1</span>)</span><br><span class="line">max_index_label = tf.argmax(y_label_reshape, axis=<span class="number">-1</span>)</span><br><span class="line">correct_predict = tf.equal(max_index_predict, max_index_label)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_predict, tf.float32))</span><br></pre></td></tr></table></figure>
<h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># train</span></span><br><span class="line">train_op = tf.train.RMSPropOptimizer(FLAGS.learning_rate).minimize(cross_entropy, global_step=global_step)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(FLAGS.epoch_num):</span><br><span class="line">    tf.train.global_step(sess, global_step_tensor=global_step)</span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    sess.run(train_initializer)</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(int(train_steps)):</span><br><span class="line">        loss, acc, gstep, _ = sess.run([cross_entropy, accuracy, global_step, train_op],feed_dict=&#123;keep_prob: FLAGS.keep_prob&#125;)</span><br><span class="line">        <span class="comment"># print log</span></span><br><span class="line">        <span class="keyword">if</span> step % FLAGS.steps_per_print == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Global Step'</span>, gstep, <span class="string">'Step'</span>, step, <span class="string">'Train Loss'</span>, loss, <span class="string">'Accuracy'</span>, acc)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> epoch % FLAGS.epochs_per_dev == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># dev</span></span><br><span class="line">        sess.run(dev_initializer)</span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> range(int(dev_steps)):</span><br><span class="line">            <span class="keyword">if</span> step % FLAGS.steps_per_print == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'Dev Accuracy'</span>, sess.run(accuracy, feed_dict=&#123;keep_prob: <span class="number">1</span>&#125;), <span class="string">'Step'</span>, step)</span><br></pre></td></tr></table></figure>
<p>在这里我们首先初始化 train_initializer，将 iterator 绑定到 Train Dataset 上，然后执行 train_op，获得 loss、acc、gstep 等结果并输出。</p>
<h3 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Dev Accuracy <span class="number">0.9580078</span> Step <span class="number">0</span></span><br><span class="line">Dev Accuracy <span class="number">0.9472656</span> Step <span class="number">2</span></span><br><span class="line">Dev Accuracy <span class="number">0.9501953</span> Step <span class="number">4</span></span><br><span class="line">Dev Accuracy <span class="number">0.9658203</span> Step <span class="number">6</span></span><br><span class="line">Global Step <span class="number">3243</span> Step <span class="number">0</span> Train Loss <span class="number">1.1920928e-06</span> Accuracy <span class="number">1.0</span></span><br><span class="line">Global Step <span class="number">3245</span> Step <span class="number">2</span> Train Loss <span class="number">1.5497207e-06</span> Accuracy <span class="number">1.0</span></span><br><span class="line">Global Step <span class="number">3247</span> Step <span class="number">4</span> Train Loss <span class="number">1.1920928e-06</span> Accuracy <span class="number">1.0</span></span><br><span class="line">Global Step <span class="number">3249</span> Step <span class="number">6</span> Train Loss <span class="number">1.7881392e-06</span> Accuracy <span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>  验证集准确率 95% 以上。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>训练过程我们还可以每隔几个 Epoch 保存一下模型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save model</span></span><br><span class="line"><span class="keyword">if</span> epoch % FLAGS.epochs_per_save == <span class="number">0</span>:</span><br><span class="line">    saver.save(sess, FLAGS.checkpoint_dir, global_step=gstep)</span><br></pre></td></tr></table></figure>
<p>验证模型的时候Reload模型，然后进行验证：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load model</span></span><br><span class="line">ckpt = tf.train.get_checkpoint_state(<span class="string">'ckpt'</span>)</span><br><span class="line"><span class="keyword">if</span> ckpt:</span><br><span class="line">    saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line">    print(<span class="string">'Restore from'</span>, ckpt.model_checkpoint_path)</span><br><span class="line">    sess.run(test_initializer)</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(int(test_steps)):</span><br><span class="line">        <span class="keyword">if</span> step % FLAGS.steps_per_print == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Test Accuracy'</span>, sess.run(accuracy, feed_dict=&#123;keep_prob: <span class="number">1</span>&#125;), <span class="string">'Step'</span>, step)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'No Model Found'</span>)</span><br></pre></td></tr></table></figure>
<p>验证之后其准确率基本是差不多的。</p>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_3</title>
    <url>/2018/11/10/leetcode_3/</url>
    <content><![CDATA[<h1 id="LeetCode-No-3"><a href="#LeetCode-No-3" class="headerlink" title="[LeetCode: No.3]"></a>[LeetCode: No.3]</h1><blockquote>
<p>Given a string, find the length of the longest substring without repeating characters.</p>
</blockquote>
<p><strong>题目大意</strong>：给出一个字符串，找到最长的没有重复字符的子字符串，并返回该子字符串的长度。</p>
<p>Examples：</p>
<pre><code>Given &quot;abcabcbb&quot;, the answer is &quot;abc&quot;, which the length is 3.
Given &quot;bbbbb&quot;, the answer is &quot;b&quot;, with the length of 1.
Given &quot;pwwkew&quot;, the answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.
</code></pre><h5 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h5><p>粗暴的想法是利用循环嵌套对所有情况进行遍历。大体的思路是：第一层循环从字符串的最左侧到左右侧第二个，然后第二层循环从第一层紧跟着的一个到最后的字符串，之后比较长度得到最大长度的子字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        max_len = <span class="number">0</span> <span class="comment">#用这个值记录我们要返回的最长子字符串长度</span></span><br><span class="line">        <span class="comment">#当原字符串长度为0或1的特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> (len(s) == <span class="number">1</span> <span class="keyword">or</span> len(s) == <span class="number">0</span>):</span><br><span class="line">            max_len = len(s)</span><br><span class="line">        <span class="comment">#开始遍历每一个子字符串，并进行长度比较，得到最长的那个</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(s)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(s)):</span><br><span class="line">                <span class="keyword">if</span> s[j] <span class="keyword">in</span> s[i:j]:</span><br><span class="line">                    <span class="keyword">if</span> j-i &gt; max_len:</span><br><span class="line">                        max_len = j - i</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> j == len(s) - <span class="number">1</span>:  	</span><br><span class="line">				<span class="comment">#当j是最后一个字符时，需要加上一个单位</span></span><br><span class="line">                    <span class="keyword">if</span> max_len &lt; j - i + <span class="number">1</span>:</span><br><span class="line">                        max_len = j - i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> max_len</span><br></pre></td></tr></table></figure>
<p>这种解法虽然可以通过，但是效率很低，时间会很长</p>
<a id="more"></a>
<h5 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#创建一个空字典，其存放的形式是“单字符:出现位置的索引”</span></span><br><span class="line">        indexDict = &#123;&#125;</span><br><span class="line">        <span class="comment">#存放记录最大长度和当前循环下的长度</span></span><br><span class="line">        maxLength = currMax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="comment">#这里是当s[i]没有在之前出现过，则当前长度currMax自动加一</span></span><br><span class="line">            <span class="comment">#当出现了重复字符，则比较当前找到的子字符串长度和历史最大长度</span></span><br><span class="line">            <span class="comment">#重点是这里i - indexDict[s[i]] - 1 的含义；代码后举例具体讲解</span></span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> indexDict <span class="keyword">and</span> i - indexDict[s[i]] - <span class="number">1</span> &lt;= currMax:</span><br><span class="line">                <span class="keyword">if</span> maxLength &lt; currMax:</span><br><span class="line">                    maxLength = currMax</span><br><span class="line">                currMax = i - indexDict[s[i]] - <span class="number">1</span></span><br><span class="line">            currMax = currMax + <span class="number">1</span>                </span><br><span class="line">            indexDict[s[i]] = i     <span class="comment">#这一步也非常关键，可以更新重复字符的位置</span></span><br><span class="line">        <span class="keyword">return</span> maxLength <span class="keyword">if</span> currMax &lt; maxLength <span class="keyword">else</span> currMax</span><br></pre></td></tr></table></figure>
<p>接下来举例说明下为什么【i - indexDict[s[i]] - 1】代表了当前找到子字符串的长度。 比如字符串’abcdadd’，代码运行过程中一直迭代到i=3【对应字符d】时，都不满足s[i] in indexDict ,不执行条件语句，而是currMax依次加一，并且将字符信息以{s[i]:i}的形式存放在字典中。当继续迭代i=4时，进入条件语句，这里主要解释【i - indexDict[s[i]] - 1】，检测到了重复字符’a’，之前该字符出现位置为i=0处即【indexDict[s[i]] =0】这时候当前检测到的无重复字符子串为’abcd’，长度为【4-indexDict[s[i]] -1 = 3】。其他同此例。</p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
</search>
